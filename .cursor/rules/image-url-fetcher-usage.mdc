---
description: 
globs: 
alwaysApply: false
---
# How to Implement Image Fetching with Size Consideration

When fetching images, especially from a CMS or a system that provides multiple image sizes (e.g., thumbnail, card, tablet, original), it's important to use the appropriate size to optimize loading times and display quality.

Our project includes a utility function `getImageUrl` located in [`src/utils/getImageUrl.ts`](mdc:src/utils/getImageUrl.ts) designed for this purpose.

## Function Signature

```typescript
export function getImageUrl(
  image: Media | MediaSize, // Media is the full image object, MediaSize is a specific size object
  preferredSizeName: keyof NonNullable<Media['sizes']> = 'card' // e.g., 'thumbnail', 'card', 'tablet'
): string | undefined
```

## Key Behaviors and Usage

1.  **Input**:
    *   `image`: This can be either the full `Media` object (which typically contains a `sizes` property with different generated image dimensions) or a `MediaSize` object (which is one of the specific sizes like `mediaItem.sizes.card`).
    *   `preferredSizeName`: This optional parameter (defaults to `'card'`) allows you to specify which size you'd prefer. Valid options typically include `'thumbnail'`, `'card'`, `'tablet'`, or other keys defined in your `Media` collection's `imageSizes`.

2.  **Size Prioritization (when a full `Media` object is passed)**:
    *   The function first attempts to get the URL for the `preferredSizeName`.
    *   If the `preferredSizeName` (or its URL) is not found, it has a fallback mechanism:
        1.  It tries to get `card` size.
        2.  Then, `tablet` size.
        3.  Then, `thumbnail` size.
        4.  Finally, if none of the above are found, it defaults to the original `mediaObject.url`.

3.  **Direct Size Object**:
    *   If you pass a `MediaSize` object directly (e.g., `const cardImage = myMediaObject.sizes?.card; getImageUrl(cardImage)`), it will use the URL from that specific size object.

4.  **Output**:
    *   The function returns a *relative URL path* (e.g., `/media/my-image.jpg`) suitable for use in `<img>` tags or with Next.js `<Image />` components. It handles converting absolute CMS URLs to relative paths.
    *   It returns `undefined` if a valid URL cannot be determined.

## Examples

```typescript
import { getImageUrl } from '@/utils/getImageUrl'; // Adjust path as necessary
import { Media } from '@payload-types'; // Assuming this is your Media type

// Assume mediaItem is a full Media object fetched from Payload
const mediaItem: Media = /* ... fetched media object ... */;

// Example 1: Get the default size (card)
const cardImageUrl = getImageUrl(mediaItem);
// Result: e.g., '/media/uploads/my-image-card.jpg' or a fallback

// Example 2: Get a specific size (tablet)
const tabletImageUrl = getImageUrl(mediaItem, 'tablet');
// Result: e.g., '/media/uploads/my-image-tablet.jpg'

// Example 3: Get the thumbnail size
const thumbnailUrl = getImageUrl(mediaItem, 'thumbnail');
// Result: e.g., '/media/uploads/my-image-thumbnail.jpg'

// Example 4: Handling a case where mediaItem or its sizes might be missing
const somePotentiallyUndefinedMedia = getImageUrl(mediaItem?.sizes?.card);
// This works because if mediaItem.sizes.card is undefined, getImageUrl handles it gracefully.

if (tabletImageUrl) {
  // Use the tabletImageUrl in your component
}
```

By using [`getImageUrl.ts`](mdc:src/utils/getImageUrl.ts) consistently, you ensure that your application requests appropriately sized images, improving performance and user experience.

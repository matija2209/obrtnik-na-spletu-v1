---
description: 
globs: 
alwaysApply: false
---
# How to Add a New Payload CMS Collection

This guide outlines the steps to add a new data collection to your Payload CMS project. Collections are fundamental for organizing and managing different types of content (e.g., services, projects, testimonials, or the `SubServices` we recently added).

## Actionable Steps:

### 1. Define the Collection Configuration

   - **Create a Directory:** For organization, create a new directory for your collection within `src/collections/`. For example, if your new collection is named "Products", you would create `src/collections/Products/`.
     *Example:* We created `[src/collections/SubServices/](mdc:src/collections/SubServices/)` for our `SubServices` collection.

   - **Create `index.ts`:** Inside this new directory, create an `index.ts` file. This file will contain the [CollectionConfig](https://payloadcms.com/docs/configuration/collections) object that defines your collection's schema, behavior, and admin UI settings.

   - **Define the Configuration:**
     - `slug`: A unique identifier for your collection (e.g., `products`, `sub-services`).
     - `labels`: Singular and plural names for the admin UI.
     - `admin`: Configure how the collection appears in the admin panel (e.g., `useAsTitle` to specify which field acts as the title, `defaultColumns`, `group` to organize collections).
     - `access`: Define read, create, update, and delete permissions.
     - `fields`: An array defining the data fields for your collection (e.g., `text`, `richText`, `relationship`, `array`, `upload`).
     - `versions` (optional): Configure draft/publish and versioning.
     - `hooks` (optional): Attach functions to run at different points in the collection's lifecycle.

   - **Example:** Refer to the structure of `[SubServices/index.ts](mdc:src/collections/SubServices/index.ts)` or existing collections like `[ServicePages.ts](mdc:src/collections/ServicePages.ts)` or `[Services.ts](mdc:src/collections/Services.ts)`.

### 2. Implement Hooks (Optional but Common)

   - Hooks allow you to inject custom logic. For example, automatically populating a `publishedAt` date or formatting a slug.
   - **Create a `hooks` Subdirectory:** Inside your collection's directory (e.g., `src/collections/MyNewCollection/hooks/`).
   - **Define Hook Files:** Create TypeScript files for each hook (e.g., `populatePublishedAt.ts`).
   - **Import and Use:** Import the hook in your collection's `index.ts` and add it to the `hooks` array in the collection configuration.
     *Example:* We created `[populatePublishedAt.ts](mdc:src/collections/SubServices/hooks/populatePublishedAt.ts)` for the `SubServices` collection.

### 3. Register the Collection in `payload.config.ts`

   - Your new collection must be registered in your main Payload configuration file.
   - **Import the Collection:** Import your collection's configuration object into `[payload.config.ts](mdc:payload.config.ts)`.
     ```typescript
     import { MyNewCollection } from './collections/MyNewCollection'; // Adjust path
     ```
   - **Add to `collections` Array:** Add the imported collection object to the `collections` array within the `buildConfig` function.
     ```typescript
     // payload.config.ts
     export default buildConfig({
       // ... other config
       collections: [
         // ... your other collections
         MyNewCollection, // Add the new collection here
       ],
       // ... rest of your config
     });
     ```

### 4. Regenerate Payload Types

   - To ensure TypeScript support and type safety for your new collection throughout your project, you need to regenerate Payload's type definitions.
   - **Run Command:** Execute `npm run generate:types` (or `yarn generate:types` / `pnpm generate:types`) in your project root.
   - **Alternatively:** Restarting your Payload development server often triggers type generation automatically.
   - This will update the `[payload-types.ts](mdc:payload-types.ts)` file to include interfaces and types for your new collection.

### 5. Update Data Fetching Utilities (If Applicable)

   - If you need to query or display data from this new collection in your application (e.g., on your website frontend or in server-side logic), you'll likely want to add utility functions.
   - **Locate Utility File:** This is often a file like `[src/lib/payload.ts](mdc:src/lib/payload.ts)`.
   - **Import New Type:** Import the generated type for your new collection from `payload-types.ts`.
     ```typescript
     import type { MyNewCollection } from '../../payload-types'; // Adjust path
     ```
   - **Create Getter Functions:** Add functions to fetch all items, a single item by ID or slug, or items based on relationships. Include caching strategies (like Next.js cache tags) if appropriate.
     *Example:* We added `getSubServicesByParent` and `SUB_SERVICES_BY_PARENT_TAG` to `[src/lib/payload.ts](mdc:src/lib/payload.ts)` for the `SubServices` collection.

### 6. Relate to Other Collections (If Needed)

   - If your new collection needs to be linked from or to other existing collections, you'll need to add `relationship` fields.
   - **Modify Existing Collection:** Open the `index.ts` file of the collection you want to link *from*.
   - **Add Relationship Field:** Add a new field of type `relationship`, specifying the `relationTo` property as the `slug` of your new collection. Set `hasMany: true` if you want to link to multiple items from the new collection.
     *Example:* We modified `[ServicePages.ts](mdc:src/collections/ServicePages.ts)` to add a `subServices` relationship field pointing to the `sub-services` collection.

### 7. Final Checks

   - **Restart Development Server:** Ensure all changes are picked up.
   - **Test in Admin UI:** Navigate to the Payload admin panel. Your new collection should appear (possibly within the group you specified). Test creating, updating, and deleting items. Verify all fields work as expected.
   - **Verify Frontend/API Usage:** If you've integrated the collection into your frontend or API, test those integrations.

By following these steps, you can systematically add new, fully functional collections to your Payload CMS project.
---
description: 
globs: 
alwaysApply: false
---
\
# How to Add a New Feature (Field/Flag) to a Section Template (Payload Block)

This guide outlines the steps required to add a new configurable feature, such as a text field, boolean flag, or relationship, to an existing Payload CMS block (often referred to as a section template).

## Checklist for Adding a Feature

-   [ ] **Modify Block Configuration:**
    -   Locate the block's configuration file (e.g., `[block-name]/config.ts](mdc:src/blocks/[block-name]/config.ts)`).
    -   Add the new field definition to the `fields` array. Ensure you configure `name`, `label`, `type`, localization (`localized`), requirement (`required`), and `defaultValue` appropriately.

-   [ ] **Update Payload Types:**
    -   Run the type generation script from your terminal (usually `pnpm generate:types` or `npm run generate:types`).
    -   Verify that the generated `[payload-types.ts](mdc:payload-types.ts)` now includes the new field in the corresponding block's interface (e.g., `HeroBlock`).

-   [ ] **Update Block Component(s):**
    -   Edit the main block component file (e.g., `[block-name]/components/index.tsx](mdc:src/blocks/[block-name]/components/index.tsx)`).
        -   Destructure the new prop from the block data.
        -   Pass the new prop down to the specific template components (e.g., `default-*.tsx`, `variant-*.tsx`). Handle default values if the prop might be optional (`??` or `||`).
    -   Edit the specific template component files (e.g., `[block-name]/components/default-*.tsx](mdc:src/blocks/[block-name]/components/default-*.tsx)`, `[block-name]/components/variant-*.tsx](mdc:src/blocks/[block-name]/components/variant-*.tsx)`).
        -   Add the new prop to the component's props interface/type.
        -   Destructure the new prop.
        -   Implement the logic to display or use the new feature (e.g., render the text, conditionally render based on the flag).

-   [ ] **Update Seed Data (Optional but Recommended):**
    -   Edit the `[seed.ts](mdc:src/seed.ts)` file.
    -   Locate where the affected block is used in the seed data (e.g., within a page's layout).
    -   Add the new field with a relevant value to the block's data object in the seed. This helps ensure new environments are set up correctly.

-   [ ] **Test the Changes:**
    -   Run your development environment.
    -   Check the Payload admin UI: Can you see and edit the new field for the block?
    -   Check the frontend: Does the block render correctly with the new feature, both with and without data provided for the new field? Does it use the seed data correctly?

-   [ ] **Commit and Push:**
    -   Stage all modified files (`config.ts`, `payload-types.ts`, `index.tsx`, component files, `seed.ts`).
    -   Commit the changes with a clear message.
    -   Push to your repository.

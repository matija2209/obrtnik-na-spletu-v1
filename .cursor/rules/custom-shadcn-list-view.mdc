---
description: 
globs: 
alwaysApply: false
---
# Creating Custom List Views with ShadCN UI in Payload CMS

This guide outlines the steps to replace Payload CMS's default collection list view with a custom implementation using [ShadCN UI](mdc:https:/ui.shadcn.com) components for the table and pagination. We'll reference examples like `[src/components/admin/collections/tenants/tenants-list.tsx](mdc:src/components/admin/collections/tenants/tenants-list.tsx)` and `[src/components/admin/collections/media/media-list.tsx](mdc:src/components/admin/collections/media/media-list.tsx)`.

## 1. Registering the Custom List View

In your Payload collection configuration file (e.g., `[src/collections/Tenants/index.ts](mdc:src/collections/Tenants/index.ts)` or `src/collections/Media/index.ts`), specify the path to your custom list view component within the `admin.components.views.list.Component` property:

```typescript
// Example from a collection config (e.g., src/collections/YourCollection/index.ts)
import type { CollectionConfig } from 'payload'

export const YourCollection: CollectionConfig = {
  slug: 'your-collection',
  // ... other config
  admin: {
    // ... other admin config
    components: {
      views: {
        list: {
          // Path to your custom list view component
          Component: "/path/to/your/custom-list-view.tsx"
        }
      }
    }
  },
  // ... other config
};
```

## 2. Custom List View Component Structure

Your custom list view component (e.g., `[src/components/admin/collections/tenants/tenants-list.tsx](mdc:src/components/admin/collections/tenants/tenants-list.tsx)`) should be a client component.

### Basic Setup:

```tsx
// src/components/admin/collections/your-collection/your-collection-list.tsx
"use client"

import type { ListViewClientProps } from 'payload'
import { useListQuery, useTranslation } from '@payloadcms/ui' // Core Payload hooks
import React from 'react'
import Image from 'next/image' // If displaying images

// Import your collection's type from generated types
import { YourCollectionType } from '@payload-types' // e.g., Media, Tenant

// ShadCN UI Components
import {
  Table, TableHeader, TableBody, TableHead, TableRow, TableCell,
} from '@/components/ui/table' // Assuming path to your ShadCN table
import {
  Pagination, PaginationContent, PaginationEllipsis, PaginationItem,
  PaginationLink, PaginationNext, PaginationPrevious,
} from '@/components/ui/pagination' // Assuming path to your ShadCN pagination

// Optional: Helper functions (e.g., for formatting dates or file sizes)
// const formatDate = (dateString) => { /* ... */ };

// Pagination Item Generation (example)
const generatePagination = (currentPage: number, totalPages: number, siblingCount: number = 1): (string | number)[] => {
  // ... (implementation as seen in tenants-list.tsx or media-list.tsx)
  // This function creates an array of page numbers and ellipsis for the pagination component.
  // For brevity, the full implementation is omitted here but can be found in the example files.
  const totalPageNumbers = siblingCount * 2 + 5;
  if (totalPages <= totalPageNumbers) {
    return Array.from({ length: totalPages }, (_, i) => i + 1);
  }
  const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);
  const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);
  const shouldShowLeftDots = leftSiblingIndex > 2;
  const shouldShowRightDots = rightSiblingIndex < totalPages - 2;
  const firstPageIndex = 1;
  const lastPageIndex = totalPages;

  if (!shouldShowLeftDots && shouldShowRightDots) {
    let leftItemCount = 3 + 2 * siblingCount;
    if (currentPage <= siblingCount + 1) {
        leftItemCount = Math.max(5, currentPage + siblingCount +1)
    }
    const leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);
    return [...leftRange, '...', totalPages];
  }

  if (shouldShowLeftDots && !shouldShowRightDots) {
     let rightItemCount = 3 + 2 * siblingCount;
     if (totalPages - currentPage <= siblingCount) {
        rightItemCount = Math.max(5, totalPages - currentPage + siblingCount + 2)
     }
    const rightRange = Array.from({ length: rightItemCount }, (_, i) => totalPages - rightItemCount + 1 + i);
    return [firstPageIndex, '...', ...rightRange];
  }

  if (shouldShowLeftDots && shouldShowRightDots) {
    const middleRange = Array.from({ length: rightSiblingIndex - leftSiblingIndex + 1 }, (_, i) => leftSiblingIndex + i);
    return [firstPageIndex, '...', ...middleRange, '...', lastPageIndex];
  }
  return Array.from({ length: totalPages }, (_, i) => i + 1);
};


function YourCustomList(props: ListViewClientProps) {
  const {
    data,        // Contains docs, pagination info (page, totalPages, etc.)
    handlePageChange, // Function to change the current page
    // Note: `isLoading` is not directly destructured. Loading state is inferred from `!data`.
  } = useListQuery(); // IMPORTANT: Do NOT pass a type argument here, e.g., useListQuery<YourCollectionType>() will cause a linter error. Type is inferred.

  const { t } = useTranslation(); // For internationalization

  // Loading State
  if (!data) {
    return <div className="p-4 md:p-6">{t('general:loading') || 'Loading...'}</div>;
  }

  // Empty State
  if (!data.docs || data.docs.length === 0) {
    return <div className="p-4 md:p-6">{t('yourCollection:noItemsFound') || 'No items found.'}</div>;
  }

  const {
    docs,         // Array of documents for the current page
    hasNextPage,
    hasPrevPage,
    nextPage,
    page,         // Current page number
    prevPage,
    totalDocs,    // Total number of documents in the collection
    totalPages,   // Total number of pages
  } = data;

  // Define table columns
  const columns = [
    { key: 'thumbnail', label: 'Thumbnail', width: 'w-20' }, // Example for images
    { key: 'name', label: 'Name' }, // Example for a text field
    { key: 'createdAt', label: 'Created At' },
    // Add more columns based on your collection's fields
  ];

  const paginationItems = generatePagination(page || 1, totalPages || 0);

  return (
    <div className="p-4 md:p-6">
      <h1 className="text-2xl font-semibold mb-4">{t('yourCollection:title') || 'Collection Title'}</h1>
      
      <div className="border rounded-lg"> {/* ShadCN table container style */}
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map((col) => (
                <TableHead key={col.key} className={col.width || ''}>{col.label}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {(docs as YourCollectionType[]).map((doc) => ( // Cast docs to your specific type
              <TableRow key={doc.id}>
                {columns.map(col => (
                  <TableCell key={col.key} className="py-2 px-2">
                    {col.key === 'thumbnail' && (doc as any).thumbnailURL && ( /* Example for Media */
                      <div className="relative h-12 w-16 bg-gray-100 rounded overflow-hidden">
                        <Image
                          src={(doc as any).thumbnailURL || (doc as any).url || ''}
                          alt={(doc as any).alt || (doc as any).filename || ''}
                          fill
                          sizes="64px"
                          className="object-contain" // or object-cover
                          priority={false}
                        />
                      </div>
                    )}
                    {col.key === 'name' && (doc as any)[col.key]}
                    {col.key === 'createdAt' && formatDate((doc as any).createdAt)}
                    {/* Add other column renderings based on col.key and doc properties */}
                    {/* For complex fields or direct field access: String(doc[col.key] ?? '') */}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="mt-6 flex flex-col md:flex-row justify-between items-center gap-4">
          <div>
            <p className="text-sm text-muted-foreground">
              {t('general:paginationText', {
                page: page, totalPages: totalPages, count: docs.length, totalDocs: totalDocs,
                label: t('yourCollection:itemsLabel', { count: totalDocs }) || (totalDocs === 1 ? 'item' : 'items')
              }) || `Page ${page} of ${totalPages}. Showing ${docs.length} of ${totalDocs} items.`}
            </p>
          </div>
          <Pagination>
            <PaginationContent>
              {hasPrevPage && (
                <PaginationItem>
                  <PaginationPrevious
                    href="#"
                    onClick={(e) => { 
                      e.preventDefault(); 
                      if (handlePageChange && typeof prevPage === 'number') { 
                        handlePageChange(prevPage); 
                      }
                    }}
                  />
                </PaginationItem>
              )}

              {paginationItems.map((item, index) => (
                <PaginationItem key={index}>
                  {typeof item === 'number' ? (
                    <PaginationLink
                      href="#"
                      onClick={(e) => { e.preventDefault(); if (handlePageChange && typeof item === 'number') handlePageChange(item); }}
                      isActive={page === item}
                    >
                      {item}
                    </PaginationLink>
                  ) : (
                    <PaginationEllipsis />
                  )}
                </PaginationItem>
              ))}

              {hasNextPage && (
                <PaginationItem>
                  <PaginationNext
                    href="#"
                    onClick={(e) => { 
                      e.preventDefault(); 
                      if (handlePageChange && typeof nextPage === 'number') { 
                        handlePageChange(nextPage); 
                      }
                    }}
                  />
                </PaginationItem>
              )}
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  );
}

export default YourCustomList;

```

## Key Considerations:

*   **ShadCN UI Component Paths**: Ensure the import paths for `@/components/ui/table` and `@/components/ui/pagination` match your project structure where you've installed/created these ShadCN components.
*   **Type Safety**:
    *   Import your specific collection type (e.g., `Media`, `Tenant`) from `@payload-types` to cast the `docs` array for type-safe access to document properties: `(docs as YourCollectionType[])`.
    *   When accessing deeply nested or optional properties for display, use optional chaining (`?.`) or provide fallbacks.
    *   The `useListQuery` hook infers its type based on the collection context. **Do not provide a generic type argument to `useListQuery()`** as it will lead to a TypeScript error (`Expected 0 type arguments, but got 1.`).
*   **`generatePagination` Helper**: This function is crucial for creating the array of page numbers and ellipsis dots. You can copy it from the example files or implement your own logic.
*   **Data Display in TableCells**: Customize how you render data in `<TableCell>` based on the `col.key` and the data type of `doc[col.key]`. For images, use `next/image`. For dates, use a formatting function. For rich text or complex objects, you might need specific renderers.
*   **Internationalization**: Use the `t` function from `useTranslation` for all user-facing strings to allow for localization.
*   **Styling**: The example uses basic Tailwind CSS classes (e.g., `p-4 md:p-6`, `border rounded-lg`). Adjust styling as per your design system.

This approach provides a flexible way to create highly customized list views in Payload that integrate seamlessly with your existing UI library like ShadCN.

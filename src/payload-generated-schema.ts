/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  timestamp,
  boolean,
  numeric,
  jsonb,
  text,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const enum_users_roles = pgEnum("enum_users_roles", [
  "super-admin",
  "user",
]);
export const enum_users_tenants_roles = pgEnum("enum_users_tenants_roles", [
  "tenant-admin",
  "tenant-viewer",
]);
export const enum_media_source = pgEnum("enum_media_source", [
  "manual",
  "facebook",
]);
export const enum_services_icon = pgEnum("enum_services_icon", [
  "Sparkles",
  "Zap",
  "Drop",
  "Hands",
  "Footprints",
  "Paintbrush",
  "bager",
  "excavator",
  "wrecking-ball",
  "Phone",
  "Mail",
  "plant-rage-weed",
  "gardening-shears",
  "snowflake",
  "stone-path",
  "sprout",
  "shovel",
  "tree",
  "front-loader",
  "lamp",
  "water-drop",
  "fence",
  "leaves",
  "flower",
  "grass",
  "google",
  "facebook",
  "Building",
]);
export const enum_testimonials_source = pgEnum("enum_testimonials_source", [
  "google",
  "facebook",
  "website",
  "manual",
]);
export const enum_faq_items_category = pgEnum("enum_faq_items_category", [
  "general",
  "installation",
  "maintenance",
  "billing",
]);
export const enum_ctas_tc = pgEnum("enum_ctas_tc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_ctas_sc = pgEnum("enum_ctas_sc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_ctas_dc = pgEnum("enum_ctas_dc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_ctas_bgc = pgEnum("enum_ctas_bgc", [
  "inherit",
  "white",
  "light",
  "light-30",
  "light-50",
  "muted",
  "primary",
  "primary-30",
  "primary-50",
  "secondary",
  "secondary-30",
  "secondary-50",
  "accent",
  "accent-30",
  "dark",
  "dark-30",
  "dark-50",
  "dark-80",
]);
export const enum_ctas_icon = pgEnum("enum_ctas_icon", [
  "Sparkles",
  "Zap",
  "Drop",
  "Hands",
  "Footprints",
  "Paintbrush",
  "bager",
  "excavator",
  "wrecking-ball",
  "Phone",
  "Mail",
  "plant-rage-weed",
  "gardening-shears",
  "snowflake",
  "stone-path",
  "sprout",
  "shovel",
  "tree",
  "front-loader",
  "lamp",
  "water-drop",
  "fence",
  "leaves",
  "flower",
  "grass",
  "google",
  "facebook",
  "Building",
]);
export const enum_ctas_bv = pgEnum("enum_ctas_bv", [
  "default",
  "secondary",
  "destructive",
  "outline",
  "ghost",
  "link",
]);
export const enum_projects_project_status = pgEnum(
  "enum_projects_project_status",
  ["planned", "in-progress", "completed"],
);
export const enum_projects_source = pgEnum("enum_projects_source", [
  "manual",
  "facebook",
]);
export const enum_opening_hours_daily_hours_days = pgEnum(
  "enum_opening_hours_daily_hours_days",
  [
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
    "sunday",
  ],
);
export const enum_sub_services_icon = pgEnum("enum_sub_services_icon", [
  "Sparkles",
  "Zap",
  "Drop",
  "Hands",
  "Footprints",
  "Paintbrush",
  "bager",
  "excavator",
  "wrecking-ball",
  "Phone",
  "Mail",
  "plant-rage-weed",
  "gardening-shears",
  "snowflake",
  "stone-path",
  "sprout",
  "shovel",
  "tree",
  "front-loader",
  "lamp",
  "water-drop",
  "fence",
  "leaves",
  "flower",
  "grass",
  "google",
  "facebook",
  "Building",
]);
export const enum_sub_services_status = pgEnum("enum_sub_services_status", [
  "draft",
  "published",
]);
export const enum__sub_services_v_version_icon = pgEnum(
  "enum__sub_services_v_version_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum__sub_services_v_version_status = pgEnum(
  "enum__sub_services_v_version_status",
  ["draft", "published"],
);
export const enum_pages_blocks_hero_template = pgEnum(
  "enum_pages_blocks_hero_template",
  ["default", "variant1"],
);
export const enum_pages_blocks_hero_bgc = pgEnum("enum_pages_blocks_hero_bgc", [
  "inherit",
  "white",
  "light",
  "light-30",
  "light-50",
  "muted",
  "primary",
  "primary-30",
  "primary-50",
  "secondary",
  "secondary-30",
  "secondary-50",
  "accent",
  "accent-30",
  "dark",
  "dark-30",
  "dark-50",
  "dark-80",
]);
export const enum_pages_blocks_hero_tc = pgEnum("enum_pages_blocks_hero_tc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_hero_sc = pgEnum("enum_pages_blocks_hero_sc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_hero_dc = pgEnum("enum_pages_blocks_hero_dc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_services_template = pgEnum(
  "enum_pages_blocks_services_template",
  ["default"],
);
export const enum_pages_blocks_services_bgc = pgEnum(
  "enum_pages_blocks_services_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_services_tc = pgEnum(
  "enum_pages_blocks_services_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_services_sc = pgEnum(
  "enum_pages_blocks_services_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_services_dc = pgEnum(
  "enum_pages_blocks_services_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_faq_template = pgEnum(
  "enum_pages_blocks_faq_template",
  ["default"],
);
export const enum_pages_blocks_faq_bgc = pgEnum("enum_pages_blocks_faq_bgc", [
  "inherit",
  "white",
  "light",
  "light-30",
  "light-50",
  "muted",
  "primary",
  "primary-30",
  "primary-50",
  "secondary",
  "secondary-30",
  "secondary-50",
  "accent",
  "accent-30",
  "dark",
  "dark-30",
  "dark-50",
  "dark-80",
]);
export const enum_pages_blocks_faq_tc = pgEnum("enum_pages_blocks_faq_tc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_faq_sc = pgEnum("enum_pages_blocks_faq_sc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_faq_dc = pgEnum("enum_pages_blocks_faq_dc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_contact_template = pgEnum(
  "enum_pages_blocks_contact_template",
  ["default"],
);
export const enum_pages_blocks_contact_bgc = pgEnum(
  "enum_pages_blocks_contact_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_contact_tc = pgEnum(
  "enum_pages_blocks_contact_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_contact_sc = pgEnum(
  "enum_pages_blocks_contact_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_contact_dc = pgEnum(
  "enum_pages_blocks_contact_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_about_benefits_icon = pgEnum(
  "enum_pages_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum_pages_blocks_about_template = pgEnum(
  "enum_pages_blocks_about_template",
  ["default", "variant1"],
);
export const enum_pages_blocks_about_tc = pgEnum("enum_pages_blocks_about_tc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_about_sc = pgEnum("enum_pages_blocks_about_sc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_about_dc = pgEnum("enum_pages_blocks_about_dc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_about_bgc = pgEnum(
  "enum_pages_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_testimonials_template = pgEnum(
  "enum_pages_blocks_testimonials_template",
  ["default"],
);
export const enum_pages_blocks_testimonials_bgc = pgEnum(
  "enum_pages_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_testimonials_tc = pgEnum(
  "enum_pages_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_testimonials_sc = pgEnum(
  "enum_pages_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_testimonials_dc = pgEnum(
  "enum_pages_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_gallery_template = pgEnum(
  "enum_pages_blocks_gallery_template",
  ["default"],
);
export const enum_pages_blocks_gallery_bgc = pgEnum(
  "enum_pages_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_gallery_tc = pgEnum(
  "enum_pages_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_gallery_sc = pgEnum(
  "enum_pages_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_gallery_dc = pgEnum(
  "enum_pages_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_service_area_template = pgEnum(
  "enum_pages_blocks_service_area_template",
  ["default"],
);
export const enum_pages_blocks_service_area_bgc = pgEnum(
  "enum_pages_blocks_service_area_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_service_area_tc = pgEnum(
  "enum_pages_blocks_service_area_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_service_area_sc = pgEnum(
  "enum_pages_blocks_service_area_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_service_area_dc = pgEnum(
  "enum_pages_blocks_service_area_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_project_highlights_template = pgEnum(
  "enum_pages_blocks_project_highlights_template",
  ["default"],
);
export const enum_pages_blocks_project_highlights_bgc = pgEnum(
  "enum_pages_blocks_project_highlights_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_project_highlights_tc = pgEnum(
  "enum_pages_blocks_project_highlights_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_project_highlights_sc = pgEnum(
  "enum_pages_blocks_project_highlights_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_project_highlights_dc = pgEnum(
  "enum_pages_blocks_project_highlights_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_machinery_template = pgEnum(
  "enum_pages_blocks_machinery_template",
  ["default"],
);
export const enum_pages_blocks_machinery_bgc = pgEnum(
  "enum_pages_blocks_machinery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_machinery_tc = pgEnum(
  "enum_pages_blocks_machinery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_machinery_sc = pgEnum(
  "enum_pages_blocks_machinery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_machinery_dc = pgEnum(
  "enum_pages_blocks_machinery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_form_block_bgc = pgEnum(
  "enum_pages_blocks_form_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_form_block_tc = pgEnum(
  "enum_pages_blocks_form_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_form_block_sc = pgEnum(
  "enum_pages_blocks_form_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_form_block_dc = pgEnum(
  "enum_pages_blocks_form_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_howto_bgc = pgEnum(
  "enum_pages_blocks_howto_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_howto_tc = pgEnum("enum_pages_blocks_howto_tc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_howto_sc = pgEnum("enum_pages_blocks_howto_sc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_howto_dc = pgEnum("enum_pages_blocks_howto_dc", [
  "inherit",
  "primary",
  "secondary",
  "accent",
  "dark",
  "dark-80",
  "dark-50",
  "white",
  "white-80",
  "white-50",
  "muted",
]);
export const enum_pages_blocks_howto_template = pgEnum(
  "enum_pages_blocks_howto_template",
  ["default"],
);
export const enum_pages_blocks_cta_block_template = pgEnum(
  "enum_pages_blocks_cta_block_template",
  ["default"],
);
export const enum_pages_blocks_cta_block_bgc = pgEnum(
  "enum_pages_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_cta_block_tc = pgEnum(
  "enum_pages_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_cta_block_sc = pgEnum(
  "enum_pages_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_cta_block_dc = pgEnum(
  "enum_pages_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_featured_products_template = pgEnum(
  "enum_pages_blocks_featured_products_template",
  ["default"],
);
export const enum_pages_blocks_featured_products_bgc = pgEnum(
  "enum_pages_blocks_featured_products_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_pages_blocks_featured_products_tc = pgEnum(
  "enum_pages_blocks_featured_products_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_featured_products_sc = pgEnum(
  "enum_pages_blocks_featured_products_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_featured_products_dc = pgEnum(
  "enum_pages_blocks_featured_products_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_pages_blocks_text_template = pgEnum(
  "enum_pages_blocks_text_template",
  ["default"],
);
export const enum_pages_blocks_text_bgc = pgEnum("enum_pages_blocks_text_bgc", [
  "inherit",
  "white",
  "light",
  "light-30",
  "light-50",
  "muted",
  "primary",
  "primary-30",
  "primary-50",
  "secondary",
  "secondary-30",
  "secondary-50",
  "accent",
  "accent-30",
  "dark",
  "dark-30",
  "dark-50",
  "dark-80",
]);
export const enum_pages_page_type = pgEnum("enum_pages_page_type", [
  "landing",
  "contact",
  "privacyPolicy",
]);
export const enum_pages_status = pgEnum("enum_pages_status", [
  "draft",
  "published",
]);
export const enum__pages_v_blocks_hero_template = pgEnum(
  "enum__pages_v_blocks_hero_template",
  ["default", "variant1"],
);
export const enum__pages_v_blocks_hero_bgc = pgEnum(
  "enum__pages_v_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_hero_tc = pgEnum(
  "enum__pages_v_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_hero_sc = pgEnum(
  "enum__pages_v_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_hero_dc = pgEnum(
  "enum__pages_v_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_services_template = pgEnum(
  "enum__pages_v_blocks_services_template",
  ["default"],
);
export const enum__pages_v_blocks_services_bgc = pgEnum(
  "enum__pages_v_blocks_services_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_services_tc = pgEnum(
  "enum__pages_v_blocks_services_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_services_sc = pgEnum(
  "enum__pages_v_blocks_services_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_services_dc = pgEnum(
  "enum__pages_v_blocks_services_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_faq_template = pgEnum(
  "enum__pages_v_blocks_faq_template",
  ["default"],
);
export const enum__pages_v_blocks_faq_bgc = pgEnum(
  "enum__pages_v_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_faq_tc = pgEnum(
  "enum__pages_v_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_faq_sc = pgEnum(
  "enum__pages_v_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_faq_dc = pgEnum(
  "enum__pages_v_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_contact_template = pgEnum(
  "enum__pages_v_blocks_contact_template",
  ["default"],
);
export const enum__pages_v_blocks_contact_bgc = pgEnum(
  "enum__pages_v_blocks_contact_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_contact_tc = pgEnum(
  "enum__pages_v_blocks_contact_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_contact_sc = pgEnum(
  "enum__pages_v_blocks_contact_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_contact_dc = pgEnum(
  "enum__pages_v_blocks_contact_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_about_benefits_icon = pgEnum(
  "enum__pages_v_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum__pages_v_blocks_about_template = pgEnum(
  "enum__pages_v_blocks_about_template",
  ["default", "variant1"],
);
export const enum__pages_v_blocks_about_tc = pgEnum(
  "enum__pages_v_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_about_sc = pgEnum(
  "enum__pages_v_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_about_dc = pgEnum(
  "enum__pages_v_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_about_bgc = pgEnum(
  "enum__pages_v_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_testimonials_template = pgEnum(
  "enum__pages_v_blocks_testimonials_template",
  ["default"],
);
export const enum__pages_v_blocks_testimonials_bgc = pgEnum(
  "enum__pages_v_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_testimonials_tc = pgEnum(
  "enum__pages_v_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_testimonials_sc = pgEnum(
  "enum__pages_v_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_testimonials_dc = pgEnum(
  "enum__pages_v_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_gallery_template = pgEnum(
  "enum__pages_v_blocks_gallery_template",
  ["default"],
);
export const enum__pages_v_blocks_gallery_bgc = pgEnum(
  "enum__pages_v_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_gallery_tc = pgEnum(
  "enum__pages_v_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_gallery_sc = pgEnum(
  "enum__pages_v_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_gallery_dc = pgEnum(
  "enum__pages_v_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_service_area_template = pgEnum(
  "enum__pages_v_blocks_service_area_template",
  ["default"],
);
export const enum__pages_v_blocks_service_area_bgc = pgEnum(
  "enum__pages_v_blocks_service_area_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_service_area_tc = pgEnum(
  "enum__pages_v_blocks_service_area_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_service_area_sc = pgEnum(
  "enum__pages_v_blocks_service_area_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_service_area_dc = pgEnum(
  "enum__pages_v_blocks_service_area_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_project_highlights_template = pgEnum(
  "enum__pages_v_blocks_project_highlights_template",
  ["default"],
);
export const enum__pages_v_blocks_project_highlights_bgc = pgEnum(
  "enum__pages_v_blocks_project_highlights_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_project_highlights_tc = pgEnum(
  "enum__pages_v_blocks_project_highlights_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_project_highlights_sc = pgEnum(
  "enum__pages_v_blocks_project_highlights_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_project_highlights_dc = pgEnum(
  "enum__pages_v_blocks_project_highlights_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_machinery_template = pgEnum(
  "enum__pages_v_blocks_machinery_template",
  ["default"],
);
export const enum__pages_v_blocks_machinery_bgc = pgEnum(
  "enum__pages_v_blocks_machinery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_machinery_tc = pgEnum(
  "enum__pages_v_blocks_machinery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_machinery_sc = pgEnum(
  "enum__pages_v_blocks_machinery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_machinery_dc = pgEnum(
  "enum__pages_v_blocks_machinery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_form_block_bgc = pgEnum(
  "enum__pages_v_blocks_form_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_form_block_tc = pgEnum(
  "enum__pages_v_blocks_form_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_form_block_sc = pgEnum(
  "enum__pages_v_blocks_form_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_form_block_dc = pgEnum(
  "enum__pages_v_blocks_form_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_howto_bgc = pgEnum(
  "enum__pages_v_blocks_howto_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_howto_tc = pgEnum(
  "enum__pages_v_blocks_howto_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_howto_sc = pgEnum(
  "enum__pages_v_blocks_howto_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_howto_dc = pgEnum(
  "enum__pages_v_blocks_howto_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_howto_template = pgEnum(
  "enum__pages_v_blocks_howto_template",
  ["default"],
);
export const enum__pages_v_blocks_cta_block_template = pgEnum(
  "enum__pages_v_blocks_cta_block_template",
  ["default"],
);
export const enum__pages_v_blocks_cta_block_bgc = pgEnum(
  "enum__pages_v_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_cta_block_tc = pgEnum(
  "enum__pages_v_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_cta_block_sc = pgEnum(
  "enum__pages_v_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_cta_block_dc = pgEnum(
  "enum__pages_v_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_featured_products_template = pgEnum(
  "enum__pages_v_blocks_featured_products_template",
  ["default"],
);
export const enum__pages_v_blocks_featured_products_bgc = pgEnum(
  "enum__pages_v_blocks_featured_products_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_blocks_featured_products_tc = pgEnum(
  "enum__pages_v_blocks_featured_products_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_featured_products_sc = pgEnum(
  "enum__pages_v_blocks_featured_products_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_featured_products_dc = pgEnum(
  "enum__pages_v_blocks_featured_products_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__pages_v_blocks_text_template = pgEnum(
  "enum__pages_v_blocks_text_template",
  ["default"],
);
export const enum__pages_v_blocks_text_bgc = pgEnum(
  "enum__pages_v_blocks_text_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__pages_v_version_page_type = pgEnum(
  "enum__pages_v_version_page_type",
  ["landing", "contact", "privacyPolicy"],
);
export const enum__pages_v_version_status = pgEnum(
  "enum__pages_v_version_status",
  ["draft", "published"],
);
export const enum_service_pages_blocks_hero_template = pgEnum(
  "enum_service_pages_blocks_hero_template",
  ["default", "variant1"],
);
export const enum_service_pages_blocks_hero_bgc = pgEnum(
  "enum_service_pages_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_hero_tc = pgEnum(
  "enum_service_pages_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_hero_sc = pgEnum(
  "enum_service_pages_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_hero_dc = pgEnum(
  "enum_service_pages_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_services_template = pgEnum(
  "enum_service_pages_blocks_services_template",
  ["default"],
);
export const enum_service_pages_blocks_services_bgc = pgEnum(
  "enum_service_pages_blocks_services_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_services_tc = pgEnum(
  "enum_service_pages_blocks_services_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_services_sc = pgEnum(
  "enum_service_pages_blocks_services_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_services_dc = pgEnum(
  "enum_service_pages_blocks_services_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_faq_template = pgEnum(
  "enum_service_pages_blocks_faq_template",
  ["default"],
);
export const enum_service_pages_blocks_faq_bgc = pgEnum(
  "enum_service_pages_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_faq_tc = pgEnum(
  "enum_service_pages_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_faq_sc = pgEnum(
  "enum_service_pages_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_faq_dc = pgEnum(
  "enum_service_pages_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_contact_template = pgEnum(
  "enum_service_pages_blocks_contact_template",
  ["default"],
);
export const enum_service_pages_blocks_contact_bgc = pgEnum(
  "enum_service_pages_blocks_contact_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_contact_tc = pgEnum(
  "enum_service_pages_blocks_contact_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_contact_sc = pgEnum(
  "enum_service_pages_blocks_contact_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_contact_dc = pgEnum(
  "enum_service_pages_blocks_contact_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_about_benefits_icon = pgEnum(
  "enum_service_pages_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum_service_pages_blocks_about_template = pgEnum(
  "enum_service_pages_blocks_about_template",
  ["default", "variant1"],
);
export const enum_service_pages_blocks_about_tc = pgEnum(
  "enum_service_pages_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_about_sc = pgEnum(
  "enum_service_pages_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_about_dc = pgEnum(
  "enum_service_pages_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_about_bgc = pgEnum(
  "enum_service_pages_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_testimonials_template = pgEnum(
  "enum_service_pages_blocks_testimonials_template",
  ["default"],
);
export const enum_service_pages_blocks_testimonials_bgc = pgEnum(
  "enum_service_pages_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_testimonials_tc = pgEnum(
  "enum_service_pages_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_testimonials_sc = pgEnum(
  "enum_service_pages_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_testimonials_dc = pgEnum(
  "enum_service_pages_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_gallery_template = pgEnum(
  "enum_service_pages_blocks_gallery_template",
  ["default"],
);
export const enum_service_pages_blocks_gallery_bgc = pgEnum(
  "enum_service_pages_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_gallery_tc = pgEnum(
  "enum_service_pages_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_gallery_sc = pgEnum(
  "enum_service_pages_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_gallery_dc = pgEnum(
  "enum_service_pages_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_service_area_template = pgEnum(
  "enum_service_pages_blocks_service_area_template",
  ["default"],
);
export const enum_service_pages_blocks_service_area_bgc = pgEnum(
  "enum_service_pages_blocks_service_area_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_service_area_tc = pgEnum(
  "enum_service_pages_blocks_service_area_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_service_area_sc = pgEnum(
  "enum_service_pages_blocks_service_area_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_service_area_dc = pgEnum(
  "enum_service_pages_blocks_service_area_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_project_highlights_template = pgEnum(
  "enum_service_pages_blocks_project_highlights_template",
  ["default"],
);
export const enum_service_pages_blocks_project_highlights_bgc = pgEnum(
  "enum_service_pages_blocks_project_highlights_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_project_highlights_tc = pgEnum(
  "enum_service_pages_blocks_project_highlights_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_project_highlights_sc = pgEnum(
  "enum_service_pages_blocks_project_highlights_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_project_highlights_dc = pgEnum(
  "enum_service_pages_blocks_project_highlights_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_machinery_template = pgEnum(
  "enum_service_pages_blocks_machinery_template",
  ["default"],
);
export const enum_service_pages_blocks_machinery_bgc = pgEnum(
  "enum_service_pages_blocks_machinery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_machinery_tc = pgEnum(
  "enum_service_pages_blocks_machinery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_machinery_sc = pgEnum(
  "enum_service_pages_blocks_machinery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_machinery_dc = pgEnum(
  "enum_service_pages_blocks_machinery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_form_block_bgc = pgEnum(
  "enum_service_pages_blocks_form_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_form_block_tc = pgEnum(
  "enum_service_pages_blocks_form_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_form_block_sc = pgEnum(
  "enum_service_pages_blocks_form_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_form_block_dc = pgEnum(
  "enum_service_pages_blocks_form_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_sub_services_template = pgEnum(
  "enum_service_pages_blocks_sub_services_template",
  ["default"],
);
export const enum_service_pages_blocks_sub_services_bgc = pgEnum(
  "enum_service_pages_blocks_sub_services_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_sub_services_tc = pgEnum(
  "enum_service_pages_blocks_sub_services_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_sub_services_sc = pgEnum(
  "enum_service_pages_blocks_sub_services_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_sub_services_dc = pgEnum(
  "enum_service_pages_blocks_sub_services_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_cta_block_template = pgEnum(
  "enum_service_pages_blocks_cta_block_template",
  ["default"],
);
export const enum_service_pages_blocks_cta_block_bgc = pgEnum(
  "enum_service_pages_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_service_pages_blocks_cta_block_tc = pgEnum(
  "enum_service_pages_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_cta_block_sc = pgEnum(
  "enum_service_pages_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_blocks_cta_block_dc = pgEnum(
  "enum_service_pages_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_service_pages_status = pgEnum("enum_service_pages_status", [
  "draft",
  "published",
]);
export const enum__service_pages_v_blocks_hero_template = pgEnum(
  "enum__service_pages_v_blocks_hero_template",
  ["default", "variant1"],
);
export const enum__service_pages_v_blocks_hero_bgc = pgEnum(
  "enum__service_pages_v_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_hero_tc = pgEnum(
  "enum__service_pages_v_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_hero_sc = pgEnum(
  "enum__service_pages_v_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_hero_dc = pgEnum(
  "enum__service_pages_v_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_services_template = pgEnum(
  "enum__service_pages_v_blocks_services_template",
  ["default"],
);
export const enum__service_pages_v_blocks_services_bgc = pgEnum(
  "enum__service_pages_v_blocks_services_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_services_tc = pgEnum(
  "enum__service_pages_v_blocks_services_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_services_sc = pgEnum(
  "enum__service_pages_v_blocks_services_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_services_dc = pgEnum(
  "enum__service_pages_v_blocks_services_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_faq_template = pgEnum(
  "enum__service_pages_v_blocks_faq_template",
  ["default"],
);
export const enum__service_pages_v_blocks_faq_bgc = pgEnum(
  "enum__service_pages_v_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_faq_tc = pgEnum(
  "enum__service_pages_v_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_faq_sc = pgEnum(
  "enum__service_pages_v_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_faq_dc = pgEnum(
  "enum__service_pages_v_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_contact_template = pgEnum(
  "enum__service_pages_v_blocks_contact_template",
  ["default"],
);
export const enum__service_pages_v_blocks_contact_bgc = pgEnum(
  "enum__service_pages_v_blocks_contact_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_contact_tc = pgEnum(
  "enum__service_pages_v_blocks_contact_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_contact_sc = pgEnum(
  "enum__service_pages_v_blocks_contact_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_contact_dc = pgEnum(
  "enum__service_pages_v_blocks_contact_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_about_benefits_icon = pgEnum(
  "enum__service_pages_v_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum__service_pages_v_blocks_about_template = pgEnum(
  "enum__service_pages_v_blocks_about_template",
  ["default", "variant1"],
);
export const enum__service_pages_v_blocks_about_tc = pgEnum(
  "enum__service_pages_v_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_about_sc = pgEnum(
  "enum__service_pages_v_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_about_dc = pgEnum(
  "enum__service_pages_v_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_about_bgc = pgEnum(
  "enum__service_pages_v_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_testimonials_template = pgEnum(
  "enum__service_pages_v_blocks_testimonials_template",
  ["default"],
);
export const enum__service_pages_v_blocks_testimonials_bgc = pgEnum(
  "enum__service_pages_v_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_testimonials_tc = pgEnum(
  "enum__service_pages_v_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_testimonials_sc = pgEnum(
  "enum__service_pages_v_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_testimonials_dc = pgEnum(
  "enum__service_pages_v_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_gallery_template = pgEnum(
  "enum__service_pages_v_blocks_gallery_template",
  ["default"],
);
export const enum__service_pages_v_blocks_gallery_bgc = pgEnum(
  "enum__service_pages_v_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_gallery_tc = pgEnum(
  "enum__service_pages_v_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_gallery_sc = pgEnum(
  "enum__service_pages_v_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_gallery_dc = pgEnum(
  "enum__service_pages_v_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_service_area_template = pgEnum(
  "enum__service_pages_v_blocks_service_area_template",
  ["default"],
);
export const enum__service_pages_v_blocks_service_area_bgc = pgEnum(
  "enum__service_pages_v_blocks_service_area_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_service_area_tc = pgEnum(
  "enum__service_pages_v_blocks_service_area_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_service_area_sc = pgEnum(
  "enum__service_pages_v_blocks_service_area_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_service_area_dc = pgEnum(
  "enum__service_pages_v_blocks_service_area_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_project_highlights_template = pgEnum(
  "enum__service_pages_v_blocks_project_highlights_template",
  ["default"],
);
export const enum__service_pages_v_blocks_project_highlights_bgc = pgEnum(
  "enum__service_pages_v_blocks_project_highlights_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_project_highlights_tc = pgEnum(
  "enum__service_pages_v_blocks_project_highlights_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_project_highlights_sc = pgEnum(
  "enum__service_pages_v_blocks_project_highlights_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_project_highlights_dc = pgEnum(
  "enum__service_pages_v_blocks_project_highlights_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_machinery_template = pgEnum(
  "enum__service_pages_v_blocks_machinery_template",
  ["default"],
);
export const enum__service_pages_v_blocks_machinery_bgc = pgEnum(
  "enum__service_pages_v_blocks_machinery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_machinery_tc = pgEnum(
  "enum__service_pages_v_blocks_machinery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_machinery_sc = pgEnum(
  "enum__service_pages_v_blocks_machinery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_machinery_dc = pgEnum(
  "enum__service_pages_v_blocks_machinery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_form_block_bgc = pgEnum(
  "enum__service_pages_v_blocks_form_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_form_block_tc = pgEnum(
  "enum__service_pages_v_blocks_form_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_form_block_sc = pgEnum(
  "enum__service_pages_v_blocks_form_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_form_block_dc = pgEnum(
  "enum__service_pages_v_blocks_form_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_sub_services_template = pgEnum(
  "enum__service_pages_v_blocks_sub_services_template",
  ["default"],
);
export const enum__service_pages_v_blocks_sub_services_bgc = pgEnum(
  "enum__service_pages_v_blocks_sub_services_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_sub_services_tc = pgEnum(
  "enum__service_pages_v_blocks_sub_services_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_sub_services_sc = pgEnum(
  "enum__service_pages_v_blocks_sub_services_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_sub_services_dc = pgEnum(
  "enum__service_pages_v_blocks_sub_services_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_cta_block_template = pgEnum(
  "enum__service_pages_v_blocks_cta_block_template",
  ["default"],
);
export const enum__service_pages_v_blocks_cta_block_bgc = pgEnum(
  "enum__service_pages_v_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__service_pages_v_blocks_cta_block_tc = pgEnum(
  "enum__service_pages_v_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_cta_block_sc = pgEnum(
  "enum__service_pages_v_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_blocks_cta_block_dc = pgEnum(
  "enum__service_pages_v_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__service_pages_v_version_status = pgEnum(
  "enum__service_pages_v_version_status",
  ["draft", "published"],
);
export const enum_project_pages_blocks_hero_template = pgEnum(
  "enum_project_pages_blocks_hero_template",
  ["default", "variant1"],
);
export const enum_project_pages_blocks_hero_bgc = pgEnum(
  "enum_project_pages_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_hero_tc = pgEnum(
  "enum_project_pages_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_hero_sc = pgEnum(
  "enum_project_pages_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_hero_dc = pgEnum(
  "enum_project_pages_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_gallery_template = pgEnum(
  "enum_project_pages_blocks_gallery_template",
  ["default"],
);
export const enum_project_pages_blocks_gallery_bgc = pgEnum(
  "enum_project_pages_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_gallery_tc = pgEnum(
  "enum_project_pages_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_gallery_sc = pgEnum(
  "enum_project_pages_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_gallery_dc = pgEnum(
  "enum_project_pages_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_faq_template = pgEnum(
  "enum_project_pages_blocks_faq_template",
  ["default"],
);
export const enum_project_pages_blocks_faq_bgc = pgEnum(
  "enum_project_pages_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_faq_tc = pgEnum(
  "enum_project_pages_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_faq_sc = pgEnum(
  "enum_project_pages_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_faq_dc = pgEnum(
  "enum_project_pages_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_contact_template = pgEnum(
  "enum_project_pages_blocks_contact_template",
  ["default"],
);
export const enum_project_pages_blocks_contact_bgc = pgEnum(
  "enum_project_pages_blocks_contact_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_contact_tc = pgEnum(
  "enum_project_pages_blocks_contact_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_contact_sc = pgEnum(
  "enum_project_pages_blocks_contact_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_contact_dc = pgEnum(
  "enum_project_pages_blocks_contact_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_benefits_icon = pgEnum(
  "enum_project_pages_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum_project_pages_blocks_about_template = pgEnum(
  "enum_project_pages_blocks_about_template",
  ["default", "variant1"],
);
export const enum_project_pages_blocks_about_tc = pgEnum(
  "enum_project_pages_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_sc = pgEnum(
  "enum_project_pages_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_dc = pgEnum(
  "enum_project_pages_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_bgc = pgEnum(
  "enum_project_pages_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_testimonials_template = pgEnum(
  "enum_project_pages_blocks_testimonials_template",
  ["default"],
);
export const enum_project_pages_blocks_testimonials_bgc = pgEnum(
  "enum_project_pages_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_testimonials_tc = pgEnum(
  "enum_project_pages_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_testimonials_sc = pgEnum(
  "enum_project_pages_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_testimonials_dc = pgEnum(
  "enum_project_pages_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_project_template = pgEnum(
  "enum_project_pages_blocks_about_project_template",
  ["default"],
);
export const enum_project_pages_blocks_about_project_bgc = pgEnum(
  "enum_project_pages_blocks_about_project_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_about_project_tc = pgEnum(
  "enum_project_pages_blocks_about_project_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_project_sc = pgEnum(
  "enum_project_pages_blocks_about_project_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_about_project_dc = pgEnum(
  "enum_project_pages_blocks_about_project_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_related_projects_template = pgEnum(
  "enum_project_pages_blocks_related_projects_template",
  ["default"],
);
export const enum_project_pages_blocks_related_projects_bgc = pgEnum(
  "enum_project_pages_blocks_related_projects_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_related_projects_tc = pgEnum(
  "enum_project_pages_blocks_related_projects_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_related_projects_sc = pgEnum(
  "enum_project_pages_blocks_related_projects_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_related_projects_dc = pgEnum(
  "enum_project_pages_blocks_related_projects_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_cta_block_template = pgEnum(
  "enum_project_pages_blocks_cta_block_template",
  ["default"],
);
export const enum_project_pages_blocks_cta_block_bgc = pgEnum(
  "enum_project_pages_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_project_pages_blocks_cta_block_tc = pgEnum(
  "enum_project_pages_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_cta_block_sc = pgEnum(
  "enum_project_pages_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_blocks_cta_block_dc = pgEnum(
  "enum_project_pages_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_project_pages_status = pgEnum("enum_project_pages_status", [
  "draft",
  "published",
]);
export const enum__project_pages_v_blocks_hero_template = pgEnum(
  "enum__project_pages_v_blocks_hero_template",
  ["default", "variant1"],
);
export const enum__project_pages_v_blocks_hero_bgc = pgEnum(
  "enum__project_pages_v_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_hero_tc = pgEnum(
  "enum__project_pages_v_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_hero_sc = pgEnum(
  "enum__project_pages_v_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_hero_dc = pgEnum(
  "enum__project_pages_v_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_gallery_template = pgEnum(
  "enum__project_pages_v_blocks_gallery_template",
  ["default"],
);
export const enum__project_pages_v_blocks_gallery_bgc = pgEnum(
  "enum__project_pages_v_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_gallery_tc = pgEnum(
  "enum__project_pages_v_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_gallery_sc = pgEnum(
  "enum__project_pages_v_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_gallery_dc = pgEnum(
  "enum__project_pages_v_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_faq_template = pgEnum(
  "enum__project_pages_v_blocks_faq_template",
  ["default"],
);
export const enum__project_pages_v_blocks_faq_bgc = pgEnum(
  "enum__project_pages_v_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_faq_tc = pgEnum(
  "enum__project_pages_v_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_faq_sc = pgEnum(
  "enum__project_pages_v_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_faq_dc = pgEnum(
  "enum__project_pages_v_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_contact_template = pgEnum(
  "enum__project_pages_v_blocks_contact_template",
  ["default"],
);
export const enum__project_pages_v_blocks_contact_bgc = pgEnum(
  "enum__project_pages_v_blocks_contact_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_contact_tc = pgEnum(
  "enum__project_pages_v_blocks_contact_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_contact_sc = pgEnum(
  "enum__project_pages_v_blocks_contact_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_contact_dc = pgEnum(
  "enum__project_pages_v_blocks_contact_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_benefits_icon = pgEnum(
  "enum__project_pages_v_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum__project_pages_v_blocks_about_template = pgEnum(
  "enum__project_pages_v_blocks_about_template",
  ["default", "variant1"],
);
export const enum__project_pages_v_blocks_about_tc = pgEnum(
  "enum__project_pages_v_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_sc = pgEnum(
  "enum__project_pages_v_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_dc = pgEnum(
  "enum__project_pages_v_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_bgc = pgEnum(
  "enum__project_pages_v_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_testimonials_template = pgEnum(
  "enum__project_pages_v_blocks_testimonials_template",
  ["default"],
);
export const enum__project_pages_v_blocks_testimonials_bgc = pgEnum(
  "enum__project_pages_v_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_testimonials_tc = pgEnum(
  "enum__project_pages_v_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_testimonials_sc = pgEnum(
  "enum__project_pages_v_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_testimonials_dc = pgEnum(
  "enum__project_pages_v_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_project_template = pgEnum(
  "enum__project_pages_v_blocks_about_project_template",
  ["default"],
);
export const enum__project_pages_v_blocks_about_project_bgc = pgEnum(
  "enum__project_pages_v_blocks_about_project_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_about_project_tc = pgEnum(
  "enum__project_pages_v_blocks_about_project_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_project_sc = pgEnum(
  "enum__project_pages_v_blocks_about_project_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_about_project_dc = pgEnum(
  "enum__project_pages_v_blocks_about_project_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_related_projects_template = pgEnum(
  "enum__project_pages_v_blocks_related_projects_template",
  ["default"],
);
export const enum__project_pages_v_blocks_related_projects_bgc = pgEnum(
  "enum__project_pages_v_blocks_related_projects_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_related_projects_tc = pgEnum(
  "enum__project_pages_v_blocks_related_projects_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_related_projects_sc = pgEnum(
  "enum__project_pages_v_blocks_related_projects_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_related_projects_dc = pgEnum(
  "enum__project_pages_v_blocks_related_projects_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_cta_block_template = pgEnum(
  "enum__project_pages_v_blocks_cta_block_template",
  ["default"],
);
export const enum__project_pages_v_blocks_cta_block_bgc = pgEnum(
  "enum__project_pages_v_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__project_pages_v_blocks_cta_block_tc = pgEnum(
  "enum__project_pages_v_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_cta_block_sc = pgEnum(
  "enum__project_pages_v_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_blocks_cta_block_dc = pgEnum(
  "enum__project_pages_v_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__project_pages_v_version_status = pgEnum(
  "enum__project_pages_v_version_status",
  ["draft", "published"],
);
export const enum_product_pages_blocks_product_form_template = pgEnum(
  "enum_product_pages_blocks_product_form_template",
  ["default"],
);
export const enum_product_pages_blocks_product_form_tc = pgEnum(
  "enum_product_pages_blocks_product_form_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_product_form_sc = pgEnum(
  "enum_product_pages_blocks_product_form_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_product_form_dc = pgEnum(
  "enum_product_pages_blocks_product_form_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_product_form_bgc = pgEnum(
  "enum_product_pages_blocks_product_form_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_hero_template = pgEnum(
  "enum_product_pages_blocks_hero_template",
  ["default", "variant1"],
);
export const enum_product_pages_blocks_hero_bgc = pgEnum(
  "enum_product_pages_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_hero_tc = pgEnum(
  "enum_product_pages_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_hero_sc = pgEnum(
  "enum_product_pages_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_hero_dc = pgEnum(
  "enum_product_pages_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_faq_template = pgEnum(
  "enum_product_pages_blocks_faq_template",
  ["default"],
);
export const enum_product_pages_blocks_faq_bgc = pgEnum(
  "enum_product_pages_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_faq_tc = pgEnum(
  "enum_product_pages_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_faq_sc = pgEnum(
  "enum_product_pages_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_faq_dc = pgEnum(
  "enum_product_pages_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_about_benefits_icon = pgEnum(
  "enum_product_pages_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum_product_pages_blocks_about_template = pgEnum(
  "enum_product_pages_blocks_about_template",
  ["default", "variant1"],
);
export const enum_product_pages_blocks_about_tc = pgEnum(
  "enum_product_pages_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_about_sc = pgEnum(
  "enum_product_pages_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_about_dc = pgEnum(
  "enum_product_pages_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_about_bgc = pgEnum(
  "enum_product_pages_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_testimonials_template = pgEnum(
  "enum_product_pages_blocks_testimonials_template",
  ["default"],
);
export const enum_product_pages_blocks_testimonials_bgc = pgEnum(
  "enum_product_pages_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_testimonials_tc = pgEnum(
  "enum_product_pages_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_testimonials_sc = pgEnum(
  "enum_product_pages_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_testimonials_dc = pgEnum(
  "enum_product_pages_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_gallery_template = pgEnum(
  "enum_product_pages_blocks_gallery_template",
  ["default"],
);
export const enum_product_pages_blocks_gallery_bgc = pgEnum(
  "enum_product_pages_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_gallery_tc = pgEnum(
  "enum_product_pages_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_gallery_sc = pgEnum(
  "enum_product_pages_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_gallery_dc = pgEnum(
  "enum_product_pages_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_cta_block_template = pgEnum(
  "enum_product_pages_blocks_cta_block_template",
  ["default"],
);
export const enum_product_pages_blocks_cta_block_bgc = pgEnum(
  "enum_product_pages_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum_product_pages_blocks_cta_block_tc = pgEnum(
  "enum_product_pages_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_cta_block_sc = pgEnum(
  "enum_product_pages_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_blocks_cta_block_dc = pgEnum(
  "enum_product_pages_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum_product_pages_status = pgEnum("enum_product_pages_status", [
  "draft",
  "published",
]);
export const enum__product_pages_v_blocks_product_form_template = pgEnum(
  "enum__product_pages_v_blocks_product_form_template",
  ["default"],
);
export const enum__product_pages_v_blocks_product_form_tc = pgEnum(
  "enum__product_pages_v_blocks_product_form_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_product_form_sc = pgEnum(
  "enum__product_pages_v_blocks_product_form_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_product_form_dc = pgEnum(
  "enum__product_pages_v_blocks_product_form_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_product_form_bgc = pgEnum(
  "enum__product_pages_v_blocks_product_form_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_hero_template = pgEnum(
  "enum__product_pages_v_blocks_hero_template",
  ["default", "variant1"],
);
export const enum__product_pages_v_blocks_hero_bgc = pgEnum(
  "enum__product_pages_v_blocks_hero_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_hero_tc = pgEnum(
  "enum__product_pages_v_blocks_hero_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_hero_sc = pgEnum(
  "enum__product_pages_v_blocks_hero_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_hero_dc = pgEnum(
  "enum__product_pages_v_blocks_hero_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_faq_template = pgEnum(
  "enum__product_pages_v_blocks_faq_template",
  ["default"],
);
export const enum__product_pages_v_blocks_faq_bgc = pgEnum(
  "enum__product_pages_v_blocks_faq_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_faq_tc = pgEnum(
  "enum__product_pages_v_blocks_faq_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_faq_sc = pgEnum(
  "enum__product_pages_v_blocks_faq_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_faq_dc = pgEnum(
  "enum__product_pages_v_blocks_faq_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_about_benefits_icon = pgEnum(
  "enum__product_pages_v_blocks_about_benefits_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum__product_pages_v_blocks_about_template = pgEnum(
  "enum__product_pages_v_blocks_about_template",
  ["default", "variant1"],
);
export const enum__product_pages_v_blocks_about_tc = pgEnum(
  "enum__product_pages_v_blocks_about_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_about_sc = pgEnum(
  "enum__product_pages_v_blocks_about_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_about_dc = pgEnum(
  "enum__product_pages_v_blocks_about_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_about_bgc = pgEnum(
  "enum__product_pages_v_blocks_about_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_testimonials_template = pgEnum(
  "enum__product_pages_v_blocks_testimonials_template",
  ["default"],
);
export const enum__product_pages_v_blocks_testimonials_bgc = pgEnum(
  "enum__product_pages_v_blocks_testimonials_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_testimonials_tc = pgEnum(
  "enum__product_pages_v_blocks_testimonials_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_testimonials_sc = pgEnum(
  "enum__product_pages_v_blocks_testimonials_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_testimonials_dc = pgEnum(
  "enum__product_pages_v_blocks_testimonials_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_gallery_template = pgEnum(
  "enum__product_pages_v_blocks_gallery_template",
  ["default"],
);
export const enum__product_pages_v_blocks_gallery_bgc = pgEnum(
  "enum__product_pages_v_blocks_gallery_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_gallery_tc = pgEnum(
  "enum__product_pages_v_blocks_gallery_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_gallery_sc = pgEnum(
  "enum__product_pages_v_blocks_gallery_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_gallery_dc = pgEnum(
  "enum__product_pages_v_blocks_gallery_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_cta_block_template = pgEnum(
  "enum__product_pages_v_blocks_cta_block_template",
  ["default"],
);
export const enum__product_pages_v_blocks_cta_block_bgc = pgEnum(
  "enum__product_pages_v_blocks_cta_block_bgc",
  [
    "inherit",
    "white",
    "light",
    "light-30",
    "light-50",
    "muted",
    "primary",
    "primary-30",
    "primary-50",
    "secondary",
    "secondary-30",
    "secondary-50",
    "accent",
    "accent-30",
    "dark",
    "dark-30",
    "dark-50",
    "dark-80",
  ],
);
export const enum__product_pages_v_blocks_cta_block_tc = pgEnum(
  "enum__product_pages_v_blocks_cta_block_tc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_cta_block_sc = pgEnum(
  "enum__product_pages_v_blocks_cta_block_sc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_blocks_cta_block_dc = pgEnum(
  "enum__product_pages_v_blocks_cta_block_dc",
  [
    "inherit",
    "primary",
    "secondary",
    "accent",
    "dark",
    "dark-80",
    "dark-50",
    "white",
    "white-80",
    "white-50",
    "muted",
  ],
);
export const enum__product_pages_v_version_status = pgEnum(
  "enum__product_pages_v_version_status",
  ["draft", "published"],
);
export const enum_pricelists_price_list_type = pgEnum(
  "enum_pricelists_price_list_type",
  ["gastronomy", "service", "other"],
);
export const enum_menus_menu_items_children_icon = pgEnum(
  "enum_menus_menu_items_children_icon",
  [
    "Sparkles",
    "Zap",
    "Drop",
    "Hands",
    "Footprints",
    "Paintbrush",
    "bager",
    "excavator",
    "wrecking-ball",
    "Phone",
    "Mail",
    "plant-rage-weed",
    "gardening-shears",
    "snowflake",
    "stone-path",
    "sprout",
    "shovel",
    "tree",
    "front-loader",
    "lamp",
    "water-drop",
    "fence",
    "leaves",
    "flower",
    "grass",
    "google",
    "facebook",
    "Building",
  ],
);
export const enum_products_type = pgEnum("enum_products_type", [
  "variant1",
  "variant2",
  "tlakovci",
]);
export const enum_posts_status = pgEnum("enum_posts_status", [
  "draft",
  "published",
]);
export const enum__posts_v_version_status = pgEnum(
  "enum__posts_v_version_status",
  ["draft", "published"],
);
export const enum_customers_customer_type = pgEnum(
  "enum_customers_customer_type",
  ["individual", "company"],
);
export const enum_orders_status = pgEnum("enum_orders_status", [
  "pending",
  "processing",
  "contacted",
  "quoted",
  "confirmed",
  "completed",
  "cancelled",
]);
export const enum_orders_source = pgEnum("enum_orders_source", [
  "website",
  "phone",
  "email",
  "in-person",
  "other",
]);
export const enum_business_info_platforms_platform = pgEnum(
  "enum_business_info_platforms_platform",
  ["Primerjam.si", "Omisli.si", "MojMojster.net"],
);
export const enum_tenants_typography_heading_font_name = pgEnum(
  "enum_tenants_typography_heading_font_name",
  ["Inter", "Roboto", "Open_Sans", "Lato", "Montserrat"],
);
export const enum_tenants_typography_body_font_name = pgEnum(
  "enum_tenants_typography_body_font_name",
  ["Inter", "Roboto", "Open_Sans", "Lato", "Montserrat"],
);
export const enum_forms_confirmation_type = pgEnum(
  "enum_forms_confirmation_type",
  ["message", "redirect"],
);
export const enum_forms_redirect_type = pgEnum("enum_forms_redirect_type", [
  "reference",
  "custom",
]);
export const enum_payload_jobs_log_task_slug = pgEnum(
  "enum_payload_jobs_log_task_slug",
  ["inline", "schedulePublish"],
);
export const enum_payload_jobs_log_state = pgEnum(
  "enum_payload_jobs_log_state",
  ["failed", "succeeded"],
);
export const enum_payload_jobs_task_slug = pgEnum(
  "enum_payload_jobs_task_slug",
  ["inline", "schedulePublish"],
);

export const users_roles = pgTable(
  "users_roles",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_users_roles("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("users_roles_order_idx").on(columns.order),
    parentIdx: index("users_roles_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_roles_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const users_tenants_roles = pgTable(
  "users_tenants_roles",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_users_tenants_roles("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("users_tenants_roles_order_idx").on(columns.order),
    parentIdx: index("users_tenants_roles_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users_tenants.id],
      name: "users_tenants_roles_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const users_tenants = pgTable(
  "users_tenants",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    tenant: integer("tenant_id")
      .notNull()
      .references(() => tenants.id, {
        onDelete: "set null",
      }),
  },
  (columns) => ({
    _orderIdx: index("users_tenants_order_idx").on(columns._order),
    _parentIDIdx: index("users_tenants_parent_id_idx").on(columns._parentID),
    users_tenants_tenant_idx: index("users_tenants_tenant_idx").on(
      columns.tenant,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_tenants_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    username: varchar("username"),
    firstName: varchar("first_name").notNull(),
    lastName: varchar("last_name").notNull(),
    phoneNumber: varchar("phone_number"),
    vatId: varchar("vat_id"),
    companyName: varchar("company_name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    enableAPIKey: boolean("enable_a_p_i_key"),
    apiKey: varchar("api_key"),
    apiKeyIndex: varchar("api_key_index"),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_username_idx: index("users_username_idx").on(columns.username),
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    alt: varchar("alt"),
    base64Preview: varchar("base64_preview"),
    source: enum_media_source("source").default("manual"),
    facebookId: varchar("facebook_id"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: varchar("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: varchar("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: varchar("sizes_thumbnail_filename"),
    sizes_card_url: varchar("sizes_card_url"),
    sizes_card_width: numeric("sizes_card_width"),
    sizes_card_height: numeric("sizes_card_height"),
    sizes_card_mimeType: varchar("sizes_card_mime_type"),
    sizes_card_filesize: numeric("sizes_card_filesize"),
    sizes_card_filename: varchar("sizes_card_filename"),
    sizes_tablet_url: varchar("sizes_tablet_url"),
    sizes_tablet_width: numeric("sizes_tablet_width"),
    sizes_tablet_height: numeric("sizes_tablet_height"),
    sizes_tablet_mimeType: varchar("sizes_tablet_mime_type"),
    sizes_tablet_filesize: numeric("sizes_tablet_filesize"),
    sizes_tablet_filename: varchar("sizes_tablet_filename"),
  },
  (columns) => ({
    media_tenant_idx: index("media_tenant_idx").on(columns.tenant),
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "media_sizes_thumbnail_sizes_thumbnail_filename_idx",
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_card_sizes_card_filename_idx: index(
      "media_sizes_card_sizes_card_filename_idx",
    ).on(columns.sizes_card_filename),
    media_sizes_tablet_sizes_tablet_filename_idx: index(
      "media_sizes_tablet_sizes_tablet_filename_idx",
    ).on(columns.sizes_tablet_filename),
  }),
);

export const high_quality_media = pgTable(
  "high_quality_media",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    "sizes_hero-desktop_url": varchar("sizes_hero_desktop_url"),
    "sizes_hero-desktop_width": numeric("sizes_hero_desktop_width"),
    "sizes_hero-desktop_height": numeric("sizes_hero_desktop_height"),
    "sizes_hero-desktop_mimeType": varchar("sizes_hero_desktop_mime_type"),
    "sizes_hero-desktop_filesize": numeric("sizes_hero_desktop_filesize"),
    "sizes_hero-desktop_filename": varchar("sizes_hero_desktop_filename"),
    "sizes_hero-desktop-narrow_url": varchar("sizes_hero_desktop_narrow_url"),
    "sizes_hero-desktop-narrow_width": numeric(
      "sizes_hero_desktop_narrow_width",
    ),
    "sizes_hero-desktop-narrow_height": numeric(
      "sizes_hero_desktop_narrow_height",
    ),
    "sizes_hero-desktop-narrow_mimeType": varchar(
      "sizes_hero_desktop_narrow_mime_type",
    ),
    "sizes_hero-desktop-narrow_filesize": numeric(
      "sizes_hero_desktop_narrow_filesize",
    ),
    "sizes_hero-desktop-narrow_filename": varchar(
      "sizes_hero_desktop_narrow_filename",
    ),
    "sizes_hero-tablet_url": varchar("sizes_hero_tablet_url"),
    "sizes_hero-tablet_width": numeric("sizes_hero_tablet_width"),
    "sizes_hero-tablet_height": numeric("sizes_hero_tablet_height"),
    "sizes_hero-tablet_mimeType": varchar("sizes_hero_tablet_mime_type"),
    "sizes_hero-tablet_filesize": numeric("sizes_hero_tablet_filesize"),
    "sizes_hero-tablet_filename": varchar("sizes_hero_tablet_filename"),
    "sizes_hero-mobile_url": varchar("sizes_hero_mobile_url"),
    "sizes_hero-mobile_width": numeric("sizes_hero_mobile_width"),
    "sizes_hero-mobile_height": numeric("sizes_hero_mobile_height"),
    "sizes_hero-mobile_mimeType": varchar("sizes_hero_mobile_mime_type"),
    "sizes_hero-mobile_filesize": numeric("sizes_hero_mobile_filesize"),
    "sizes_hero-mobile_filename": varchar("sizes_hero_mobile_filename"),
  },
  (columns) => ({
    high_quality_media_tenant_idx: index("high_quality_media_tenant_idx").on(
      columns.tenant,
    ),
    high_quality_media_updated_at_idx: index(
      "high_quality_media_updated_at_idx",
    ).on(columns.updatedAt),
    high_quality_media_created_at_idx: index(
      "high_quality_media_created_at_idx",
    ).on(columns.createdAt),
    high_quality_media_filename_idx: uniqueIndex(
      "high_quality_media_filename_idx",
    ).on(columns.filename),
    high_quality_media_sizes_hero_desktop_sizes_hero_desktop_idx: index(
      "high_quality_media_sizes_hero_desktop_sizes_hero_desktop_idx",
    ).on(columns["sizes_hero-desktop_filename"]),
    high_quality_media_sizes_hero_desktop_narrow_sizes_hero__idx: index(
      "high_quality_media_sizes_hero_desktop_narrow_sizes_hero__idx",
    ).on(columns["sizes_hero-desktop-narrow_filename"]),
    high_quality_media_sizes_hero_tablet_sizes_hero_tablet_f_idx: index(
      "high_quality_media_sizes_hero_tablet_sizes_hero_tablet_f_idx",
    ).on(columns["sizes_hero-tablet_filename"]),
    high_quality_media_sizes_hero_mobile_sizes_hero_mobile_f_idx: index(
      "high_quality_media_sizes_hero_mobile_sizes_hero_mobile_f_idx",
    ).on(columns["sizes_hero-mobile_filename"]),
  }),
);

export const machinery_specifications_spec_details = pgTable(
  "machinery_specifications_spec_details",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    detail: varchar("detail").notNull(),
  },
  (columns) => ({
    _orderIdx: index("machinery_specifications_spec_details_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "machinery_specifications_spec_details_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [machinery_specifications.id],
      name: "machinery_specifications_spec_details_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const machinery_specifications = pgTable(
  "machinery_specifications",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    specName: varchar("spec_name").notNull(),
  },
  (columns) => ({
    _orderIdx: index("machinery_specifications_order_idx").on(columns._order),
    _parentIDIdx: index("machinery_specifications_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [machinery.id],
      name: "machinery_specifications_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const machinery = pgTable(
  "machinery",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    tabName: varchar("tab_name").notNull(),
    name: varchar("name").notNull(),
    description: jsonb("description"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    notes: varchar("notes"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    machinery_tenant_idx: index("machinery_tenant_idx").on(columns.tenant),
    machinery_image_idx: index("machinery_image_idx").on(columns.image),
    machinery_updated_at_idx: index("machinery_updated_at_idx").on(
      columns.updatedAt,
    ),
    machinery_created_at_idx: index("machinery_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const services_features = pgTable(
  "services_features",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    description: varchar("description"),
  },
  (columns) => ({
    _orderIdx: index("services_features_order_idx").on(columns._order),
    _parentIDIdx: index("services_features_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [services.id],
      name: "services_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const services = pgTable(
  "services",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    title: varchar("title").notNull(),
    excerpt: varchar("excerpt"),
    description: jsonb("description"),
    priceDisplay: varchar("price_display"),
    showCta: boolean("show_cta").default(false),
    ctaText: varchar("cta_text").default("Preberi več"),
    icon: enum_services_icon("icon"),
    priority: numeric("priority").default("0"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    services_tenant_idx: index("services_tenant_idx").on(columns.tenant),
    services_slug_idx: uniqueIndex("services_slug_idx").on(columns.slug),
    services_updated_at_idx: index("services_updated_at_idx").on(
      columns.updatedAt,
    ),
    services_created_at_idx: index("services_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const services_rels = pgTable(
  "services_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    testimonialsID: integer("testimonials_id"),
    sub_servicesID: integer("sub_services_id"),
  },
  (columns) => ({
    order: index("services_rels_order_idx").on(columns.order),
    parentIdx: index("services_rels_parent_idx").on(columns.parent),
    pathIdx: index("services_rels_path_idx").on(columns.path),
    services_rels_media_id_idx: index("services_rels_media_id_idx").on(
      columns.mediaID,
    ),
    services_rels_testimonials_id_idx: index(
      "services_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    services_rels_sub_services_id_idx: index(
      "services_rels_sub_services_id_idx",
    ).on(columns.sub_servicesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [services.id],
      name: "services_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "services_rels_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "services_rels_testimonials_fk",
    }).onDelete("cascade"),
    sub_servicesIdFk: foreignKey({
      columns: [columns["sub_servicesID"]],
      foreignColumns: [sub_services.id],
      name: "services_rels_sub_services_fk",
    }).onDelete("cascade"),
  }),
);

export const testimonials = pgTable(
  "testimonials",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    name: varchar("name").notNull(),
    testimonialDate: timestamp("testimonial_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    source: enum_testimonials_source("source"),
    title: varchar("title"),
    content: varchar("content").notNull(),
    location: varchar("location"),
    rating: numeric("rating").notNull().default("5"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    testimonials_tenant_idx: index("testimonials_tenant_idx").on(
      columns.tenant,
    ),
    testimonials_slug_idx: uniqueIndex("testimonials_slug_idx").on(
      columns.slug,
    ),
    testimonials_updated_at_idx: index("testimonials_updated_at_idx").on(
      columns.updatedAt,
    ),
    testimonials_created_at_idx: index("testimonials_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const testimonials_rels = pgTable(
  "testimonials_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    servicesID: integer("services_id"),
  },
  (columns) => ({
    order: index("testimonials_rels_order_idx").on(columns.order),
    parentIdx: index("testimonials_rels_parent_idx").on(columns.parent),
    pathIdx: index("testimonials_rels_path_idx").on(columns.path),
    testimonials_rels_services_id_idx: index(
      "testimonials_rels_services_id_idx",
    ).on(columns.servicesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [testimonials.id],
      name: "testimonials_rels_parent_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "testimonials_rels_services_fk",
    }).onDelete("cascade"),
  }),
);

export const faq_items = pgTable(
  "faq_items",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    category: enum_faq_items_category("category"),
    question: varchar("question").notNull(),
    answer: jsonb("answer").notNull(),
    relatedService: integer("related_service_id").references(
      () => services.id,
      {
        onDelete: "set null",
      },
    ),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    faq_items_tenant_idx: index("faq_items_tenant_idx").on(columns.tenant),
    faq_items_related_service_idx: index("faq_items_related_service_idx").on(
      columns.relatedService,
    ),
    faq_items_updated_at_idx: index("faq_items_updated_at_idx").on(
      columns.updatedAt,
    ),
    faq_items_created_at_idx: index("faq_items_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const ctas = pgTable(
  "ctas",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    ctaText: varchar("cta_text"),
    link_url: varchar("link_url"),
    link_newTab: boolean("link_new_tab").default(false),
    tc: enum_ctas_tc("tc").default("inherit"),
    sc: enum_ctas_sc("sc").default("inherit"),
    dc: enum_ctas_dc("dc").default("inherit"),
    bgc: enum_ctas_bgc("bgc").default("inherit"),
    icon: enum_ctas_icon("icon"),
    bv: enum_ctas_bv("bv").default("default"),
    priority: numeric("priority").default("0"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    ctas_tenant_idx: index("ctas_tenant_idx").on(columns.tenant),
    ctas_slug_idx: uniqueIndex("ctas_slug_idx").on(columns.slug),
    ctas_updated_at_idx: index("ctas_updated_at_idx").on(columns.updatedAt),
    ctas_created_at_idx: index("ctas_created_at_idx").on(columns.createdAt),
  }),
);

export const projects_project_images = pgTable(
  "projects_project_images",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    image1: integer("image1_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    altText1: varchar("alt_text1"),
    image2: integer("image2_id").references(() => media.id, {
      onDelete: "set null",
    }),
    altText2: varchar("alt_text2"),
    pairDescription: jsonb("pair_description"),
  },
  (columns) => ({
    _orderIdx: index("projects_project_images_order_idx").on(columns._order),
    _parentIDIdx: index("projects_project_images_parent_id_idx").on(
      columns._parentID,
    ),
    projects_project_images_image1_idx: index(
      "projects_project_images_image1_idx",
    ).on(columns.image1),
    projects_project_images_image2_idx: index(
      "projects_project_images_image2_idx",
    ).on(columns.image2),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [projects.id],
      name: "projects_project_images_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const projects = pgTable(
  "projects",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    title: varchar("title").notNull(),
    description: jsonb("description"),
    excerpt: varchar("excerpt"),
    projectStatus:
      enum_projects_project_status("project_status").default("completed"),
    location: varchar("location"),
    metadata_startDate: timestamp("metadata_start_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    metadata_completionDate: timestamp("metadata_completion_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    metadata_client: varchar("metadata_client"),
    metadata_budget: varchar("metadata_budget"),
    source: enum_projects_source("source").default("manual"),
    facebookPostId: varchar("facebook_post_id"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_tenant_idx: index("projects_tenant_idx").on(columns.tenant),
    projects_slug_idx: uniqueIndex("projects_slug_idx").on(columns.slug),
    projects_updated_at_idx: index("projects_updated_at_idx").on(
      columns.updatedAt,
    ),
    projects_created_at_idx: index("projects_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const projects_texts = pgTable(
  "projects_texts",
  {
    id: serial("id").primaryKey(),
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    text: varchar("text"),
  },
  (columns) => ({
    orderParentIdx: index("projects_texts_order_parent_idx").on(
      columns.order,
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [projects.id],
      name: "projects_texts_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const projects_rels = pgTable(
  "projects_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    servicesID: integer("services_id"),
    testimonialsID: integer("testimonials_id"),
  },
  (columns) => ({
    order: index("projects_rels_order_idx").on(columns.order),
    parentIdx: index("projects_rels_parent_idx").on(columns.parent),
    pathIdx: index("projects_rels_path_idx").on(columns.path),
    projects_rels_services_id_idx: index("projects_rels_services_id_idx").on(
      columns.servicesID,
    ),
    projects_rels_testimonials_id_idx: index(
      "projects_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [projects.id],
      name: "projects_rels_parent_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "projects_rels_services_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "projects_rels_testimonials_fk",
    }).onDelete("cascade"),
  }),
);

export const opening_hours_daily_hours_days = pgTable(
  "opening_hours_daily_hours_days",
  {
    order: integer("order").notNull(),
    parent: varchar("parent_id").notNull(),
    value: enum_opening_hours_daily_hours_days("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("opening_hours_daily_hours_days_order_idx").on(
      columns.order,
    ),
    parentIdx: index("opening_hours_daily_hours_days_parent_idx").on(
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [opening_hours_daily_hours.id],
      name: "opening_hours_daily_hours_days_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const opening_hours_daily_hours_time_slots = pgTable(
  "opening_hours_daily_hours_time_slots",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    startTime: timestamp("start_time", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    endTime: timestamp("end_time", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    notes: varchar("notes"),
  },
  (columns) => ({
    _orderIdx: index("opening_hours_daily_hours_time_slots_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "opening_hours_daily_hours_time_slots_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [opening_hours_daily_hours.id],
      name: "opening_hours_daily_hours_time_slots_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const opening_hours_daily_hours = pgTable(
  "opening_hours_daily_hours",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("opening_hours_daily_hours_order_idx").on(columns._order),
    _parentIDIdx: index("opening_hours_daily_hours_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [opening_hours.id],
      name: "opening_hours_daily_hours_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const opening_hours = pgTable(
  "opening_hours",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    name: varchar("name").notNull(),
    startDate: timestamp("start_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    endDate: timestamp("end_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    notes: varchar("notes"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    opening_hours_tenant_idx: index("opening_hours_tenant_idx").on(
      columns.tenant,
    ),
    opening_hours_slug_idx: uniqueIndex("opening_hours_slug_idx").on(
      columns.slug,
    ),
    opening_hours_updated_at_idx: index("opening_hours_updated_at_idx").on(
      columns.updatedAt,
    ),
    opening_hours_created_at_idx: index("opening_hours_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const sub_services = pgTable(
  "sub_services",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug"),
    icon: enum_sub_services_icon("icon"),
    title: varchar("title"),
    description: jsonb("description"),
    price: varchar("price"),
    parentService: integer("parent_service_id").references(() => services.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_sub_services_status("_status").default("draft"),
  },
  (columns) => ({
    sub_services_tenant_idx: index("sub_services_tenant_idx").on(
      columns.tenant,
    ),
    sub_services_slug_idx: uniqueIndex("sub_services_slug_idx").on(
      columns.slug,
    ),
    sub_services_parent_service_idx: index(
      "sub_services_parent_service_idx",
    ).on(columns.parentService),
    sub_services_updated_at_idx: index("sub_services_updated_at_idx").on(
      columns.updatedAt,
    ),
    sub_services_created_at_idx: index("sub_services_created_at_idx").on(
      columns.createdAt,
    ),
    sub_services__status_idx: index("sub_services__status_idx").on(
      columns._status,
    ),
  }),
);

export const sub_services_rels = pgTable(
  "sub_services_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("sub_services_rels_order_idx").on(columns.order),
    parentIdx: index("sub_services_rels_parent_idx").on(columns.parent),
    pathIdx: index("sub_services_rels_path_idx").on(columns.path),
    sub_services_rels_media_id_idx: index("sub_services_rels_media_id_idx").on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [sub_services.id],
      name: "sub_services_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "sub_services_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const _sub_services_v = pgTable(
  "_sub_services_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => sub_services.id, {
      onDelete: "set null",
    }),
    version_tenant: integer("version_tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    version_slug: varchar("version_slug"),
    version_icon: enum__sub_services_v_version_icon("version_icon"),
    version_title: varchar("version_title"),
    version_description: jsonb("version_description"),
    version_price: varchar("version_price"),
    version_parentService: integer("version_parent_service_id").references(
      () => services.id,
      {
        onDelete: "set null",
      },
    ),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__sub_services_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _sub_services_v_parent_idx: index("_sub_services_v_parent_idx").on(
      columns.parent,
    ),
    _sub_services_v_version_version_tenant_idx: index(
      "_sub_services_v_version_version_tenant_idx",
    ).on(columns.version_tenant),
    _sub_services_v_version_version_slug_idx: index(
      "_sub_services_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _sub_services_v_version_version_parent_service_idx: index(
      "_sub_services_v_version_version_parent_service_idx",
    ).on(columns.version_parentService),
    _sub_services_v_version_version_updated_at_idx: index(
      "_sub_services_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _sub_services_v_version_version_created_at_idx: index(
      "_sub_services_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _sub_services_v_version_version__status_idx: index(
      "_sub_services_v_version_version__status_idx",
    ).on(columns.version__status),
    _sub_services_v_created_at_idx: index("_sub_services_v_created_at_idx").on(
      columns.createdAt,
    ),
    _sub_services_v_updated_at_idx: index("_sub_services_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _sub_services_v_latest_idx: index("_sub_services_v_latest_idx").on(
      columns.latest,
    ),
    _sub_services_v_autosave_idx: index("_sub_services_v_autosave_idx").on(
      columns.autosave,
    ),
  }),
);

export const _sub_services_v_rels = pgTable(
  "_sub_services_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("_sub_services_v_rels_order_idx").on(columns.order),
    parentIdx: index("_sub_services_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_sub_services_v_rels_path_idx").on(columns.path),
    _sub_services_v_rels_media_id_idx: index(
      "_sub_services_v_rels_media_id_idx",
    ).on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_sub_services_v.id],
      name: "_sub_services_v_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_sub_services_v_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_hero_features = pgTable(
  "pages_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_hero_features_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_hero_features_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_hero.id],
      name: "pages_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_hero = pgTable(
  "pages_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template: enum_pages_blocks_hero_template("template").default("default"),
    bgc: enum_pages_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_hero_tc("tc").default("inherit"),
    sc: enum_pages_blocks_hero_sc("sc").default("inherit"),
    dc: enum_pages_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_services = pgTable(
  "pages_blocks_services",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_pages_blocks_services_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    description: varchar("description"),
    bgc: enum_pages_blocks_services_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_services_tc("tc").default("inherit"),
    sc: enum_pages_blocks_services_sc("sc").default("inherit"),
    dc: enum_pages_blocks_services_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("storitve"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_services_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_services_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_services_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_services_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_faq = pgTable(
  "pages_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template: enum_pages_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_pages_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_faq_tc("tc").default("inherit"),
    sc: enum_pages_blocks_faq_sc("sc").default("inherit"),
    dc: enum_pages_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_faq_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_faq_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_faq_path_idx").on(columns._path),
    pages_blocks_faq_faq_cta_idx: index("pages_blocks_faq_faq_cta_idx").on(
      columns.faqCta,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_contact = pgTable(
  "pages_blocks_contact",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template: enum_pages_blocks_contact_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showPhoneNumber: boolean("show_phone_number").default(true),
    showEmail: boolean("show_email").default(true),
    showAddress: boolean("show_address").default(true),
    bgc: enum_pages_blocks_contact_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_contact_tc("tc").default("inherit"),
    sc: enum_pages_blocks_contact_sc("sc").default("inherit"),
    dc: enum_pages_blocks_contact_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("kontakt"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_contact_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_contact_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_contact_path_idx").on(columns._path),
    pages_blocks_contact_form_idx: index("pages_blocks_contact_form_idx").on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_contact_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_about_benefits = pgTable(
  "pages_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum_pages_blocks_about_benefits_icon("icon"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("pages_blocks_about_benefits_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_about.id],
      name: "pages_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_about = pgTable(
  "pages_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template: enum_pages_blocks_about_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum_pages_blocks_about_tc("tc").default("inherit"),
    sc: enum_pages_blocks_about_sc("sc").default("inherit"),
    dc: enum_pages_blocks_about_dc("dc").default("inherit"),
    bgc: enum_pages_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_about_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_testimonials = pgTable(
  "pages_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_pages_blocks_testimonials_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum_pages_blocks_testimonials_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum_pages_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum_pages_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_testimonials_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_testimonials_path_idx").on(columns._path),
    pages_blocks_testimonials_google_review_cta_idx: index(
      "pages_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_gallery = pgTable(
  "pages_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template: enum_pages_blocks_gallery_template("template").default("default"),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_pages_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_gallery_tc("tc").default("inherit"),
    sc: enum_pages_blocks_gallery_sc("sc").default("inherit"),
    dc: enum_pages_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_gallery_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_gallery_path_idx").on(columns._path),
    pages_blocks_gallery_gallery_cta_idx: index(
      "pages_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_service_area_locations = pgTable(
  "pages_blocks_service_area_locations",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_service_area_locations_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("pages_blocks_service_area_locations_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_service_area.id],
      name: "pages_blocks_service_area_locations_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_service_area = pgTable(
  "pages_blocks_service_area",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_pages_blocks_service_area_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showMap: boolean("show_map").default(true),
    bgc: enum_pages_blocks_service_area_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_service_area_tc("tc").default("inherit"),
    sc: enum_pages_blocks_service_area_sc("sc").default("inherit"),
    dc: enum_pages_blocks_service_area_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("obmocje-delovanja"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_service_area_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_service_area_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_service_area_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_service_area_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_project_highlights = pgTable(
  "pages_blocks_project_highlights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_pages_blocks_project_highlights_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    bgc: enum_pages_blocks_project_highlights_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_project_highlights_tc("tc").default("inherit"),
    sc: enum_pages_blocks_project_highlights_sc("sc").default("inherit"),
    dc: enum_pages_blocks_project_highlights_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    autoSyncProjects: boolean("auto_sync_projects").default(false),
    idHref: varchar("id_href").default("projekti"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_project_highlights_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("pages_blocks_project_highlights_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_project_highlights_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_project_highlights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_machinery = pgTable(
  "pages_blocks_machinery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Naš Vozni Park"),
    description: varchar("description").default(
      "Ponudba gradbene mehanizacije za najem",
    ),
    template:
      enum_pages_blocks_machinery_template("template").default("default"),
    bgc: enum_pages_blocks_machinery_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_machinery_tc("tc").default("inherit"),
    sc: enum_pages_blocks_machinery_sc("sc").default("inherit"),
    dc: enum_pages_blocks_machinery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("strojni-park"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_machinery_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_machinery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_machinery_path_idx").on(columns._path),
    pages_blocks_machinery_cta_idx: index("pages_blocks_machinery_cta_idx").on(
      columns.cta,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_machinery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_form_block = pgTable(
  "pages_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    introContent: jsonb("intro_content"),
    bgc: enum_pages_blocks_form_block_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_form_block_tc("tc").default("inherit"),
    sc: enum_pages_blocks_form_block_sc("sc").default("inherit"),
    dc: enum_pages_blocks_form_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("form"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_form_block_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_form_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_form_block_path_idx").on(columns._path),
    pages_blocks_form_block_form_idx: index(
      "pages_blocks_form_block_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_howto_steps = pgTable(
  "pages_blocks_howto_steps",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    useIcon: boolean("use_icon").default(false),
    stepNumber: numeric("step_number").default("1"),
    icon: varchar("icon"),
    title: varchar("title"),
    description: jsonb("description"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_howto_steps_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_howto_steps_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_howto.id],
      name: "pages_blocks_howto_steps_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_howto = pgTable(
  "pages_blocks_howto",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Unsere einzigartige Beratung"),
    subtitle: varchar("subtitle"),
    bgc: enum_pages_blocks_howto_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_howto_tc("tc").default("inherit"),
    sc: enum_pages_blocks_howto_sc("sc").default("inherit"),
    dc: enum_pages_blocks_howto_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    template: enum_pages_blocks_howto_template("template").default("default"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_howto_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_howto_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_howto_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_howto_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta_block = pgTable(
  "pages_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_pages_blocks_cta_block_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_pages_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum_pages_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum_pages_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_cta_block_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_cta_block_path_idx").on(columns._path),
    pages_blocks_cta_block_cta_idx: index("pages_blocks_cta_block_cta_idx").on(
      columns.cta,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_featured_products = pgTable(
  "pages_blocks_featured_products",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_pages_blocks_featured_products_template("template").default(
        "default",
      ),
    bgc: enum_pages_blocks_featured_products_bgc("bgc").default("inherit"),
    tc: enum_pages_blocks_featured_products_tc("tc").default("inherit"),
    sc: enum_pages_blocks_featured_products_sc("sc").default("inherit"),
    dc: enum_pages_blocks_featured_products_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    idHref: varchar("id_href").default("izdelki"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_featured_products_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("pages_blocks_featured_products_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_featured_products_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_featured_products_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_text = pgTable(
  "pages_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template: enum_pages_blocks_text_template("template").default("default"),
    text: jsonb("text"),
    idHref: varchar("id_href").default("o-nas"),
    bgc: enum_pages_blocks_text_bgc("bgc").default("inherit"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages = pgTable(
  "pages",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug"),
    title: varchar("title"),
    pageType: enum_pages_page_type("page_type").default("landing"),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status("_status").default("draft"),
  },
  (columns) => ({
    pages_tenant_idx: index("pages_tenant_idx").on(columns.tenant),
    pages_slug_idx: uniqueIndex("pages_slug_idx").on(columns.slug),
    pages_meta_meta_image_idx: index("pages_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    pages_updated_at_idx: index("pages_updated_at_idx").on(columns.updatedAt),
    pages_created_at_idx: index("pages_created_at_idx").on(columns.createdAt),
    pages__status_idx: index("pages__status_idx").on(columns._status),
  }),
);

export const pages_rels = pgTable(
  "pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    servicesID: integer("services_id"),
    "faq-itemsID": integer("faq_items_id"),
    "opening-hoursID": integer("opening_hours_id"),
    mediaID: integer("media_id"),
    projectsID: integer("projects_id"),
    machineryID: integer("machinery_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("pages_rels_order_idx").on(columns.order),
    parentIdx: index("pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("pages_rels_path_idx").on(columns.path),
    pages_rels_ctas_id_idx: index("pages_rels_ctas_id_idx").on(columns.ctasID),
    pages_rels_high_quality_media_id_idx: index(
      "pages_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    pages_rels_testimonials_id_idx: index("pages_rels_testimonials_id_idx").on(
      columns.testimonialsID,
    ),
    pages_rels_services_id_idx: index("pages_rels_services_id_idx").on(
      columns.servicesID,
    ),
    pages_rels_faq_items_id_idx: index("pages_rels_faq_items_id_idx").on(
      columns["faq-itemsID"],
    ),
    pages_rels_opening_hours_id_idx: index(
      "pages_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    pages_rels_media_id_idx: index("pages_rels_media_id_idx").on(
      columns.mediaID,
    ),
    pages_rels_projects_id_idx: index("pages_rels_projects_id_idx").on(
      columns.projectsID,
    ),
    pages_rels_machinery_id_idx: index("pages_rels_machinery_id_idx").on(
      columns.machineryID,
    ),
    pages_rels_products_id_idx: index("pages_rels_products_id_idx").on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [pages.id],
      name: "pages_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "pages_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "pages_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "pages_rels_testimonials_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "pages_rels_services_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "pages_rels_faq_items_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "pages_rels_opening_hours_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "pages_rels_media_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "pages_rels_projects_fk",
    }).onDelete("cascade"),
    machineryIdFk: foreignKey({
      columns: [columns["machineryID"]],
      foreignColumns: [machinery.id],
      name: "pages_rels_machinery_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "pages_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_hero_features = pgTable(
  "_pages_v_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_hero_features_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_hero.id],
      name: "_pages_v_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_hero = pgTable(
  "_pages_v_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template: enum__pages_v_blocks_hero_template("template").default("default"),
    bgc: enum__pages_v_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_hero_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_hero_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_services = pgTable(
  "_pages_v_blocks_services",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_services_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    description: varchar("description"),
    bgc: enum__pages_v_blocks_services_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_services_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_services_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_services_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("storitve"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_services_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_services_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_services_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_services_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_faq = pgTable(
  "_pages_v_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template: enum__pages_v_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__pages_v_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_faq_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_faq_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_faq_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_faq_path_idx").on(columns._path),
    _pages_v_blocks_faq_faq_cta_idx: index(
      "_pages_v_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_contact = pgTable(
  "_pages_v_blocks_contact",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_contact_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showPhoneNumber: boolean("show_phone_number").default(true),
    showEmail: boolean("show_email").default(true),
    showAddress: boolean("show_address").default(true),
    bgc: enum__pages_v_blocks_contact_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_contact_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_contact_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_contact_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("kontakt"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_contact_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_contact_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_contact_path_idx").on(columns._path),
    _pages_v_blocks_contact_form_idx: index(
      "_pages_v_blocks_contact_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_contact_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_about_benefits = pgTable(
  "_pages_v_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum__pages_v_blocks_about_benefits_icon("icon"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_about_benefits_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_about.id],
      name: "_pages_v_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_about = pgTable(
  "_pages_v_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_about_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum__pages_v_blocks_about_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_about_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_about_dc("dc").default("inherit"),
    bgc: enum__pages_v_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_about_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_testimonials = pgTable(
  "_pages_v_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_testimonials_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum__pages_v_blocks_testimonials_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_testimonials_path_idx").on(columns._path),
    _pages_v_blocks_testimonials_google_review_cta_idx: index(
      "_pages_v_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_gallery = pgTable(
  "_pages_v_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_gallery_template("template").default("default"),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__pages_v_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_gallery_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_gallery_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_gallery_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_gallery_path_idx").on(columns._path),
    _pages_v_blocks_gallery_gallery_cta_idx: index(
      "_pages_v_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_service_area_locations = pgTable(
  "_pages_v_blocks_service_area_locations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    name: varchar("name"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_service_area_locations_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_pages_v_blocks_service_area_locations_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_service_area.id],
      name: "_pages_v_blocks_service_area_locations_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_service_area = pgTable(
  "_pages_v_blocks_service_area",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_service_area_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showMap: boolean("show_map").default(true),
    bgc: enum__pages_v_blocks_service_area_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_service_area_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_service_area_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_service_area_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("obmocje-delovanja"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_service_area_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_service_area_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_service_area_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_service_area_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_project_highlights = pgTable(
  "_pages_v_blocks_project_highlights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_project_highlights_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    bgc: enum__pages_v_blocks_project_highlights_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_project_highlights_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_project_highlights_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_project_highlights_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    autoSyncProjects: boolean("auto_sync_projects").default(false),
    idHref: varchar("id_href").default("projekti"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_project_highlights_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_project_highlights_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_project_highlights_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_project_highlights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_machinery = pgTable(
  "_pages_v_blocks_machinery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Naš Vozni Park"),
    description: varchar("description").default(
      "Ponudba gradbene mehanizacije za najem",
    ),
    template:
      enum__pages_v_blocks_machinery_template("template").default("default"),
    bgc: enum__pages_v_blocks_machinery_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_machinery_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_machinery_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_machinery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("strojni-park"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_machinery_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_machinery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_machinery_path_idx").on(columns._path),
    _pages_v_blocks_machinery_cta_idx: index(
      "_pages_v_blocks_machinery_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_machinery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_form_block = pgTable(
  "_pages_v_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    introContent: jsonb("intro_content"),
    bgc: enum__pages_v_blocks_form_block_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_form_block_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_form_block_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_form_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("form"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_form_block_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_form_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_form_block_path_idx").on(columns._path),
    _pages_v_blocks_form_block_form_idx: index(
      "_pages_v_blocks_form_block_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_howto_steps = pgTable(
  "_pages_v_blocks_howto_steps",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    useIcon: boolean("use_icon").default(false),
    stepNumber: numeric("step_number").default("1"),
    icon: varchar("icon"),
    title: varchar("title"),
    description: jsonb("description"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_howto_steps_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_howto_steps_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_howto.id],
      name: "_pages_v_blocks_howto_steps_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_howto = pgTable(
  "_pages_v_blocks_howto",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Unsere einzigartige Beratung"),
    subtitle: varchar("subtitle"),
    bgc: enum__pages_v_blocks_howto_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_howto_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_howto_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_howto_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    template:
      enum__pages_v_blocks_howto_template("template").default("default"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_howto_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_howto_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_howto_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_howto_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta_block = pgTable(
  "_pages_v_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_cta_block_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__pages_v_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_cta_block_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_cta_block_path_idx").on(columns._path),
    _pages_v_blocks_cta_block_cta_idx: index(
      "_pages_v_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_featured_products = pgTable(
  "_pages_v_blocks_featured_products",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__pages_v_blocks_featured_products_template("template").default(
        "default",
      ),
    bgc: enum__pages_v_blocks_featured_products_bgc("bgc").default("inherit"),
    tc: enum__pages_v_blocks_featured_products_tc("tc").default("inherit"),
    sc: enum__pages_v_blocks_featured_products_sc("sc").default("inherit"),
    dc: enum__pages_v_blocks_featured_products_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    idHref: varchar("id_href").default("izdelki"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_featured_products_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_featured_products_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_featured_products_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_featured_products_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_text = pgTable(
  "_pages_v_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template: enum__pages_v_blocks_text_template("template").default("default"),
    text: jsonb("text"),
    idHref: varchar("id_href").default("o-nas"),
    bgc: enum__pages_v_blocks_text_bgc("bgc").default("inherit"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v = pgTable(
  "_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => pages.id, {
      onDelete: "set null",
    }),
    version_tenant: integer("version_tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    version_slug: varchar("version_slug"),
    version_title: varchar("version_title"),
    version_pageType:
      enum__pages_v_version_page_type("version_page_type").default("landing"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_description: varchar("version_meta_description"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _pages_v_parent_idx: index("_pages_v_parent_idx").on(columns.parent),
    _pages_v_version_version_tenant_idx: index(
      "_pages_v_version_version_tenant_idx",
    ).on(columns.version_tenant),
    _pages_v_version_version_slug_idx: index(
      "_pages_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _pages_v_version_meta_version_meta_image_idx: index(
      "_pages_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _pages_v_version_version_updated_at_idx: index(
      "_pages_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index(
      "_pages_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index(
      "_pages_v_version_version__status_idx",
    ).on(columns.version__status),
    _pages_v_created_at_idx: index("_pages_v_created_at_idx").on(
      columns.createdAt,
    ),
    _pages_v_updated_at_idx: index("_pages_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _pages_v_latest_idx: index("_pages_v_latest_idx").on(columns.latest),
    _pages_v_autosave_idx: index("_pages_v_autosave_idx").on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  "_pages_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    servicesID: integer("services_id"),
    "faq-itemsID": integer("faq_items_id"),
    "opening-hoursID": integer("opening_hours_id"),
    mediaID: integer("media_id"),
    projectsID: integer("projects_id"),
    machineryID: integer("machinery_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("_pages_v_rels_order_idx").on(columns.order),
    parentIdx: index("_pages_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_pages_v_rels_path_idx").on(columns.path),
    _pages_v_rels_ctas_id_idx: index("_pages_v_rels_ctas_id_idx").on(
      columns.ctasID,
    ),
    _pages_v_rels_high_quality_media_id_idx: index(
      "_pages_v_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    _pages_v_rels_testimonials_id_idx: index(
      "_pages_v_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    _pages_v_rels_services_id_idx: index("_pages_v_rels_services_id_idx").on(
      columns.servicesID,
    ),
    _pages_v_rels_faq_items_id_idx: index("_pages_v_rels_faq_items_id_idx").on(
      columns["faq-itemsID"],
    ),
    _pages_v_rels_opening_hours_id_idx: index(
      "_pages_v_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    _pages_v_rels_media_id_idx: index("_pages_v_rels_media_id_idx").on(
      columns.mediaID,
    ),
    _pages_v_rels_projects_id_idx: index("_pages_v_rels_projects_id_idx").on(
      columns.projectsID,
    ),
    _pages_v_rels_machinery_id_idx: index("_pages_v_rels_machinery_id_idx").on(
      columns.machineryID,
    ),
    _pages_v_rels_products_id_idx: index("_pages_v_rels_products_id_idx").on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "_pages_v_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "_pages_v_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "_pages_v_rels_testimonials_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "_pages_v_rels_services_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "_pages_v_rels_faq_items_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "_pages_v_rels_opening_hours_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_pages_v_rels_media_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "_pages_v_rels_projects_fk",
    }).onDelete("cascade"),
    machineryIdFk: foreignKey({
      columns: [columns["machineryID"]],
      foreignColumns: [machinery.id],
      name: "_pages_v_rels_machinery_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "_pages_v_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_hero_features = pgTable(
  "service_pages_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_hero_features_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages_blocks_hero.id],
      name: "service_pages_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_hero = pgTable(
  "service_pages_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_hero_template("template").default("default"),
    bgc: enum_service_pages_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_hero_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_hero_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("service_pages_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_services = pgTable(
  "service_pages_blocks_services",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_services_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    description: varchar("description"),
    bgc: enum_service_pages_blocks_services_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_services_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_services_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_services_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("storitve"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_services_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_services_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_services_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_services_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_faq = pgTable(
  "service_pages_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_service_pages_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_faq_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_faq_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_faq_order_idx").on(columns._order),
    _parentIDIdx: index("service_pages_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_faq_path_idx").on(columns._path),
    service_pages_blocks_faq_faq_cta_idx: index(
      "service_pages_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_contact = pgTable(
  "service_pages_blocks_contact",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_contact_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showPhoneNumber: boolean("show_phone_number").default(true),
    showEmail: boolean("show_email").default(true),
    showAddress: boolean("show_address").default(true),
    bgc: enum_service_pages_blocks_contact_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_contact_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_contact_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_contact_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("kontakt"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_contact_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_contact_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_contact_path_idx").on(columns._path),
    service_pages_blocks_contact_form_idx: index(
      "service_pages_blocks_contact_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_contact_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_about_benefits = pgTable(
  "service_pages_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum_service_pages_blocks_about_benefits_icon("icon"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_about_benefits_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages_blocks_about.id],
      name: "service_pages_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_about = pgTable(
  "service_pages_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_about_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum_service_pages_blocks_about_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_about_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_about_dc("dc").default("inherit"),
    bgc: enum_service_pages_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_about_order_idx").on(columns._order),
    _parentIDIdx: index("service_pages_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_testimonials = pgTable(
  "service_pages_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_testimonials_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum_service_pages_blocks_testimonials_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_testimonials_path_idx").on(
      columns._path,
    ),
    service_pages_blocks_testimonials_google_review_cta_idx: index(
      "service_pages_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_gallery = pgTable(
  "service_pages_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_gallery_template("template").default("default"),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_service_pages_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_gallery_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_gallery_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_gallery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_gallery_path_idx").on(columns._path),
    service_pages_blocks_gallery_gallery_cta_idx: index(
      "service_pages_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_service_area_locations = pgTable(
  "service_pages_blocks_service_area_locations",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
  },
  (columns) => ({
    _orderIdx: index(
      "service_pages_blocks_service_area_locations_order_idx",
    ).on(columns._order),
    _parentIDIdx: index(
      "service_pages_blocks_service_area_locations_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages_blocks_service_area.id],
      name: "service_pages_blocks_service_area_locations_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_service_area = pgTable(
  "service_pages_blocks_service_area",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_service_area_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showMap: boolean("show_map").default(true),
    bgc: enum_service_pages_blocks_service_area_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_service_area_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_service_area_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_service_area_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("obmocje-delovanja"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_service_area_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_service_area_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_service_area_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_service_area_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_project_highlights = pgTable(
  "service_pages_blocks_project_highlights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_project_highlights_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    bgc: enum_service_pages_blocks_project_highlights_bgc("bgc").default(
      "inherit",
    ),
    tc: enum_service_pages_blocks_project_highlights_tc("tc").default(
      "inherit",
    ),
    sc: enum_service_pages_blocks_project_highlights_sc("sc").default(
      "inherit",
    ),
    dc: enum_service_pages_blocks_project_highlights_dc("dc").default(
      "inherit",
    ),
    isTransparent: boolean("is_transparent").default(false),
    autoSyncProjects: boolean("auto_sync_projects").default(false),
    idHref: varchar("id_href").default("projekti"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_project_highlights_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "service_pages_blocks_project_highlights_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("service_pages_blocks_project_highlights_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_project_highlights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_machinery = pgTable(
  "service_pages_blocks_machinery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Naš Vozni Park"),
    description: varchar("description").default(
      "Ponudba gradbene mehanizacije za najem",
    ),
    template:
      enum_service_pages_blocks_machinery_template("template").default(
        "default",
      ),
    bgc: enum_service_pages_blocks_machinery_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_machinery_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_machinery_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_machinery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("strojni-park"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_machinery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_machinery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_machinery_path_idx").on(
      columns._path,
    ),
    service_pages_blocks_machinery_cta_idx: index(
      "service_pages_blocks_machinery_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_machinery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_form_block = pgTable(
  "service_pages_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    introContent: jsonb("intro_content"),
    bgc: enum_service_pages_blocks_form_block_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_form_block_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_form_block_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_form_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("form"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_form_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_form_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_form_block_path_idx").on(
      columns._path,
    ),
    service_pages_blocks_form_block_form_idx: index(
      "service_pages_blocks_form_block_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_sub_services = pgTable(
  "service_pages_blocks_sub_services",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    description: varchar("description"),
    template:
      enum_service_pages_blocks_sub_services_template("template").default(
        "default",
      ),
    bgc: enum_service_pages_blocks_sub_services_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_sub_services_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_sub_services_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_sub_services_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("storitve"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_sub_services_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_sub_services_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_sub_services_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_sub_services_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages_blocks_cta_block = pgTable(
  "service_pages_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_service_pages_blocks_cta_block_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_service_pages_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum_service_pages_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum_service_pages_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum_service_pages_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("service_pages_blocks_cta_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("service_pages_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("service_pages_blocks_cta_block_path_idx").on(
      columns._path,
    ),
    service_pages_blocks_cta_block_cta_idx: index(
      "service_pages_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const service_pages = pgTable(
  "service_pages",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug"),
    title: varchar("title"),
    services: integer("services_id").references(() => services.id, {
      onDelete: "set null",
    }),
    pageType: varchar("page_type").default("service"),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_service_pages_status("_status").default("draft"),
  },
  (columns) => ({
    service_pages_tenant_idx: index("service_pages_tenant_idx").on(
      columns.tenant,
    ),
    service_pages_slug_idx: uniqueIndex("service_pages_slug_idx").on(
      columns.slug,
    ),
    service_pages_services_idx: index("service_pages_services_idx").on(
      columns.services,
    ),
    service_pages_meta_meta_image_idx: index(
      "service_pages_meta_meta_image_idx",
    ).on(columns.meta_image),
    service_pages_updated_at_idx: index("service_pages_updated_at_idx").on(
      columns.updatedAt,
    ),
    service_pages_created_at_idx: index("service_pages_created_at_idx").on(
      columns.createdAt,
    ),
    service_pages__status_idx: index("service_pages__status_idx").on(
      columns._status,
    ),
  }),
);

export const service_pages_rels = pgTable(
  "service_pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    servicesID: integer("services_id"),
    "faq-itemsID": integer("faq_items_id"),
    "opening-hoursID": integer("opening_hours_id"),
    mediaID: integer("media_id"),
    projectsID: integer("projects_id"),
    machineryID: integer("machinery_id"),
    sub_servicesID: integer("sub_services_id"),
  },
  (columns) => ({
    order: index("service_pages_rels_order_idx").on(columns.order),
    parentIdx: index("service_pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("service_pages_rels_path_idx").on(columns.path),
    service_pages_rels_ctas_id_idx: index("service_pages_rels_ctas_id_idx").on(
      columns.ctasID,
    ),
    service_pages_rels_high_quality_media_id_idx: index(
      "service_pages_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    service_pages_rels_testimonials_id_idx: index(
      "service_pages_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    service_pages_rels_services_id_idx: index(
      "service_pages_rels_services_id_idx",
    ).on(columns.servicesID),
    service_pages_rels_faq_items_id_idx: index(
      "service_pages_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    service_pages_rels_opening_hours_id_idx: index(
      "service_pages_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    service_pages_rels_media_id_idx: index(
      "service_pages_rels_media_id_idx",
    ).on(columns.mediaID),
    service_pages_rels_projects_id_idx: index(
      "service_pages_rels_projects_id_idx",
    ).on(columns.projectsID),
    service_pages_rels_machinery_id_idx: index(
      "service_pages_rels_machinery_id_idx",
    ).on(columns.machineryID),
    service_pages_rels_sub_services_id_idx: index(
      "service_pages_rels_sub_services_id_idx",
    ).on(columns.sub_servicesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [service_pages.id],
      name: "service_pages_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "service_pages_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "service_pages_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "service_pages_rels_testimonials_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "service_pages_rels_services_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "service_pages_rels_faq_items_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "service_pages_rels_opening_hours_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "service_pages_rels_media_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "service_pages_rels_projects_fk",
    }).onDelete("cascade"),
    machineryIdFk: foreignKey({
      columns: [columns["machineryID"]],
      foreignColumns: [machinery.id],
      name: "service_pages_rels_machinery_fk",
    }).onDelete("cascade"),
    sub_servicesIdFk: foreignKey({
      columns: [columns["sub_servicesID"]],
      foreignColumns: [sub_services.id],
      name: "service_pages_rels_sub_services_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_hero_features = pgTable(
  "_service_pages_v_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_service_pages_v_blocks_hero_features_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v_blocks_hero.id],
      name: "_service_pages_v_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_hero = pgTable(
  "_service_pages_v_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_hero_template("template").default("default"),
    bgc: enum__service_pages_v_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_hero_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_hero_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_hero_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_services = pgTable(
  "_service_pages_v_blocks_services",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_services_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    description: varchar("description"),
    bgc: enum__service_pages_v_blocks_services_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_services_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_services_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_services_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("storitve"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_services_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_services_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_services_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_services_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_faq = pgTable(
  "_service_pages_v_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__service_pages_v_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_faq_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_faq_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_faq_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_faq_path_idx").on(columns._path),
    _service_pages_v_blocks_faq_faq_cta_idx: index(
      "_service_pages_v_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_contact = pgTable(
  "_service_pages_v_blocks_contact",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_contact_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showPhoneNumber: boolean("show_phone_number").default(true),
    showEmail: boolean("show_email").default(true),
    showAddress: boolean("show_address").default(true),
    bgc: enum__service_pages_v_blocks_contact_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_contact_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_contact_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_contact_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("kontakt"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_contact_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_contact_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_contact_path_idx").on(
      columns._path,
    ),
    _service_pages_v_blocks_contact_form_idx: index(
      "_service_pages_v_blocks_contact_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_contact_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_about_benefits = pgTable(
  "_service_pages_v_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum__service_pages_v_blocks_about_benefits_icon("icon"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_service_pages_v_blocks_about_benefits_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v_blocks_about.id],
      name: "_service_pages_v_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_about = pgTable(
  "_service_pages_v_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_about_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum__service_pages_v_blocks_about_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_about_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_about_dc("dc").default("inherit"),
    bgc: enum__service_pages_v_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_about_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_testimonials = pgTable(
  "_service_pages_v_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_testimonials_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum__service_pages_v_blocks_testimonials_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__service_pages_v_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_service_pages_v_blocks_testimonials_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_service_pages_v_blocks_testimonials_path_idx").on(
      columns._path,
    ),
    _service_pages_v_blocks_testimonials_google_review_cta_idx: index(
      "_service_pages_v_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_gallery = pgTable(
  "_service_pages_v_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_gallery_template("template").default(
        "default",
      ),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__service_pages_v_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_gallery_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_gallery_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_gallery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_gallery_path_idx").on(
      columns._path,
    ),
    _service_pages_v_blocks_gallery_gallery_cta_idx: index(
      "_service_pages_v_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_service_area_locations = pgTable(
  "_service_pages_v_blocks_service_area_locations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    name: varchar("name"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index(
      "_service_pages_v_blocks_service_area_locations_order_idx",
    ).on(columns._order),
    _parentIDIdx: index(
      "_service_pages_v_blocks_service_area_locations_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v_blocks_service_area.id],
      name: "_service_pages_v_blocks_service_area_locations_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_service_area = pgTable(
  "_service_pages_v_blocks_service_area",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_service_area_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showMap: boolean("show_map").default(true),
    bgc: enum__service_pages_v_blocks_service_area_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__service_pages_v_blocks_service_area_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_service_area_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_service_area_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("obmocje-delovanja"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_service_area_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_service_pages_v_blocks_service_area_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_service_pages_v_blocks_service_area_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_service_area_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_project_highlights = pgTable(
  "_service_pages_v_blocks_project_highlights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_project_highlights_template(
        "template",
      ).default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    bgc: enum__service_pages_v_blocks_project_highlights_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__service_pages_v_blocks_project_highlights_tc("tc").default(
      "inherit",
    ),
    sc: enum__service_pages_v_blocks_project_highlights_sc("sc").default(
      "inherit",
    ),
    dc: enum__service_pages_v_blocks_project_highlights_dc("dc").default(
      "inherit",
    ),
    isTransparent: boolean("is_transparent").default(false),
    autoSyncProjects: boolean("auto_sync_projects").default(false),
    idHref: varchar("id_href").default("projekti"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_project_highlights_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_service_pages_v_blocks_project_highlights_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_service_pages_v_blocks_project_highlights_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_project_highlights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_machinery = pgTable(
  "_service_pages_v_blocks_machinery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Naš Vozni Park"),
    description: varchar("description").default(
      "Ponudba gradbene mehanizacije za najem",
    ),
    template:
      enum__service_pages_v_blocks_machinery_template("template").default(
        "default",
      ),
    bgc: enum__service_pages_v_blocks_machinery_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_machinery_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_machinery_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_machinery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("strojni-park"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_machinery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_machinery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_machinery_path_idx").on(
      columns._path,
    ),
    _service_pages_v_blocks_machinery_cta_idx: index(
      "_service_pages_v_blocks_machinery_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_machinery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_form_block = pgTable(
  "_service_pages_v_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    introContent: jsonb("intro_content"),
    bgc: enum__service_pages_v_blocks_form_block_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_form_block_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_form_block_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_form_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("form"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_form_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_form_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_form_block_path_idx").on(
      columns._path,
    ),
    _service_pages_v_blocks_form_block_form_idx: index(
      "_service_pages_v_blocks_form_block_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_sub_services = pgTable(
  "_service_pages_v_blocks_sub_services",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    description: varchar("description"),
    template:
      enum__service_pages_v_blocks_sub_services_template("template").default(
        "default",
      ),
    bgc: enum__service_pages_v_blocks_sub_services_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__service_pages_v_blocks_sub_services_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_sub_services_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_sub_services_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("storitve"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_sub_services_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_service_pages_v_blocks_sub_services_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_service_pages_v_blocks_sub_services_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_sub_services_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v_blocks_cta_block = pgTable(
  "_service_pages_v_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__service_pages_v_blocks_cta_block_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__service_pages_v_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum__service_pages_v_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum__service_pages_v_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum__service_pages_v_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_service_pages_v_blocks_cta_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_service_pages_v_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_service_pages_v_blocks_cta_block_path_idx").on(
      columns._path,
    ),
    _service_pages_v_blocks_cta_block_cta_idx: index(
      "_service_pages_v_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _service_pages_v = pgTable(
  "_service_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => service_pages.id, {
      onDelete: "set null",
    }),
    version_tenant: integer("version_tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    version_slug: varchar("version_slug"),
    version_title: varchar("version_title"),
    version_services: integer("version_services_id").references(
      () => services.id,
      {
        onDelete: "set null",
      },
    ),
    version_pageType: varchar("version_page_type").default("service"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_description: varchar("version_meta_description"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__service_pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _service_pages_v_parent_idx: index("_service_pages_v_parent_idx").on(
      columns.parent,
    ),
    _service_pages_v_version_version_tenant_idx: index(
      "_service_pages_v_version_version_tenant_idx",
    ).on(columns.version_tenant),
    _service_pages_v_version_version_slug_idx: index(
      "_service_pages_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _service_pages_v_version_version_services_idx: index(
      "_service_pages_v_version_version_services_idx",
    ).on(columns.version_services),
    _service_pages_v_version_meta_version_meta_image_idx: index(
      "_service_pages_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _service_pages_v_version_version_updated_at_idx: index(
      "_service_pages_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _service_pages_v_version_version_created_at_idx: index(
      "_service_pages_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _service_pages_v_version_version__status_idx: index(
      "_service_pages_v_version_version__status_idx",
    ).on(columns.version__status),
    _service_pages_v_created_at_idx: index(
      "_service_pages_v_created_at_idx",
    ).on(columns.createdAt),
    _service_pages_v_updated_at_idx: index(
      "_service_pages_v_updated_at_idx",
    ).on(columns.updatedAt),
    _service_pages_v_latest_idx: index("_service_pages_v_latest_idx").on(
      columns.latest,
    ),
    _service_pages_v_autosave_idx: index("_service_pages_v_autosave_idx").on(
      columns.autosave,
    ),
  }),
);

export const _service_pages_v_rels = pgTable(
  "_service_pages_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    servicesID: integer("services_id"),
    "faq-itemsID": integer("faq_items_id"),
    "opening-hoursID": integer("opening_hours_id"),
    mediaID: integer("media_id"),
    projectsID: integer("projects_id"),
    machineryID: integer("machinery_id"),
    sub_servicesID: integer("sub_services_id"),
  },
  (columns) => ({
    order: index("_service_pages_v_rels_order_idx").on(columns.order),
    parentIdx: index("_service_pages_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_service_pages_v_rels_path_idx").on(columns.path),
    _service_pages_v_rels_ctas_id_idx: index(
      "_service_pages_v_rels_ctas_id_idx",
    ).on(columns.ctasID),
    _service_pages_v_rels_high_quality_media_id_idx: index(
      "_service_pages_v_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    _service_pages_v_rels_testimonials_id_idx: index(
      "_service_pages_v_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    _service_pages_v_rels_services_id_idx: index(
      "_service_pages_v_rels_services_id_idx",
    ).on(columns.servicesID),
    _service_pages_v_rels_faq_items_id_idx: index(
      "_service_pages_v_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    _service_pages_v_rels_opening_hours_id_idx: index(
      "_service_pages_v_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    _service_pages_v_rels_media_id_idx: index(
      "_service_pages_v_rels_media_id_idx",
    ).on(columns.mediaID),
    _service_pages_v_rels_projects_id_idx: index(
      "_service_pages_v_rels_projects_id_idx",
    ).on(columns.projectsID),
    _service_pages_v_rels_machinery_id_idx: index(
      "_service_pages_v_rels_machinery_id_idx",
    ).on(columns.machineryID),
    _service_pages_v_rels_sub_services_id_idx: index(
      "_service_pages_v_rels_sub_services_id_idx",
    ).on(columns.sub_servicesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_service_pages_v.id],
      name: "_service_pages_v_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "_service_pages_v_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "_service_pages_v_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "_service_pages_v_rels_testimonials_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "_service_pages_v_rels_services_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "_service_pages_v_rels_faq_items_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "_service_pages_v_rels_opening_hours_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_service_pages_v_rels_media_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "_service_pages_v_rels_projects_fk",
    }).onDelete("cascade"),
    machineryIdFk: foreignKey({
      columns: [columns["machineryID"]],
      foreignColumns: [machinery.id],
      name: "_service_pages_v_rels_machinery_fk",
    }).onDelete("cascade"),
    sub_servicesIdFk: foreignKey({
      columns: [columns["sub_servicesID"]],
      foreignColumns: [sub_services.id],
      name: "_service_pages_v_rels_sub_services_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_hero_features = pgTable(
  "project_pages_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_hero_features_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages_blocks_hero.id],
      name: "project_pages_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_hero = pgTable(
  "project_pages_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_hero_template("template").default("default"),
    bgc: enum_project_pages_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_hero_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_hero_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("project_pages_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_gallery = pgTable(
  "project_pages_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_gallery_template("template").default("default"),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_project_pages_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_gallery_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_gallery_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_gallery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_gallery_path_idx").on(columns._path),
    project_pages_blocks_gallery_gallery_cta_idx: index(
      "project_pages_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_faq = pgTable(
  "project_pages_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_project_pages_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_faq_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_faq_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_faq_order_idx").on(columns._order),
    _parentIDIdx: index("project_pages_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_faq_path_idx").on(columns._path),
    project_pages_blocks_faq_faq_cta_idx: index(
      "project_pages_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_contact = pgTable(
  "project_pages_blocks_contact",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_contact_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showPhoneNumber: boolean("show_phone_number").default(true),
    showEmail: boolean("show_email").default(true),
    showAddress: boolean("show_address").default(true),
    bgc: enum_project_pages_blocks_contact_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_contact_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_contact_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_contact_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("kontakt"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_contact_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_contact_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_contact_path_idx").on(columns._path),
    project_pages_blocks_contact_form_idx: index(
      "project_pages_blocks_contact_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_contact_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_about_benefits = pgTable(
  "project_pages_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum_project_pages_blocks_about_benefits_icon("icon"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_about_benefits_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages_blocks_about.id],
      name: "project_pages_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_about = pgTable(
  "project_pages_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_about_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum_project_pages_blocks_about_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_about_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_about_dc("dc").default("inherit"),
    bgc: enum_project_pages_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_about_order_idx").on(columns._order),
    _parentIDIdx: index("project_pages_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_testimonials = pgTable(
  "project_pages_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_testimonials_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum_project_pages_blocks_testimonials_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_testimonials_path_idx").on(
      columns._path,
    ),
    project_pages_blocks_testimonials_google_review_cta_idx: index(
      "project_pages_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_about_project = pgTable(
  "project_pages_blocks_about_project",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_about_project_template("template").default(
        "default",
      ),
    project: integer("project_id").references(() => projects.id, {
      onDelete: "set null",
    }),
    bgc: enum_project_pages_blocks_about_project_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_about_project_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_about_project_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_about_project_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("o-projektu"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_about_project_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_about_project_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_about_project_path_idx").on(
      columns._path,
    ),
    project_pages_blocks_about_project_project_idx: index(
      "project_pages_blocks_about_project_project_idx",
    ).on(columns.project),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_about_project_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_related_projects = pgTable(
  "project_pages_blocks_related_projects",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Povezani projekti"),
    subtitle: varchar("subtitle"),
    template:
      enum_project_pages_blocks_related_projects_template("template").default(
        "default",
      ),
    bgc: enum_project_pages_blocks_related_projects_bgc("bgc").default(
      "inherit",
    ),
    tc: enum_project_pages_blocks_related_projects_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_related_projects_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_related_projects_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("povezani-projekti"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_related_projects_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "project_pages_blocks_related_projects_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("project_pages_blocks_related_projects_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_related_projects_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages_blocks_cta_block = pgTable(
  "project_pages_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_project_pages_blocks_cta_block_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_project_pages_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum_project_pages_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum_project_pages_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum_project_pages_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("project_pages_blocks_cta_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("project_pages_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("project_pages_blocks_cta_block_path_idx").on(
      columns._path,
    ),
    project_pages_blocks_cta_block_cta_idx: index(
      "project_pages_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const project_pages = pgTable(
  "project_pages",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug"),
    title: varchar("title"),
    relatedProject: integer("related_project_id").references(
      () => projects.id,
      {
        onDelete: "set null",
      },
    ),
    pageType: varchar("page_type").default("project"),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_project_pages_status("_status").default("draft"),
  },
  (columns) => ({
    project_pages_slug_idx: uniqueIndex("project_pages_slug_idx").on(
      columns.slug,
    ),
    project_pages_related_project_idx: index(
      "project_pages_related_project_idx",
    ).on(columns.relatedProject),
    project_pages_meta_meta_image_idx: index(
      "project_pages_meta_meta_image_idx",
    ).on(columns.meta_image),
    project_pages_updated_at_idx: index("project_pages_updated_at_idx").on(
      columns.updatedAt,
    ),
    project_pages_created_at_idx: index("project_pages_created_at_idx").on(
      columns.createdAt,
    ),
    project_pages__status_idx: index("project_pages__status_idx").on(
      columns._status,
    ),
  }),
);

export const project_pages_rels = pgTable(
  "project_pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    mediaID: integer("media_id"),
    "faq-itemsID": integer("faq_items_id"),
    "opening-hoursID": integer("opening_hours_id"),
    projectsID: integer("projects_id"),
  },
  (columns) => ({
    order: index("project_pages_rels_order_idx").on(columns.order),
    parentIdx: index("project_pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("project_pages_rels_path_idx").on(columns.path),
    project_pages_rels_ctas_id_idx: index("project_pages_rels_ctas_id_idx").on(
      columns.ctasID,
    ),
    project_pages_rels_high_quality_media_id_idx: index(
      "project_pages_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    project_pages_rels_testimonials_id_idx: index(
      "project_pages_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    project_pages_rels_media_id_idx: index(
      "project_pages_rels_media_id_idx",
    ).on(columns.mediaID),
    project_pages_rels_faq_items_id_idx: index(
      "project_pages_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    project_pages_rels_opening_hours_id_idx: index(
      "project_pages_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    project_pages_rels_projects_id_idx: index(
      "project_pages_rels_projects_id_idx",
    ).on(columns.projectsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [project_pages.id],
      name: "project_pages_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "project_pages_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "project_pages_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "project_pages_rels_testimonials_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "project_pages_rels_media_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "project_pages_rels_faq_items_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "project_pages_rels_opening_hours_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "project_pages_rels_projects_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_hero_features = pgTable(
  "_project_pages_v_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_project_pages_v_blocks_hero_features_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v_blocks_hero.id],
      name: "_project_pages_v_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_hero = pgTable(
  "_project_pages_v_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_hero_template("template").default("default"),
    bgc: enum__project_pages_v_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum__project_pages_v_blocks_hero_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_hero_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_hero_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_project_pages_v_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_project_pages_v_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_gallery = pgTable(
  "_project_pages_v_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_gallery_template("template").default(
        "default",
      ),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__project_pages_v_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum__project_pages_v_blocks_gallery_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_gallery_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_gallery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_project_pages_v_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_project_pages_v_blocks_gallery_path_idx").on(
      columns._path,
    ),
    _project_pages_v_blocks_gallery_gallery_cta_idx: index(
      "_project_pages_v_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_faq = pgTable(
  "_project_pages_v_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__project_pages_v_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum__project_pages_v_blocks_faq_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_faq_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_faq_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_project_pages_v_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_project_pages_v_blocks_faq_path_idx").on(columns._path),
    _project_pages_v_blocks_faq_faq_cta_idx: index(
      "_project_pages_v_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_contact = pgTable(
  "_project_pages_v_blocks_contact",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_contact_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    showPhoneNumber: boolean("show_phone_number").default(true),
    showEmail: boolean("show_email").default(true),
    showAddress: boolean("show_address").default(true),
    bgc: enum__project_pages_v_blocks_contact_bgc("bgc").default("inherit"),
    tc: enum__project_pages_v_blocks_contact_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_contact_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_contact_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("kontakt"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_contact_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_project_pages_v_blocks_contact_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_project_pages_v_blocks_contact_path_idx").on(
      columns._path,
    ),
    _project_pages_v_blocks_contact_form_idx: index(
      "_project_pages_v_blocks_contact_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_contact_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_about_benefits = pgTable(
  "_project_pages_v_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum__project_pages_v_blocks_about_benefits_icon("icon"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_project_pages_v_blocks_about_benefits_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v_blocks_about.id],
      name: "_project_pages_v_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_about = pgTable(
  "_project_pages_v_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_about_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum__project_pages_v_blocks_about_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_about_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_about_dc("dc").default("inherit"),
    bgc: enum__project_pages_v_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_about_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_project_pages_v_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_project_pages_v_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_testimonials = pgTable(
  "_project_pages_v_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_testimonials_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum__project_pages_v_blocks_testimonials_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__project_pages_v_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_project_pages_v_blocks_testimonials_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_project_pages_v_blocks_testimonials_path_idx").on(
      columns._path,
    ),
    _project_pages_v_blocks_testimonials_google_review_cta_idx: index(
      "_project_pages_v_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_about_project = pgTable(
  "_project_pages_v_blocks_about_project",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_about_project_template("template").default(
        "default",
      ),
    project: integer("project_id").references(() => projects.id, {
      onDelete: "set null",
    }),
    bgc: enum__project_pages_v_blocks_about_project_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__project_pages_v_blocks_about_project_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_about_project_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_about_project_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("o-projektu"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_about_project_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_project_pages_v_blocks_about_project_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_project_pages_v_blocks_about_project_path_idx").on(
      columns._path,
    ),
    _project_pages_v_blocks_about_project_project_idx: index(
      "_project_pages_v_blocks_about_project_project_idx",
    ).on(columns.project),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_about_project_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_related_projects = pgTable(
  "_project_pages_v_blocks_related_projects",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default("Povezani projekti"),
    subtitle: varchar("subtitle"),
    template:
      enum__project_pages_v_blocks_related_projects_template(
        "template",
      ).default("default"),
    bgc: enum__project_pages_v_blocks_related_projects_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__project_pages_v_blocks_related_projects_tc("tc").default(
      "inherit",
    ),
    sc: enum__project_pages_v_blocks_related_projects_sc("sc").default(
      "inherit",
    ),
    dc: enum__project_pages_v_blocks_related_projects_dc("dc").default(
      "inherit",
    ),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("povezani-projekti"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_related_projects_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_project_pages_v_blocks_related_projects_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_project_pages_v_blocks_related_projects_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_related_projects_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v_blocks_cta_block = pgTable(
  "_project_pages_v_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__project_pages_v_blocks_cta_block_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__project_pages_v_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum__project_pages_v_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum__project_pages_v_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum__project_pages_v_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_project_pages_v_blocks_cta_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_project_pages_v_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_project_pages_v_blocks_cta_block_path_idx").on(
      columns._path,
    ),
    _project_pages_v_blocks_cta_block_cta_idx: index(
      "_project_pages_v_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _project_pages_v = pgTable(
  "_project_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => project_pages.id, {
      onDelete: "set null",
    }),
    version_slug: varchar("version_slug"),
    version_title: varchar("version_title"),
    version_relatedProject: integer("version_related_project_id").references(
      () => projects.id,
      {
        onDelete: "set null",
      },
    ),
    version_pageType: varchar("version_page_type").default("project"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_description: varchar("version_meta_description"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__project_pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _project_pages_v_parent_idx: index("_project_pages_v_parent_idx").on(
      columns.parent,
    ),
    _project_pages_v_version_version_slug_idx: index(
      "_project_pages_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _project_pages_v_version_version_related_project_idx: index(
      "_project_pages_v_version_version_related_project_idx",
    ).on(columns.version_relatedProject),
    _project_pages_v_version_meta_version_meta_image_idx: index(
      "_project_pages_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _project_pages_v_version_version_updated_at_idx: index(
      "_project_pages_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _project_pages_v_version_version_created_at_idx: index(
      "_project_pages_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _project_pages_v_version_version__status_idx: index(
      "_project_pages_v_version_version__status_idx",
    ).on(columns.version__status),
    _project_pages_v_created_at_idx: index(
      "_project_pages_v_created_at_idx",
    ).on(columns.createdAt),
    _project_pages_v_updated_at_idx: index(
      "_project_pages_v_updated_at_idx",
    ).on(columns.updatedAt),
    _project_pages_v_latest_idx: index("_project_pages_v_latest_idx").on(
      columns.latest,
    ),
    _project_pages_v_autosave_idx: index("_project_pages_v_autosave_idx").on(
      columns.autosave,
    ),
  }),
);

export const _project_pages_v_rels = pgTable(
  "_project_pages_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    mediaID: integer("media_id"),
    "faq-itemsID": integer("faq_items_id"),
    "opening-hoursID": integer("opening_hours_id"),
    projectsID: integer("projects_id"),
  },
  (columns) => ({
    order: index("_project_pages_v_rels_order_idx").on(columns.order),
    parentIdx: index("_project_pages_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_project_pages_v_rels_path_idx").on(columns.path),
    _project_pages_v_rels_ctas_id_idx: index(
      "_project_pages_v_rels_ctas_id_idx",
    ).on(columns.ctasID),
    _project_pages_v_rels_high_quality_media_id_idx: index(
      "_project_pages_v_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    _project_pages_v_rels_testimonials_id_idx: index(
      "_project_pages_v_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    _project_pages_v_rels_media_id_idx: index(
      "_project_pages_v_rels_media_id_idx",
    ).on(columns.mediaID),
    _project_pages_v_rels_faq_items_id_idx: index(
      "_project_pages_v_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    _project_pages_v_rels_opening_hours_id_idx: index(
      "_project_pages_v_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    _project_pages_v_rels_projects_id_idx: index(
      "_project_pages_v_rels_projects_id_idx",
    ).on(columns.projectsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_project_pages_v.id],
      name: "_project_pages_v_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "_project_pages_v_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "_project_pages_v_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "_project_pages_v_rels_testimonials_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_project_pages_v_rels_media_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "_project_pages_v_rels_faq_items_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "_project_pages_v_rels_opening_hours_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "_project_pages_v_rels_projects_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_product_form = pgTable(
  "product_pages_blocks_product_form",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    product: integer("product_id").references(() => products.id, {
      onDelete: "set null",
    }),
    template:
      enum_product_pages_blocks_product_form_template("template").default(
        "default",
      ),
    tc: enum_product_pages_blocks_product_form_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_product_form_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_product_form_dc("dc").default("inherit"),
    bgc: enum_product_pages_blocks_product_form_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    showTitle: boolean("show_title").default(true),
    showSku: boolean("show_sku").default(false),
    showManufacturer: boolean("show_manufacturer").default(true),
    showType: boolean("show_type").default(true),
    showShortDescription: boolean("show_short_description").default(true),
    showLongDescription: boolean("show_long_description").default(false),
    showPricing: boolean("show_pricing").default(true),
    showAvailability: boolean("show_availability").default(true),
    showMountingInfo: boolean("show_mounting_info").default(true),
    showTechnicalSpecs: boolean("show_technical_specs").default(false),
    showHighlights: boolean("show_highlights").default(true),
    showMainImage: boolean("show_main_image").default(true),
    showGallery: boolean("show_gallery").default(false),
    showReviews: boolean("show_reviews").default(true),
    showRating: boolean("show_rating").default(true),
    showOrderForm: boolean("show_order_form").default(true),
    ctaText: varchar("cta_text").default("Pošljite povpraševanje"),
    idHref: varchar("id_href").default("product-form"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_product_form_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_pages_blocks_product_form_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_product_form_path_idx").on(
      columns._path,
    ),
    product_pages_blocks_product_form_product_idx: index(
      "product_pages_blocks_product_form_product_idx",
    ).on(columns.product),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_product_form_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_hero_features = pgTable(
  "product_pages_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_pages_blocks_hero_features_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages_blocks_hero.id],
      name: "product_pages_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_hero = pgTable(
  "product_pages_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_product_pages_blocks_hero_template("template").default("default"),
    bgc: enum_product_pages_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum_product_pages_blocks_hero_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_hero_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("product_pages_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_faq = pgTable(
  "product_pages_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_product_pages_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_product_pages_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum_product_pages_blocks_faq_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_faq_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_faq_order_idx").on(columns._order),
    _parentIDIdx: index("product_pages_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_faq_path_idx").on(columns._path),
    product_pages_blocks_faq_faq_cta_idx: index(
      "product_pages_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_about_benefits = pgTable(
  "product_pages_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum_product_pages_blocks_about_benefits_icon("icon"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_pages_blocks_about_benefits_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages_blocks_about.id],
      name: "product_pages_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_about = pgTable(
  "product_pages_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_product_pages_blocks_about_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum_product_pages_blocks_about_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_about_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_about_dc("dc").default("inherit"),
    bgc: enum_product_pages_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_about_order_idx").on(columns._order),
    _parentIDIdx: index("product_pages_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_testimonials = pgTable(
  "product_pages_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_product_pages_blocks_testimonials_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum_product_pages_blocks_testimonials_bgc("bgc").default("inherit"),
    tc: enum_product_pages_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_pages_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_testimonials_path_idx").on(
      columns._path,
    ),
    product_pages_blocks_testimonials_google_review_cta_idx: index(
      "product_pages_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_gallery = pgTable(
  "product_pages_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_product_pages_blocks_gallery_template("template").default("default"),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_product_pages_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum_product_pages_blocks_gallery_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_gallery_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_gallery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_pages_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_gallery_path_idx").on(columns._path),
    product_pages_blocks_gallery_gallery_cta_idx: index(
      "product_pages_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages_blocks_cta_block = pgTable(
  "product_pages_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    template:
      enum_product_pages_blocks_cta_block_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum_product_pages_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum_product_pages_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum_product_pages_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum_product_pages_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("product_pages_blocks_cta_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_pages_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("product_pages_blocks_cta_block_path_idx").on(
      columns._path,
    ),
    product_pages_blocks_cta_block_cta_idx: index(
      "product_pages_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_pages = pgTable(
  "product_pages",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug"),
    products: integer("products_id").references(() => products.id, {
      onDelete: "set null",
    }),
    title: varchar("title"),
    pageType: varchar("page_type").default("product"),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_product_pages_status("_status").default("draft"),
  },
  (columns) => ({
    product_pages_slug_idx: uniqueIndex("product_pages_slug_idx").on(
      columns.slug,
    ),
    product_pages_products_idx: index("product_pages_products_idx").on(
      columns.products,
    ),
    product_pages_meta_meta_image_idx: index(
      "product_pages_meta_meta_image_idx",
    ).on(columns.meta_image),
    product_pages_updated_at_idx: index("product_pages_updated_at_idx").on(
      columns.updatedAt,
    ),
    product_pages_created_at_idx: index("product_pages_created_at_idx").on(
      columns.createdAt,
    ),
    product_pages__status_idx: index("product_pages__status_idx").on(
      columns._status,
    ),
  }),
);

export const product_pages_rels = pgTable(
  "product_pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    "faq-itemsID": integer("faq_items_id"),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("product_pages_rels_order_idx").on(columns.order),
    parentIdx: index("product_pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("product_pages_rels_path_idx").on(columns.path),
    product_pages_rels_ctas_id_idx: index("product_pages_rels_ctas_id_idx").on(
      columns.ctasID,
    ),
    product_pages_rels_high_quality_media_id_idx: index(
      "product_pages_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    product_pages_rels_testimonials_id_idx: index(
      "product_pages_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    product_pages_rels_faq_items_id_idx: index(
      "product_pages_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    product_pages_rels_media_id_idx: index(
      "product_pages_rels_media_id_idx",
    ).on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [product_pages.id],
      name: "product_pages_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "product_pages_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "product_pages_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "product_pages_rels_testimonials_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "product_pages_rels_faq_items_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "product_pages_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_product_form = pgTable(
  "_product_pages_v_blocks_product_form",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    product: integer("product_id").references(() => products.id, {
      onDelete: "set null",
    }),
    template:
      enum__product_pages_v_blocks_product_form_template("template").default(
        "default",
      ),
    tc: enum__product_pages_v_blocks_product_form_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_product_form_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_product_form_dc("dc").default("inherit"),
    bgc: enum__product_pages_v_blocks_product_form_bgc("bgc").default(
      "inherit",
    ),
    isTransparent: boolean("is_transparent").default(false),
    showTitle: boolean("show_title").default(true),
    showSku: boolean("show_sku").default(false),
    showManufacturer: boolean("show_manufacturer").default(true),
    showType: boolean("show_type").default(true),
    showShortDescription: boolean("show_short_description").default(true),
    showLongDescription: boolean("show_long_description").default(false),
    showPricing: boolean("show_pricing").default(true),
    showAvailability: boolean("show_availability").default(true),
    showMountingInfo: boolean("show_mounting_info").default(true),
    showTechnicalSpecs: boolean("show_technical_specs").default(false),
    showHighlights: boolean("show_highlights").default(true),
    showMainImage: boolean("show_main_image").default(true),
    showGallery: boolean("show_gallery").default(false),
    showReviews: boolean("show_reviews").default(true),
    showRating: boolean("show_rating").default(true),
    showOrderForm: boolean("show_order_form").default(true),
    ctaText: varchar("cta_text").default("Pošljite povpraševanje"),
    idHref: varchar("id_href").default("product-form"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_product_form_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_product_pages_v_blocks_product_form_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_product_pages_v_blocks_product_form_path_idx").on(
      columns._path,
    ),
    _product_pages_v_blocks_product_form_product_idx: index(
      "_product_pages_v_blocks_product_form_product_idx",
    ).on(columns.product),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_product_form_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_hero_features = pgTable(
  "_product_pages_v_blocks_hero_features",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    iconText: varchar("icon_text"),
    text: varchar("text").default(""),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_hero_features_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_product_pages_v_blocks_hero_features_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v_blocks_hero.id],
      name: "_product_pages_v_blocks_hero_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_hero = pgTable(
  "_product_pages_v_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__product_pages_v_blocks_hero_template("template").default("default"),
    bgc: enum__product_pages_v_blocks_hero_bgc("bgc").default("inherit"),
    tc: enum__product_pages_v_blocks_hero_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_hero_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_hero_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    includeFollowersBadge: boolean("include_followers_badge").default(false),
    showFeatures: boolean("show_features").default(false),
    idHref: varchar("id_href").default("hero"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_hero_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_product_pages_v_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_product_pages_v_blocks_hero_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_faq = pgTable(
  "_product_pages_v_blocks_faq",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__product_pages_v_blocks_faq_template("template").default("default"),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    faqCta: integer("faq_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__product_pages_v_blocks_faq_bgc("bgc").default("inherit"),
    tc: enum__product_pages_v_blocks_faq_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_faq_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_faq_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("faq"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_faq_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_product_pages_v_blocks_faq_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_product_pages_v_blocks_faq_path_idx").on(columns._path),
    _product_pages_v_blocks_faq_faq_cta_idx: index(
      "_product_pages_v_blocks_faq_faq_cta_idx",
    ).on(columns.faqCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_faq_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_about_benefits = pgTable(
  "_product_pages_v_blocks_about_benefits",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    title: varchar("title").default(""),
    description: varchar("description").default(""),
    icon: enum__product_pages_v_blocks_about_benefits_icon("icon"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_about_benefits_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_product_pages_v_blocks_about_benefits_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v_blocks_about.id],
      name: "_product_pages_v_blocks_about_benefits_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_about = pgTable(
  "_product_pages_v_blocks_about",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__product_pages_v_blocks_about_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle"),
    description: jsonb("description"),
    isInverted: boolean("is_inverted").default(false),
    idHref: varchar("id_href").default("o-nas"),
    tc: enum__product_pages_v_blocks_about_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_about_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_about_dc("dc").default("inherit"),
    bgc: enum__product_pages_v_blocks_about_bgc("bgc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_about_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_product_pages_v_blocks_about_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_product_pages_v_blocks_about_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_about_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_testimonials = pgTable(
  "_product_pages_v_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__product_pages_v_blocks_testimonials_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    bgc: enum__product_pages_v_blocks_testimonials_bgc("bgc").default(
      "inherit",
    ),
    tc: enum__product_pages_v_blocks_testimonials_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_testimonials_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_testimonials_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    googleReviewCta: integer("google_review_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    idHref: varchar("id_href").default("mnenja"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_testimonials_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_product_pages_v_blocks_testimonials_parent_id_idx",
    ).on(columns._parentID),
    _pathIdx: index("_product_pages_v_blocks_testimonials_path_idx").on(
      columns._path,
    ),
    _product_pages_v_blocks_testimonials_google_review_cta_idx: index(
      "_product_pages_v_blocks_testimonials_google_review_cta_idx",
    ).on(columns.googleReviewCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_gallery = pgTable(
  "_product_pages_v_blocks_gallery",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__product_pages_v_blocks_gallery_template("template").default(
        "default",
      ),
    autoSyncMedia: boolean("auto_sync_media").default(false),
    kicker: varchar("kicker").default(""),
    title: varchar("title").default(""),
    subtitle: varchar("subtitle").default(""),
    galleryCta: integer("gallery_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__product_pages_v_blocks_gallery_bgc("bgc").default("inherit"),
    tc: enum__product_pages_v_blocks_gallery_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_gallery_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_gallery_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("galerija"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_gallery_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_product_pages_v_blocks_gallery_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_product_pages_v_blocks_gallery_path_idx").on(
      columns._path,
    ),
    _product_pages_v_blocks_gallery_gallery_cta_idx: index(
      "_product_pages_v_blocks_gallery_gallery_cta_idx",
    ).on(columns.galleryCta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_gallery_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v_blocks_cta_block = pgTable(
  "_product_pages_v_blocks_cta_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    template:
      enum__product_pages_v_blocks_cta_block_template("template").default(
        "default",
      ),
    kicker: varchar("kicker").default(""),
    title: varchar("title"),
    subtitle: varchar("subtitle"),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    bgc: enum__product_pages_v_blocks_cta_block_bgc("bgc").default("inherit"),
    tc: enum__product_pages_v_blocks_cta_block_tc("tc").default("inherit"),
    sc: enum__product_pages_v_blocks_cta_block_sc("sc").default("inherit"),
    dc: enum__product_pages_v_blocks_cta_block_dc("dc").default("inherit"),
    isTransparent: boolean("is_transparent").default(false),
    idHref: varchar("id_href").default("cta"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_product_pages_v_blocks_cta_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_product_pages_v_blocks_cta_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_product_pages_v_blocks_cta_block_path_idx").on(
      columns._path,
    ),
    _product_pages_v_blocks_cta_block_cta_idx: index(
      "_product_pages_v_blocks_cta_block_cta_idx",
    ).on(columns.cta),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_blocks_cta_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _product_pages_v = pgTable(
  "_product_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => product_pages.id, {
      onDelete: "set null",
    }),
    version_slug: varchar("version_slug"),
    version_products: integer("version_products_id").references(
      () => products.id,
      {
        onDelete: "set null",
      },
    ),
    version_title: varchar("version_title"),
    version_pageType: varchar("version_page_type").default("product"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_description: varchar("version_meta_description"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__product_pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _product_pages_v_parent_idx: index("_product_pages_v_parent_idx").on(
      columns.parent,
    ),
    _product_pages_v_version_version_slug_idx: index(
      "_product_pages_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _product_pages_v_version_version_products_idx: index(
      "_product_pages_v_version_version_products_idx",
    ).on(columns.version_products),
    _product_pages_v_version_meta_version_meta_image_idx: index(
      "_product_pages_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _product_pages_v_version_version_updated_at_idx: index(
      "_product_pages_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _product_pages_v_version_version_created_at_idx: index(
      "_product_pages_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _product_pages_v_version_version__status_idx: index(
      "_product_pages_v_version_version__status_idx",
    ).on(columns.version__status),
    _product_pages_v_created_at_idx: index(
      "_product_pages_v_created_at_idx",
    ).on(columns.createdAt),
    _product_pages_v_updated_at_idx: index(
      "_product_pages_v_updated_at_idx",
    ).on(columns.updatedAt),
    _product_pages_v_latest_idx: index("_product_pages_v_latest_idx").on(
      columns.latest,
    ),
    _product_pages_v_autosave_idx: index("_product_pages_v_autosave_idx").on(
      columns.autosave,
    ),
  }),
);

export const _product_pages_v_rels = pgTable(
  "_product_pages_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    ctasID: integer("ctas_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    testimonialsID: integer("testimonials_id"),
    "faq-itemsID": integer("faq_items_id"),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("_product_pages_v_rels_order_idx").on(columns.order),
    parentIdx: index("_product_pages_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_product_pages_v_rels_path_idx").on(columns.path),
    _product_pages_v_rels_ctas_id_idx: index(
      "_product_pages_v_rels_ctas_id_idx",
    ).on(columns.ctasID),
    _product_pages_v_rels_high_quality_media_id_idx: index(
      "_product_pages_v_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    _product_pages_v_rels_testimonials_id_idx: index(
      "_product_pages_v_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    _product_pages_v_rels_faq_items_id_idx: index(
      "_product_pages_v_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    _product_pages_v_rels_media_id_idx: index(
      "_product_pages_v_rels_media_id_idx",
    ).on(columns.mediaID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_product_pages_v.id],
      name: "_product_pages_v_rels_parent_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "_product_pages_v_rels_ctas_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "_product_pages_v_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "_product_pages_v_rels_testimonials_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "_product_pages_v_rels_faq_items_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_product_pages_v_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const redirects = pgTable(
  "redirects",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    from: varchar("from").notNull(),
    to: varchar("to").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_tenant_idx: index("redirects_tenant_idx").on(columns.tenant),
    redirects_from_idx: uniqueIndex("redirects_from_idx").on(columns.from),
    redirects_updated_at_idx: index("redirects_updated_at_idx").on(
      columns.updatedAt,
    ),
    redirects_created_at_idx: index("redirects_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const pricelists = pgTable(
  "pricelists",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    name: varchar("name").notNull(),
    priceListType: enum_pricelists_price_list_type("price_list_type")
      .notNull()
      .default("service"),
    description: jsonb("description"),
    callToAction: integer("call_to_action_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pricelists_tenant_idx: index("pricelists_tenant_idx").on(columns.tenant),
    pricelists_call_to_action_idx: index("pricelists_call_to_action_idx").on(
      columns.callToAction,
    ),
    pricelists_updated_at_idx: index("pricelists_updated_at_idx").on(
      columns.updatedAt,
    ),
    pricelists_created_at_idx: index("pricelists_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const pricelists_rels = pgTable(
  "pricelists_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    "price-list-sectionsID": integer("price_list_sections_id"),
  },
  (columns) => ({
    order: index("pricelists_rels_order_idx").on(columns.order),
    parentIdx: index("pricelists_rels_parent_idx").on(columns.parent),
    pathIdx: index("pricelists_rels_path_idx").on(columns.path),
    pricelists_rels_price_list_sections_id_idx: index(
      "pricelists_rels_price_list_sections_id_idx",
    ).on(columns["price-list-sectionsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [pricelists.id],
      name: "pricelists_rels_parent_fk",
    }).onDelete("cascade"),
    "price-list-sectionsIdFk": foreignKey({
      columns: [columns["price-list-sectionsID"]],
      foreignColumns: [price_list_sections.id],
      name: "pricelists_rels_price_list_sections_fk",
    }).onDelete("cascade"),
  }),
);

export const price_list_sections = pgTable(
  "price_list_sections",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    name: varchar("name").notNull(),
    description: varchar("description"),
    displayOrder: numeric("display_order"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    price_list_sections_tenant_idx: index("price_list_sections_tenant_idx").on(
      columns.tenant,
    ),
    price_list_sections_updated_at_idx: index(
      "price_list_sections_updated_at_idx",
    ).on(columns.updatedAt),
    price_list_sections_created_at_idx: index(
      "price_list_sections_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const price_list_items = pgTable(
  "price_list_items",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    name: varchar("name").notNull(),
    description: varchar("description"),
    price: varchar("price").notNull(),
    section: integer("section_id")
      .notNull()
      .references(() => price_list_sections.id, {
        onDelete: "set null",
      }),
    displayOrder: numeric("display_order"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    price_list_items_tenant_idx: index("price_list_items_tenant_idx").on(
      columns.tenant,
    ),
    price_list_items_section_idx: index("price_list_items_section_idx").on(
      columns.section,
    ),
    price_list_items_updated_at_idx: index(
      "price_list_items_updated_at_idx",
    ).on(columns.updatedAt),
    price_list_items_created_at_idx: index(
      "price_list_items_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const banners = pgTable(
  "banners",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    internalName: varchar("internal_name").notNull(),
    content: jsonb("content").notNull(),
    isActive: boolean("is_active").default(false),
    startDate: timestamp("start_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    endDate: timestamp("end_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    cta: integer("cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    banners_tenant_idx: index("banners_tenant_idx").on(columns.tenant),
    banners_cta_idx: index("banners_cta_idx").on(columns.cta),
    banners_updated_at_idx: index("banners_updated_at_idx").on(
      columns.updatedAt,
    ),
    banners_created_at_idx: index("banners_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const menus_menu_items_children = pgTable(
  "menus_menu_items_children",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    href: varchar("href"),
    description: varchar("description"),
    icon: enum_menus_menu_items_children_icon("icon"),
  },
  (columns) => ({
    _orderIdx: index("menus_menu_items_children_order_idx").on(columns._order),
    _parentIDIdx: index("menus_menu_items_children_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [menus_menu_items.id],
      name: "menus_menu_items_children_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const menus_menu_items = pgTable(
  "menus_menu_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title").notNull(),
    hasChildren: boolean("has_children").default(false),
    href: varchar("href"),
  },
  (columns) => ({
    _orderIdx: index("menus_menu_items_order_idx").on(columns._order),
    _parentIDIdx: index("menus_menu_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [menus.id],
      name: "menus_menu_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const menus = pgTable(
  "menus",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    title: varchar("title").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    menus_tenant_idx: index("menus_tenant_idx").on(columns.tenant),
    menus_slug_idx: uniqueIndex("menus_slug_idx").on(columns.slug),
    menus_updated_at_idx: index("menus_updated_at_idx").on(columns.updatedAt),
    menus_created_at_idx: index("menus_created_at_idx").on(columns.createdAt),
  }),
);

export const products_variant_option_types = pgTable(
  "products_variant_option_types",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
    label: varchar("label"),
  },
  (columns) => ({
    _orderIdx: index("products_variant_option_types_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("products_variant_option_types_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_variant_option_types_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_technical_specs = pgTable(
  "products_technical_specs",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("products_technical_specs_order_idx").on(columns._order),
    _parentIDIdx: index("products_technical_specs_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_technical_specs_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_highlights = pgTable(
  "products_highlights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    highlight: varchar("highlight").notNull(),
  },
  (columns) => ({
    _orderIdx: index("products_highlights_order_idx").on(columns._order),
    _parentIDIdx: index("products_highlights_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_highlights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products = pgTable(
  "products",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug").notNull(),
    collection: integer("collection_id")
      .notNull()
      .references(() => collections.id, {
        onDelete: "set null",
      }),
    hasVariants: boolean("has_variants").default(false),
    title: varchar("title").notNull(),
    sku: varchar("sku").notNull(),
    manufacturer: varchar("manufacturer"),
    type: enum_products_type("type"),
    shortDescription: varchar("short_description"),
    longDescription: jsonb("long_description"),
    price: numeric("price"),
    inStock: boolean("in_stock").default(true),
    mountingIncluded: boolean("mounting_included").default(true),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    rating: numeric("rating").default("0"),
    ratingCount: numeric("rating_count").default("0"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    products_slug_idx: uniqueIndex("products_slug_idx").on(columns.slug),
    products_collection_idx: index("products_collection_idx").on(
      columns.collection,
    ),
    products_sku_idx: uniqueIndex("products_sku_idx").on(columns.sku),
    products_image_idx: index("products_image_idx").on(columns.image),
    products_updated_at_idx: index("products_updated_at_idx").on(
      columns.updatedAt,
    ),
    products_created_at_idx: index("products_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const products_rels = pgTable(
  "products_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
  },
  (columns) => ({
    order: index("products_rels_order_idx").on(columns.order),
    parentIdx: index("products_rels_parent_idx").on(columns.parent),
    pathIdx: index("products_rels_path_idx").on(columns.path),
    products_rels_media_id_idx: index("products_rels_media_id_idx").on(
      columns.mediaID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [products.id],
      name: "products_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "products_rels_media_fk",
    }).onDelete("cascade"),
  }),
);

export const product_variants_variant_options = pgTable(
  "product_variants_variant_options",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("product_variants_variant_options_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("product_variants_variant_options_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [product_variants.id],
      name: "product_variants_variant_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const product_variants = pgTable(
  "product_variants",
  {
    id: serial("id").primaryKey(),
    product: integer("product_id")
      .notNull()
      .references(() => products.id, {
        onDelete: "set null",
      }),
    displayName: varchar("display_name"),
    variantSku: varchar("variant_sku").notNull(),
    price: numeric("price"),
    inStock: boolean("in_stock").default(true),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    product_variants_product_idx: index("product_variants_product_idx").on(
      columns.product,
    ),
    product_variants_variant_sku_idx: uniqueIndex(
      "product_variants_variant_sku_idx",
    ).on(columns.variantSku),
    product_variants_image_idx: index("product_variants_image_idx").on(
      columns.image,
    ),
    product_variants_updated_at_idx: index(
      "product_variants_updated_at_idx",
    ).on(columns.updatedAt),
    product_variants_created_at_idx: index(
      "product_variants_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const collections = pgTable(
  "collections",
  {
    id: serial("id").primaryKey(),
    slug: varchar("slug").notNull(),
    title: varchar("title").notNull(),
    description: jsonb("description"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    isActive: boolean("is_active").default(true),
    sortOrder: numeric("sort_order"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    collections_slug_idx: uniqueIndex("collections_slug_idx").on(columns.slug),
    collections_image_idx: index("collections_image_idx").on(columns.image),
    collections_updated_at_idx: index("collections_updated_at_idx").on(
      columns.updatedAt,
    ),
    collections_created_at_idx: index("collections_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const posts_populated_authors = pgTable(
  "posts_populated_authors",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name"),
  },
  (columns) => ({
    _orderIdx: index("posts_populated_authors_order_idx").on(columns._order),
    _parentIDIdx: index("posts_populated_authors_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [posts.id],
      name: "posts_populated_authors_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const posts = pgTable(
  "posts",
  {
    id: serial("id").primaryKey(),
    title: varchar("title"),
    heroImage: integer("hero_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    content: jsonb("content"),
    meta_title: varchar("meta_title"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_description: varchar("meta_description"),
    publishedAt: timestamp("published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status("_status").default("draft"),
  },
  (columns) => ({
    posts_hero_image_idx: index("posts_hero_image_idx").on(columns.heroImage),
    posts_meta_meta_image_idx: index("posts_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    posts_slug_idx: index("posts_slug_idx").on(columns.slug),
    posts_meta_meta_image_1_idx: index("posts_meta_meta_image_1_idx").on(
      columns.meta_image,
    ),
    posts_updated_at_idx: index("posts_updated_at_idx").on(columns.updatedAt),
    posts_created_at_idx: index("posts_created_at_idx").on(columns.createdAt),
    posts__status_idx: index("posts__status_idx").on(columns._status),
  }),
);

export const posts_rels = pgTable(
  "posts_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("posts_rels_order_idx").on(columns.order),
    parentIdx: index("posts_rels_parent_idx").on(columns.parent),
    pathIdx: index("posts_rels_path_idx").on(columns.path),
    posts_rels_posts_id_idx: index("posts_rels_posts_id_idx").on(
      columns.postsID,
    ),
    posts_rels_users_id_idx: index("posts_rels_users_id_idx").on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [posts.id],
      name: "posts_rels_parent_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "posts_rels_posts_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "posts_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v_version_populated_authors = pgTable(
  "_posts_v_version_populated_authors",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
    name: varchar("name"),
  },
  (columns) => ({
    _orderIdx: index("_posts_v_version_populated_authors_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_posts_v_version_populated_authors_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_version_populated_authors_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _posts_v = pgTable(
  "_posts_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => posts.id, {
      onDelete: "set null",
    }),
    version_title: varchar("version_title"),
    version_heroImage: integer("version_hero_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_content: jsonb("version_content"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_meta_description: varchar("version_meta_description"),
    version_publishedAt: timestamp("version_published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar("version_slug"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__posts_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _posts_v_parent_idx: index("_posts_v_parent_idx").on(columns.parent),
    _posts_v_version_version_hero_image_idx: index(
      "_posts_v_version_version_hero_image_idx",
    ).on(columns.version_heroImage),
    _posts_v_version_meta_version_meta_image_idx: index(
      "_posts_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index(
      "_posts_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _posts_v_version_meta_version_meta_image_1_idx: index(
      "_posts_v_version_meta_version_meta_image_1_idx",
    ).on(columns.version_meta_image),
    _posts_v_version_version_updated_at_idx: index(
      "_posts_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _posts_v_version_version_created_at_idx: index(
      "_posts_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _posts_v_version_version__status_idx: index(
      "_posts_v_version_version__status_idx",
    ).on(columns.version__status),
    _posts_v_created_at_idx: index("_posts_v_created_at_idx").on(
      columns.createdAt,
    ),
    _posts_v_updated_at_idx: index("_posts_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _posts_v_latest_idx: index("_posts_v_latest_idx").on(columns.latest),
    _posts_v_autosave_idx: index("_posts_v_autosave_idx").on(columns.autosave),
  }),
);

export const _posts_v_rels = pgTable(
  "_posts_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    postsID: integer("posts_id"),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("_posts_v_rels_order_idx").on(columns.order),
    parentIdx: index("_posts_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_posts_v_rels_path_idx").on(columns.path),
    _posts_v_rels_posts_id_idx: index("_posts_v_rels_posts_id_idx").on(
      columns.postsID,
    ),
    _posts_v_rels_users_id_idx: index("_posts_v_rels_users_id_idx").on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_posts_v.id],
      name: "_posts_v_rels_parent_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "_posts_v_rels_posts_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "_posts_v_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const customers = pgTable(
  "customers",
  {
    id: serial("id").primaryKey(),
    firstName: varchar("first_name").notNull(),
    lastName: varchar("last_name").notNull(),
    fullName: varchar("full_name"),
    email: varchar("email").notNull(),
    phone: varchar("phone"),
    address_streetAddress: varchar("address_street_address").notNull(),
    address_postalCode: varchar("address_postal_code").notNull(),
    address_town: varchar("address_town").notNull(),
    address_country: varchar("address_country").default("Slovenija"),
    customerNotes: varchar("customer_notes"),
    gdprConsent: boolean("gdpr_consent").default(false),
    marketingConsent: boolean("marketing_consent").default(false),
    customerType:
      enum_customers_customer_type("customer_type").default("individual"),
    companyInfo_companyName: varchar("company_info_company_name"),
    companyInfo_taxNumber: varchar("company_info_tax_number"),
    companyInfo_registrationNumber: varchar("company_info_registration_number"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    customers_email_idx: uniqueIndex("customers_email_idx").on(columns.email),
    customers_updated_at_idx: index("customers_updated_at_idx").on(
      columns.updatedAt,
    ),
    customers_created_at_idx: index("customers_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const orders = pgTable(
  "orders",
  {
    id: serial("id").primaryKey(),
    customerData_firstName: varchar("customer_data_first_name"),
    customerData_lastName: varchar("customer_data_last_name"),
    customerData_email: varchar("customer_data_email"),
    customerData_phone: varchar("customer_data_phone"),
    customerData_streetAddress: varchar("customer_data_street_address"),
    customerData_postalCode: varchar("customer_data_postal_code"),
    customerData_town: varchar("customer_data_town"),
    customerData_message: varchar("customer_data_message"),
    orderNumber: varchar("order_number").notNull(),
    status: enum_orders_status("status").notNull().default("pending"),
    customer: integer("customer_id")
      .notNull()
      .references(() => customers.id, {
        onDelete: "set null",
      }),
    product: integer("product_id")
      .notNull()
      .references(() => products.id, {
        onDelete: "set null",
      }),
    quantity: numeric("quantity").notNull().default("1"),
    unitPrice: numeric("unit_price"),
    total: numeric("total"),
    customerMessage: varchar("customer_message"),
    adminNotes: varchar("admin_notes"),
    publicNotes: varchar("public_notes"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    source: enum_orders_source("source").default("website"),
  },
  (columns) => ({
    orders_order_number_idx: uniqueIndex("orders_order_number_idx").on(
      columns.orderNumber,
    ),
    orders_customer_idx: index("orders_customer_idx").on(columns.customer),
    orders_product_idx: index("orders_product_idx").on(columns.product),
    orders_updated_at_idx: index("orders_updated_at_idx").on(columns.updatedAt),
    orders_created_at_idx: index("orders_created_at_idx").on(columns.createdAt),
  }),
);

export const business_info_platforms = pgTable(
  "business_info_platforms",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    platform: enum_business_info_platforms_platform("platform").notNull(),
    url: varchar("url").notNull(),
  },
  (columns) => ({
    _orderIdx: index("business_info_platforms_order_idx").on(columns._order),
    _parentIDIdx: index("business_info_platforms_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [business_info.id],
      name: "business_info_platforms_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const business_info = pgTable(
  "business_info",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    companyName: varchar("company_name").notNull(),
    companyAbout: varchar("company_about"),
    vatId: varchar("vat_id"),
    businessId: varchar("business_id"),
    registryDate: timestamp("registry_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    address: varchar("address"),
    phone: varchar("phone"),
    email: varchar("email"),
    logo: integer("logo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    logoLight: integer("logo_light_id").references(() => media.id, {
      onDelete: "set null",
    }),
    coordinates_latitude: numeric("coordinates_latitude")
      .notNull()
      .default("46.2191697"),
    coordinates_longitude: numeric("coordinates_longitude")
      .notNull()
      .default("15.4705641"),
    radius: numeric("radius"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    business_info_tenant_idx: uniqueIndex("business_info_tenant_idx").on(
      columns.tenant,
    ),
    business_info_logo_idx: index("business_info_logo_idx").on(columns.logo),
    business_info_logo_light_idx: index("business_info_logo_light_idx").on(
      columns.logoLight,
    ),
    business_info_updated_at_idx: index("business_info_updated_at_idx").on(
      columns.updatedAt,
    ),
    business_info_created_at_idx: index("business_info_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const navbar = pgTable(
  "navbar",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    showLogoImage: boolean("show_logo_image").default(true),
    showLogoText: boolean("show_logo_text").default(true),
    isTransparent: boolean("is_transparent").default(false),
    isFixed: boolean("is_fixed").default(true),
    mainMenu: integer("main_menu_id")
      .notNull()
      .references(() => menus.id, {
        onDelete: "set null",
      }),
    mainCta: integer("main_cta_id").references(() => ctas.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    navbar_tenant_idx: uniqueIndex("navbar_tenant_idx").on(columns.tenant),
    navbar_main_menu_idx: index("navbar_main_menu_idx").on(columns.mainMenu),
    navbar_main_cta_idx: index("navbar_main_cta_idx").on(columns.mainCta),
    navbar_updated_at_idx: index("navbar_updated_at_idx").on(columns.updatedAt),
    navbar_created_at_idx: index("navbar_created_at_idx").on(columns.createdAt),
  }),
);

export const footer_blocks_menu_section = pgTable(
  "footer_blocks_menu_section",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    title: varchar("title"),
    menu: integer("menu_id")
      .notNull()
      .references(() => menus.id, {
        onDelete: "set null",
      }),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("footer_blocks_menu_section_order_idx").on(columns._order),
    _parentIDIdx: index("footer_blocks_menu_section_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("footer_blocks_menu_section_path_idx").on(columns._path),
    footer_blocks_menu_section_menu_idx: index(
      "footer_blocks_menu_section_menu_idx",
    ).on(columns.menu),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer.id],
      name: "footer_blocks_menu_section_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer = pgTable(
  "footer",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    copyrightText: varchar("copyright_text").default(
      "© {{year}} Vse pravice pridržane.",
    ),
    showLogoText: boolean("show_logo_text").default(true),
    showContactInFooter: boolean("show_contact_in_footer").default(true),
    socialMenu: integer("social_menu_id").references(() => menus.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    footer_tenant_idx: uniqueIndex("footer_tenant_idx").on(columns.tenant),
    footer_social_menu_idx: index("footer_social_menu_idx").on(
      columns.socialMenu,
    ),
    footer_updated_at_idx: index("footer_updated_at_idx").on(columns.updatedAt),
    footer_created_at_idx: index("footer_created_at_idx").on(columns.createdAt),
  }),
);

export const tenants_typography_heading_font_weights = pgTable(
  "tenants_typography_heading_font_weights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    weight: varchar("weight").notNull(),
  },
  (columns) => ({
    _orderIdx: index("tenants_typography_heading_font_weights_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "tenants_typography_heading_font_weights_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [tenants.id],
      name: "tenants_typography_heading_font_weights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const tenants_typography_heading_font_subsets = pgTable(
  "tenants_typography_heading_font_subsets",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    subset: varchar("subset").notNull(),
  },
  (columns) => ({
    _orderIdx: index("tenants_typography_heading_font_subsets_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "tenants_typography_heading_font_subsets_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [tenants.id],
      name: "tenants_typography_heading_font_subsets_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const tenants_typography_body_font_weights = pgTable(
  "tenants_typography_body_font_weights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    weight: varchar("weight").notNull(),
  },
  (columns) => ({
    _orderIdx: index("tenants_typography_body_font_weights_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "tenants_typography_body_font_weights_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [tenants.id],
      name: "tenants_typography_body_font_weights_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const tenants_typography_body_font_subsets = pgTable(
  "tenants_typography_body_font_subsets",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    subset: varchar("subset").notNull(),
  },
  (columns) => ({
    _orderIdx: index("tenants_typography_body_font_subsets_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "tenants_typography_body_font_subsets_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [tenants.id],
      name: "tenants_typography_body_font_subsets_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const tenants = pgTable(
  "tenants",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    domain: varchar("domain"),
    slug: varchar("slug").notNull(),
    allowPublicRead: boolean("allow_public_read").default(false),
    colors_primary: varchar("colors_primary").default(
      "oklch(0.82 0.1663 83.77)",
    ),
    colors_primaryForeground: varchar("colors_primary_foreground").default(
      "oklch(0.985 0 0)",
    ),
    colors_secondary: varchar("colors_secondary").default(
      "oklch(0.32 0.1025 253.89)",
    ),
    colors_secondaryForeground: varchar("colors_secondary_foreground").default(
      "oklch(0.98 0.005 0)",
    ),
    colors_accent: varchar("colors_accent").default("oklch(0.77 0.1687 67.36)"),
    colors_accentForeground: varchar("colors_accent_foreground").default(
      "oklch(0.205 0 0)",
    ),
    colors_background: varchar("colors_background").default("oklch(1 0 0)"),
    colors_foreground: varchar("colors_foreground").default("oklch(0.145 0 0)"),
    radius: varchar("radius").default("0.625rem"),
    typography_headingFont_name: enum_tenants_typography_heading_font_name(
      "typography_heading_font_name",
    )
      .notNull()
      .default("Inter"),
    typography_bodyFont_name: enum_tenants_typography_body_font_name(
      "typography_body_font_name",
    )
      .notNull()
      .default("Inter"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenants_slug_idx: uniqueIndex("tenants_slug_idx").on(columns.slug),
    tenants_allow_public_read_idx: index("tenants_allow_public_read_idx").on(
      columns.allowPublicRead,
    ),
    tenants_updated_at_idx: index("tenants_updated_at_idx").on(
      columns.updatedAt,
    ),
    tenants_created_at_idx: index("tenants_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const forms_blocks_checkbox = pgTable(
  "forms_blocks_checkbox",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    defaultValue: boolean("default_value"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_checkbox_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_checkbox_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_checkbox_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_checkbox_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_country = pgTable(
  "forms_blocks_country",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_country_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_country_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_country_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_country_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_email = pgTable(
  "forms_blocks_email",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_email_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_email_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_email_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_email_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_message = pgTable(
  "forms_blocks_message",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    message: jsonb("message"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_message_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_message_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_message_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_message_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_number = pgTable(
  "forms_blocks_number",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: numeric("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_number_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_number_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_number_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_number_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select_options = pgTable(
  "forms_blocks_select_options",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_select_options_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("forms_blocks_select_options_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_select.id],
      name: "forms_blocks_select_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select = pgTable(
  "forms_blocks_select",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: varchar("default_value"),
    placeholder: varchar("placeholder"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_select_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_select_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_select_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_select_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_state = pgTable(
  "forms_blocks_state",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_state_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_state_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_state_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_state_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_text = pgTable(
  "forms_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: varchar("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_textarea = pgTable(
  "forms_blocks_textarea",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: varchar("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_textarea_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_textarea_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_textarea_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_textarea_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_emails = pgTable(
  "forms_emails",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    emailTo: varchar("email_to"),
    cc: varchar("cc"),
    bcc: varchar("bcc"),
    replyTo: varchar("reply_to"),
    emailFrom: varchar("email_from"),
    subject: varchar("subject")
      .notNull()
      .default("You've received a new message."),
    message: jsonb("message"),
  },
  (columns) => ({
    _orderIdx: index("forms_emails_order_idx").on(columns._order),
    _parentIDIdx: index("forms_emails_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_emails_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms = pgTable(
  "forms",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    title: varchar("title").notNull(),
    submitButtonLabel: varchar("submit_button_label"),
    confirmationType:
      enum_forms_confirmation_type("confirmation_type").default("message"),
    confirmationMessage: jsonb("confirmation_message"),
    redirect_type:
      enum_forms_redirect_type("redirect_type").default("reference"),
    redirect_url: varchar("redirect_url"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_tenant_idx: index("forms_tenant_idx").on(columns.tenant),
    forms_updated_at_idx: index("forms_updated_at_idx").on(columns.updatedAt),
    forms_created_at_idx: index("forms_created_at_idx").on(columns.createdAt),
  }),
);

export const forms_rels = pgTable(
  "forms_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    "service-pagesID": integer("service_pages_id"),
  },
  (columns) => ({
    order: index("forms_rels_order_idx").on(columns.order),
    parentIdx: index("forms_rels_parent_idx").on(columns.parent),
    pathIdx: index("forms_rels_path_idx").on(columns.path),
    forms_rels_pages_id_idx: index("forms_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    forms_rels_service_pages_id_idx: index(
      "forms_rels_service_pages_id_idx",
    ).on(columns["service-pagesID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [forms.id],
      name: "forms_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "forms_rels_pages_fk",
    }).onDelete("cascade"),
    "service-pagesIdFk": foreignKey({
      columns: [columns["service-pagesID"]],
      foreignColumns: [service_pages.id],
      name: "forms_rels_service_pages_fk",
    }).onDelete("cascade"),
  }),
);

export const form_submissions_submission_data = pgTable(
  "form_submissions_submission_data",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    field: varchar("field").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("form_submissions_submission_data_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("form_submissions_submission_data_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [form_submissions.id],
      name: "form_submissions_submission_data_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const form_submissions = pgTable(
  "form_submissions",
  {
    id: serial("id").primaryKey(),
    tenant: integer("tenant_id").references(() => tenants.id, {
      onDelete: "set null",
    }),
    form: integer("form_id")
      .notNull()
      .references(() => forms.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_tenant_idx: index("form_submissions_tenant_idx").on(
      columns.tenant,
    ),
    form_submissions_form_idx: index("form_submissions_form_idx").on(
      columns.form,
    ),
    form_submissions_updated_at_idx: index(
      "form_submissions_updated_at_idx",
    ).on(columns.updatedAt),
    form_submissions_created_at_idx: index(
      "form_submissions_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_jobs_log = pgTable(
  "payload_jobs_log",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    executedAt: timestamp("executed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp("completed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug("task_slug").notNull(),
    taskID: varchar("task_i_d").notNull(),
    input: jsonb("input"),
    output: jsonb("output"),
    state: enum_payload_jobs_log_state("state").notNull(),
    error: jsonb("error"),
  },
  (columns) => ({
    _orderIdx: index("payload_jobs_log_order_idx").on(columns._order),
    _parentIDIdx: index("payload_jobs_log_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_jobs_log_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_jobs = pgTable(
  "payload_jobs",
  {
    id: serial("id").primaryKey(),
    input: jsonb("input"),
    completedAt: timestamp("completed_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    totalTried: numeric("total_tried").default("0"),
    hasError: boolean("has_error").default(false),
    error: jsonb("error"),
    taskSlug: enum_payload_jobs_task_slug("task_slug"),
    queue: varchar("queue").default("default"),
    waitUntil: timestamp("wait_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    processing: boolean("processing").default(false),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index("payload_jobs_completed_at_idx").on(
      columns.completedAt,
    ),
    payload_jobs_total_tried_idx: index("payload_jobs_total_tried_idx").on(
      columns.totalTried,
    ),
    payload_jobs_has_error_idx: index("payload_jobs_has_error_idx").on(
      columns.hasError,
    ),
    payload_jobs_task_slug_idx: index("payload_jobs_task_slug_idx").on(
      columns.taskSlug,
    ),
    payload_jobs_queue_idx: index("payload_jobs_queue_idx").on(columns.queue),
    payload_jobs_wait_until_idx: index("payload_jobs_wait_until_idx").on(
      columns.waitUntil,
    ),
    payload_jobs_processing_idx: index("payload_jobs_processing_idx").on(
      columns.processing,
    ),
    payload_jobs_updated_at_idx: index("payload_jobs_updated_at_idx").on(
      columns.updatedAt,
    ),
    payload_jobs_created_at_idx: index("payload_jobs_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    highQualityMediaID: integer("high_quality_media_id"),
    machineryID: integer("machinery_id"),
    servicesID: integer("services_id"),
    testimonialsID: integer("testimonials_id"),
    "faq-itemsID": integer("faq_items_id"),
    ctasID: integer("ctas_id"),
    projectsID: integer("projects_id"),
    "opening-hoursID": integer("opening_hours_id"),
    sub_servicesID: integer("sub_services_id"),
    pagesID: integer("pages_id"),
    "service-pagesID": integer("service_pages_id"),
    "project-pagesID": integer("project_pages_id"),
    "product-pagesID": integer("product_pages_id"),
    redirectsID: integer("redirects_id"),
    pricelistsID: integer("pricelists_id"),
    "price-list-sectionsID": integer("price_list_sections_id"),
    "price-list-itemsID": integer("price_list_items_id"),
    bannersID: integer("banners_id"),
    menusID: integer("menus_id"),
    productsID: integer("products_id"),
    "product-variantsID": integer("product_variants_id"),
    collectionsID: integer("collections_id"),
    postsID: integer("posts_id"),
    customersID: integer("customers_id"),
    ordersID: integer("orders_id"),
    "business-infoID": integer("business_info_id"),
    navbarID: integer("navbar_id"),
    footerID: integer("footer_id"),
    tenantsID: integer("tenants_id"),
    formsID: integer("forms_id"),
    "form-submissionsID": integer("form_submissions_id"),
    "payload-jobsID": integer("payload_jobs_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_high_quality_media_id_idx: index(
      "payload_locked_documents_rels_high_quality_media_id_idx",
    ).on(columns.highQualityMediaID),
    payload_locked_documents_rels_machinery_id_idx: index(
      "payload_locked_documents_rels_machinery_id_idx",
    ).on(columns.machineryID),
    payload_locked_documents_rels_services_id_idx: index(
      "payload_locked_documents_rels_services_id_idx",
    ).on(columns.servicesID),
    payload_locked_documents_rels_testimonials_id_idx: index(
      "payload_locked_documents_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    payload_locked_documents_rels_faq_items_id_idx: index(
      "payload_locked_documents_rels_faq_items_id_idx",
    ).on(columns["faq-itemsID"]),
    payload_locked_documents_rels_ctas_id_idx: index(
      "payload_locked_documents_rels_ctas_id_idx",
    ).on(columns.ctasID),
    payload_locked_documents_rels_projects_id_idx: index(
      "payload_locked_documents_rels_projects_id_idx",
    ).on(columns.projectsID),
    payload_locked_documents_rels_opening_hours_id_idx: index(
      "payload_locked_documents_rels_opening_hours_id_idx",
    ).on(columns["opening-hoursID"]),
    payload_locked_documents_rels_sub_services_id_idx: index(
      "payload_locked_documents_rels_sub_services_id_idx",
    ).on(columns.sub_servicesID),
    payload_locked_documents_rels_pages_id_idx: index(
      "payload_locked_documents_rels_pages_id_idx",
    ).on(columns.pagesID),
    payload_locked_documents_rels_service_pages_id_idx: index(
      "payload_locked_documents_rels_service_pages_id_idx",
    ).on(columns["service-pagesID"]),
    payload_locked_documents_rels_project_pages_id_idx: index(
      "payload_locked_documents_rels_project_pages_id_idx",
    ).on(columns["project-pagesID"]),
    payload_locked_documents_rels_product_pages_id_idx: index(
      "payload_locked_documents_rels_product_pages_id_idx",
    ).on(columns["product-pagesID"]),
    payload_locked_documents_rels_redirects_id_idx: index(
      "payload_locked_documents_rels_redirects_id_idx",
    ).on(columns.redirectsID),
    payload_locked_documents_rels_pricelists_id_idx: index(
      "payload_locked_documents_rels_pricelists_id_idx",
    ).on(columns.pricelistsID),
    payload_locked_documents_rels_price_list_sections_id_idx: index(
      "payload_locked_documents_rels_price_list_sections_id_idx",
    ).on(columns["price-list-sectionsID"]),
    payload_locked_documents_rels_price_list_items_id_idx: index(
      "payload_locked_documents_rels_price_list_items_id_idx",
    ).on(columns["price-list-itemsID"]),
    payload_locked_documents_rels_banners_id_idx: index(
      "payload_locked_documents_rels_banners_id_idx",
    ).on(columns.bannersID),
    payload_locked_documents_rels_menus_id_idx: index(
      "payload_locked_documents_rels_menus_id_idx",
    ).on(columns.menusID),
    payload_locked_documents_rels_products_id_idx: index(
      "payload_locked_documents_rels_products_id_idx",
    ).on(columns.productsID),
    payload_locked_documents_rels_product_variants_id_idx: index(
      "payload_locked_documents_rels_product_variants_id_idx",
    ).on(columns["product-variantsID"]),
    payload_locked_documents_rels_collections_id_idx: index(
      "payload_locked_documents_rels_collections_id_idx",
    ).on(columns.collectionsID),
    payload_locked_documents_rels_posts_id_idx: index(
      "payload_locked_documents_rels_posts_id_idx",
    ).on(columns.postsID),
    payload_locked_documents_rels_customers_id_idx: index(
      "payload_locked_documents_rels_customers_id_idx",
    ).on(columns.customersID),
    payload_locked_documents_rels_orders_id_idx: index(
      "payload_locked_documents_rels_orders_id_idx",
    ).on(columns.ordersID),
    payload_locked_documents_rels_business_info_id_idx: index(
      "payload_locked_documents_rels_business_info_id_idx",
    ).on(columns["business-infoID"]),
    payload_locked_documents_rels_navbar_id_idx: index(
      "payload_locked_documents_rels_navbar_id_idx",
    ).on(columns.navbarID),
    payload_locked_documents_rels_footer_id_idx: index(
      "payload_locked_documents_rels_footer_id_idx",
    ).on(columns.footerID),
    payload_locked_documents_rels_tenants_id_idx: index(
      "payload_locked_documents_rels_tenants_id_idx",
    ).on(columns.tenantsID),
    payload_locked_documents_rels_forms_id_idx: index(
      "payload_locked_documents_rels_forms_id_idx",
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      "payload_locked_documents_rels_form_submissions_id_idx",
    ).on(columns["form-submissionsID"]),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      "payload_locked_documents_rels_payload_jobs_id_idx",
    ).on(columns["payload-jobsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    highQualityMediaIdFk: foreignKey({
      columns: [columns["highQualityMediaID"]],
      foreignColumns: [high_quality_media.id],
      name: "payload_locked_documents_rels_high_quality_media_fk",
    }).onDelete("cascade"),
    machineryIdFk: foreignKey({
      columns: [columns["machineryID"]],
      foreignColumns: [machinery.id],
      name: "payload_locked_documents_rels_machinery_fk",
    }).onDelete("cascade"),
    servicesIdFk: foreignKey({
      columns: [columns["servicesID"]],
      foreignColumns: [services.id],
      name: "payload_locked_documents_rels_services_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "payload_locked_documents_rels_testimonials_fk",
    }).onDelete("cascade"),
    "faq-itemsIdFk": foreignKey({
      columns: [columns["faq-itemsID"]],
      foreignColumns: [faq_items.id],
      name: "payload_locked_documents_rels_faq_items_fk",
    }).onDelete("cascade"),
    ctasIdFk: foreignKey({
      columns: [columns["ctasID"]],
      foreignColumns: [ctas.id],
      name: "payload_locked_documents_rels_ctas_fk",
    }).onDelete("cascade"),
    projectsIdFk: foreignKey({
      columns: [columns["projectsID"]],
      foreignColumns: [projects.id],
      name: "payload_locked_documents_rels_projects_fk",
    }).onDelete("cascade"),
    "opening-hoursIdFk": foreignKey({
      columns: [columns["opening-hoursID"]],
      foreignColumns: [opening_hours.id],
      name: "payload_locked_documents_rels_opening_hours_fk",
    }).onDelete("cascade"),
    sub_servicesIdFk: foreignKey({
      columns: [columns["sub_servicesID"]],
      foreignColumns: [sub_services.id],
      name: "payload_locked_documents_rels_sub_services_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "payload_locked_documents_rels_pages_fk",
    }).onDelete("cascade"),
    "service-pagesIdFk": foreignKey({
      columns: [columns["service-pagesID"]],
      foreignColumns: [service_pages.id],
      name: "payload_locked_documents_rels_service_pages_fk",
    }).onDelete("cascade"),
    "project-pagesIdFk": foreignKey({
      columns: [columns["project-pagesID"]],
      foreignColumns: [project_pages.id],
      name: "payload_locked_documents_rels_project_pages_fk",
    }).onDelete("cascade"),
    "product-pagesIdFk": foreignKey({
      columns: [columns["product-pagesID"]],
      foreignColumns: [product_pages.id],
      name: "payload_locked_documents_rels_product_pages_fk",
    }).onDelete("cascade"),
    redirectsIdFk: foreignKey({
      columns: [columns["redirectsID"]],
      foreignColumns: [redirects.id],
      name: "payload_locked_documents_rels_redirects_fk",
    }).onDelete("cascade"),
    pricelistsIdFk: foreignKey({
      columns: [columns["pricelistsID"]],
      foreignColumns: [pricelists.id],
      name: "payload_locked_documents_rels_pricelists_fk",
    }).onDelete("cascade"),
    "price-list-sectionsIdFk": foreignKey({
      columns: [columns["price-list-sectionsID"]],
      foreignColumns: [price_list_sections.id],
      name: "payload_locked_documents_rels_price_list_sections_fk",
    }).onDelete("cascade"),
    "price-list-itemsIdFk": foreignKey({
      columns: [columns["price-list-itemsID"]],
      foreignColumns: [price_list_items.id],
      name: "payload_locked_documents_rels_price_list_items_fk",
    }).onDelete("cascade"),
    bannersIdFk: foreignKey({
      columns: [columns["bannersID"]],
      foreignColumns: [banners.id],
      name: "payload_locked_documents_rels_banners_fk",
    }).onDelete("cascade"),
    menusIdFk: foreignKey({
      columns: [columns["menusID"]],
      foreignColumns: [menus.id],
      name: "payload_locked_documents_rels_menus_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "payload_locked_documents_rels_products_fk",
    }).onDelete("cascade"),
    "product-variantsIdFk": foreignKey({
      columns: [columns["product-variantsID"]],
      foreignColumns: [product_variants.id],
      name: "payload_locked_documents_rels_product_variants_fk",
    }).onDelete("cascade"),
    collectionsIdFk: foreignKey({
      columns: [columns["collectionsID"]],
      foreignColumns: [collections.id],
      name: "payload_locked_documents_rels_collections_fk",
    }).onDelete("cascade"),
    postsIdFk: foreignKey({
      columns: [columns["postsID"]],
      foreignColumns: [posts.id],
      name: "payload_locked_documents_rels_posts_fk",
    }).onDelete("cascade"),
    customersIdFk: foreignKey({
      columns: [columns["customersID"]],
      foreignColumns: [customers.id],
      name: "payload_locked_documents_rels_customers_fk",
    }).onDelete("cascade"),
    ordersIdFk: foreignKey({
      columns: [columns["ordersID"]],
      foreignColumns: [orders.id],
      name: "payload_locked_documents_rels_orders_fk",
    }).onDelete("cascade"),
    "business-infoIdFk": foreignKey({
      columns: [columns["business-infoID"]],
      foreignColumns: [business_info.id],
      name: "payload_locked_documents_rels_business_info_fk",
    }).onDelete("cascade"),
    navbarIdFk: foreignKey({
      columns: [columns["navbarID"]],
      foreignColumns: [navbar.id],
      name: "payload_locked_documents_rels_navbar_fk",
    }).onDelete("cascade"),
    footerIdFk: foreignKey({
      columns: [columns["footerID"]],
      foreignColumns: [footer.id],
      name: "payload_locked_documents_rels_footer_fk",
    }).onDelete("cascade"),
    tenantsIdFk: foreignKey({
      columns: [columns["tenantsID"]],
      foreignColumns: [tenants.id],
      name: "payload_locked_documents_rels_tenants_fk",
    }).onDelete("cascade"),
    formsIdFk: foreignKey({
      columns: [columns["formsID"]],
      foreignColumns: [forms.id],
      name: "payload_locked_documents_rels_forms_fk",
    }).onDelete("cascade"),
    "form-submissionsIdFk": foreignKey({
      columns: [columns["form-submissionsID"]],
      foreignColumns: [form_submissions.id],
      name: "payload_locked_documents_rels_form_submissions_fk",
    }).onDelete("cascade"),
    "payload-jobsIdFk": foreignKey({
      columns: [columns["payload-jobsID"]],
      foreignColumns: [payload_jobs.id],
      name: "payload_locked_documents_rels_payload_jobs_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: "roles",
  }),
}));
export const relations_users_tenants_roles = relations(
  users_tenants_roles,
  ({ one }) => ({
    parent: one(users_tenants, {
      fields: [users_tenants_roles.parent],
      references: [users_tenants.id],
      relationName: "roles",
    }),
  }),
);
export const relations_users_tenants = relations(
  users_tenants,
  ({ one, many }) => ({
    _parentID: one(users, {
      fields: [users_tenants._parentID],
      references: [users.id],
      relationName: "tenants",
    }),
    tenant: one(tenants, {
      fields: [users_tenants.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    roles: many(users_tenants_roles, {
      relationName: "roles",
    }),
  }),
);
export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  roles: many(users_roles, {
    relationName: "roles",
  }),
  tenants: many(users_tenants, {
    relationName: "tenants",
  }),
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_media = relations(media, ({ one }) => ({
  tenant: one(tenants, {
    fields: [media.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
}));
export const relations_high_quality_media = relations(
  high_quality_media,
  ({ one }) => ({
    tenant: one(tenants, {
      fields: [high_quality_media.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
  }),
);
export const relations_machinery_specifications_spec_details = relations(
  machinery_specifications_spec_details,
  ({ one }) => ({
    _parentID: one(machinery_specifications, {
      fields: [machinery_specifications_spec_details._parentID],
      references: [machinery_specifications.id],
      relationName: "specDetails",
    }),
  }),
);
export const relations_machinery_specifications = relations(
  machinery_specifications,
  ({ one, many }) => ({
    _parentID: one(machinery, {
      fields: [machinery_specifications._parentID],
      references: [machinery.id],
      relationName: "specifications",
    }),
    specDetails: many(machinery_specifications_spec_details, {
      relationName: "specDetails",
    }),
  }),
);
export const relations_machinery = relations(machinery, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [machinery.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  image: one(media, {
    fields: [machinery.image],
    references: [media.id],
    relationName: "image",
  }),
  specifications: many(machinery_specifications, {
    relationName: "specifications",
  }),
}));
export const relations_services_features = relations(
  services_features,
  ({ one }) => ({
    _parentID: one(services, {
      fields: [services_features._parentID],
      references: [services.id],
      relationName: "features",
    }),
  }),
);
export const relations_services_rels = relations(services_rels, ({ one }) => ({
  parent: one(services, {
    fields: [services_rels.parent],
    references: [services.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [services_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  testimonialsID: one(testimonials, {
    fields: [services_rels.testimonialsID],
    references: [testimonials.id],
    relationName: "testimonials",
  }),
  sub_servicesID: one(sub_services, {
    fields: [services_rels.sub_servicesID],
    references: [sub_services.id],
    relationName: "sub_services",
  }),
}));
export const relations_services = relations(services, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [services.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  features: many(services_features, {
    relationName: "features",
  }),
  _rels: many(services_rels, {
    relationName: "_rels",
  }),
}));
export const relations_testimonials_rels = relations(
  testimonials_rels,
  ({ one }) => ({
    parent: one(testimonials, {
      fields: [testimonials_rels.parent],
      references: [testimonials.id],
      relationName: "_rels",
    }),
    servicesID: one(services, {
      fields: [testimonials_rels.servicesID],
      references: [services.id],
      relationName: "services",
    }),
  }),
);
export const relations_testimonials = relations(
  testimonials,
  ({ one, many }) => ({
    tenant: one(tenants, {
      fields: [testimonials.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    _rels: many(testimonials_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_faq_items = relations(faq_items, ({ one }) => ({
  tenant: one(tenants, {
    fields: [faq_items.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  relatedService: one(services, {
    fields: [faq_items.relatedService],
    references: [services.id],
    relationName: "relatedService",
  }),
}));
export const relations_ctas = relations(ctas, ({ one }) => ({
  tenant: one(tenants, {
    fields: [ctas.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
}));
export const relations_projects_project_images = relations(
  projects_project_images,
  ({ one }) => ({
    _parentID: one(projects, {
      fields: [projects_project_images._parentID],
      references: [projects.id],
      relationName: "projectImages",
    }),
    image1: one(media, {
      fields: [projects_project_images.image1],
      references: [media.id],
      relationName: "image1",
    }),
    image2: one(media, {
      fields: [projects_project_images.image2],
      references: [media.id],
      relationName: "image2",
    }),
  }),
);
export const relations_projects_texts = relations(
  projects_texts,
  ({ one }) => ({
    parent: one(projects, {
      fields: [projects_texts.parent],
      references: [projects.id],
      relationName: "_texts",
    }),
  }),
);
export const relations_projects_rels = relations(projects_rels, ({ one }) => ({
  parent: one(projects, {
    fields: [projects_rels.parent],
    references: [projects.id],
    relationName: "_rels",
  }),
  servicesID: one(services, {
    fields: [projects_rels.servicesID],
    references: [services.id],
    relationName: "services",
  }),
  testimonialsID: one(testimonials, {
    fields: [projects_rels.testimonialsID],
    references: [testimonials.id],
    relationName: "testimonials",
  }),
}));
export const relations_projects = relations(projects, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [projects.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  projectImages: many(projects_project_images, {
    relationName: "projectImages",
  }),
  _texts: many(projects_texts, {
    relationName: "_texts",
  }),
  _rels: many(projects_rels, {
    relationName: "_rels",
  }),
}));
export const relations_opening_hours_daily_hours_days = relations(
  opening_hours_daily_hours_days,
  ({ one }) => ({
    parent: one(opening_hours_daily_hours, {
      fields: [opening_hours_daily_hours_days.parent],
      references: [opening_hours_daily_hours.id],
      relationName: "days",
    }),
  }),
);
export const relations_opening_hours_daily_hours_time_slots = relations(
  opening_hours_daily_hours_time_slots,
  ({ one }) => ({
    _parentID: one(opening_hours_daily_hours, {
      fields: [opening_hours_daily_hours_time_slots._parentID],
      references: [opening_hours_daily_hours.id],
      relationName: "timeSlots",
    }),
  }),
);
export const relations_opening_hours_daily_hours = relations(
  opening_hours_daily_hours,
  ({ one, many }) => ({
    _parentID: one(opening_hours, {
      fields: [opening_hours_daily_hours._parentID],
      references: [opening_hours.id],
      relationName: "dailyHours",
    }),
    days: many(opening_hours_daily_hours_days, {
      relationName: "days",
    }),
    timeSlots: many(opening_hours_daily_hours_time_slots, {
      relationName: "timeSlots",
    }),
  }),
);
export const relations_opening_hours = relations(
  opening_hours,
  ({ one, many }) => ({
    tenant: one(tenants, {
      fields: [opening_hours.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    dailyHours: many(opening_hours_daily_hours, {
      relationName: "dailyHours",
    }),
  }),
);
export const relations_sub_services_rels = relations(
  sub_services_rels,
  ({ one }) => ({
    parent: one(sub_services, {
      fields: [sub_services_rels.parent],
      references: [sub_services.id],
      relationName: "_rels",
    }),
    mediaID: one(media, {
      fields: [sub_services_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations_sub_services = relations(
  sub_services,
  ({ one, many }) => ({
    tenant: one(tenants, {
      fields: [sub_services.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    parentService: one(services, {
      fields: [sub_services.parentService],
      references: [services.id],
      relationName: "parentService",
    }),
    _rels: many(sub_services_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations__sub_services_v_rels = relations(
  _sub_services_v_rels,
  ({ one }) => ({
    parent: one(_sub_services_v, {
      fields: [_sub_services_v_rels.parent],
      references: [_sub_services_v.id],
      relationName: "_rels",
    }),
    mediaID: one(media, {
      fields: [_sub_services_v_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations__sub_services_v = relations(
  _sub_services_v,
  ({ one, many }) => ({
    parent: one(sub_services, {
      fields: [_sub_services_v.parent],
      references: [sub_services.id],
      relationName: "parent",
    }),
    version_tenant: one(tenants, {
      fields: [_sub_services_v.version_tenant],
      references: [tenants.id],
      relationName: "version_tenant",
    }),
    version_parentService: one(services, {
      fields: [_sub_services_v.version_parentService],
      references: [services.id],
      relationName: "version_parentService",
    }),
    _rels: many(_sub_services_v_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_pages_blocks_hero_features = relations(
  pages_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(pages_blocks_hero, {
      fields: [pages_blocks_hero_features._parentID],
      references: [pages_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations_pages_blocks_hero = relations(
  pages_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_hero._parentID],
      references: [pages.id],
      relationName: "_blocks_hero",
    }),
    features: many(pages_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations_pages_blocks_services = relations(
  pages_blocks_services,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_services._parentID],
      references: [pages.id],
      relationName: "_blocks_services",
    }),
  }),
);
export const relations_pages_blocks_faq = relations(
  pages_blocks_faq,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_faq._parentID],
      references: [pages.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [pages_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations_pages_blocks_contact = relations(
  pages_blocks_contact,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_contact._parentID],
      references: [pages.id],
      relationName: "_blocks_contact",
    }),
    form: one(forms, {
      fields: [pages_blocks_contact.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations_pages_blocks_about_benefits = relations(
  pages_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(pages_blocks_about, {
      fields: [pages_blocks_about_benefits._parentID],
      references: [pages_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations_pages_blocks_about = relations(
  pages_blocks_about,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_about._parentID],
      references: [pages.id],
      relationName: "_blocks_about",
    }),
    benefits: many(pages_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations_pages_blocks_testimonials = relations(
  pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_testimonials._parentID],
      references: [pages.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [pages_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations_pages_blocks_gallery = relations(
  pages_blocks_gallery,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_gallery._parentID],
      references: [pages.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [pages_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations_pages_blocks_service_area_locations = relations(
  pages_blocks_service_area_locations,
  ({ one }) => ({
    _parentID: one(pages_blocks_service_area, {
      fields: [pages_blocks_service_area_locations._parentID],
      references: [pages_blocks_service_area.id],
      relationName: "locations",
    }),
  }),
);
export const relations_pages_blocks_service_area = relations(
  pages_blocks_service_area,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_service_area._parentID],
      references: [pages.id],
      relationName: "_blocks_serviceArea",
    }),
    locations: many(pages_blocks_service_area_locations, {
      relationName: "locations",
    }),
  }),
);
export const relations_pages_blocks_project_highlights = relations(
  pages_blocks_project_highlights,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_project_highlights._parentID],
      references: [pages.id],
      relationName: "_blocks_projectHighlights",
    }),
  }),
);
export const relations_pages_blocks_machinery = relations(
  pages_blocks_machinery,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_machinery._parentID],
      references: [pages.id],
      relationName: "_blocks_machinery",
    }),
    cta: one(ctas, {
      fields: [pages_blocks_machinery.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations_pages_blocks_form_block = relations(
  pages_blocks_form_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_form_block._parentID],
      references: [pages.id],
      relationName: "_blocks_formBlock",
    }),
    form: one(forms, {
      fields: [pages_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations_pages_blocks_howto_steps = relations(
  pages_blocks_howto_steps,
  ({ one }) => ({
    _parentID: one(pages_blocks_howto, {
      fields: [pages_blocks_howto_steps._parentID],
      references: [pages_blocks_howto.id],
      relationName: "steps",
    }),
  }),
);
export const relations_pages_blocks_howto = relations(
  pages_blocks_howto,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_howto._parentID],
      references: [pages.id],
      relationName: "_blocks_howto",
    }),
    steps: many(pages_blocks_howto_steps, {
      relationName: "steps",
    }),
  }),
);
export const relations_pages_blocks_cta_block = relations(
  pages_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_cta_block._parentID],
      references: [pages.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [pages_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations_pages_blocks_featured_products = relations(
  pages_blocks_featured_products,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_featured_products._parentID],
      references: [pages.id],
      relationName: "_blocks_featured_products",
    }),
  }),
);
export const relations_pages_blocks_text = relations(
  pages_blocks_text,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_text._parentID],
      references: [pages.id],
      relationName: "_blocks_text",
    }),
  }),
);
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: "_rels",
  }),
  ctasID: one(ctas, {
    fields: [pages_rels.ctasID],
    references: [ctas.id],
    relationName: "ctas",
  }),
  highQualityMediaID: one(high_quality_media, {
    fields: [pages_rels.highQualityMediaID],
    references: [high_quality_media.id],
    relationName: "highQualityMedia",
  }),
  testimonialsID: one(testimonials, {
    fields: [pages_rels.testimonialsID],
    references: [testimonials.id],
    relationName: "testimonials",
  }),
  servicesID: one(services, {
    fields: [pages_rels.servicesID],
    references: [services.id],
    relationName: "services",
  }),
  "faq-itemsID": one(faq_items, {
    fields: [pages_rels["faq-itemsID"]],
    references: [faq_items.id],
    relationName: "faq-items",
  }),
  "opening-hoursID": one(opening_hours, {
    fields: [pages_rels["opening-hoursID"]],
    references: [opening_hours.id],
    relationName: "opening-hours",
  }),
  mediaID: one(media, {
    fields: [pages_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  projectsID: one(projects, {
    fields: [pages_rels.projectsID],
    references: [projects.id],
    relationName: "projects",
  }),
  machineryID: one(machinery, {
    fields: [pages_rels.machineryID],
    references: [machinery.id],
    relationName: "machinery",
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [pages.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  _blocks_hero: many(pages_blocks_hero, {
    relationName: "_blocks_hero",
  }),
  _blocks_services: many(pages_blocks_services, {
    relationName: "_blocks_services",
  }),
  _blocks_faq: many(pages_blocks_faq, {
    relationName: "_blocks_faq",
  }),
  _blocks_contact: many(pages_blocks_contact, {
    relationName: "_blocks_contact",
  }),
  _blocks_about: many(pages_blocks_about, {
    relationName: "_blocks_about",
  }),
  _blocks_testimonials: many(pages_blocks_testimonials, {
    relationName: "_blocks_testimonials",
  }),
  _blocks_gallery: many(pages_blocks_gallery, {
    relationName: "_blocks_gallery",
  }),
  _blocks_serviceArea: many(pages_blocks_service_area, {
    relationName: "_blocks_serviceArea",
  }),
  _blocks_projectHighlights: many(pages_blocks_project_highlights, {
    relationName: "_blocks_projectHighlights",
  }),
  _blocks_machinery: many(pages_blocks_machinery, {
    relationName: "_blocks_machinery",
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: "_blocks_formBlock",
  }),
  _blocks_howto: many(pages_blocks_howto, {
    relationName: "_blocks_howto",
  }),
  _blocks_cta_block: many(pages_blocks_cta_block, {
    relationName: "_blocks_cta_block",
  }),
  _blocks_featured_products: many(pages_blocks_featured_products, {
    relationName: "_blocks_featured_products",
  }),
  _blocks_text: many(pages_blocks_text, {
    relationName: "_blocks_text",
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  _rels: many(pages_rels, {
    relationName: "_rels",
  }),
}));
export const relations__pages_v_blocks_hero_features = relations(
  _pages_v_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_hero, {
      fields: [_pages_v_blocks_hero_features._parentID],
      references: [_pages_v_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations__pages_v_blocks_hero = relations(
  _pages_v_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_hero._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_hero",
    }),
    features: many(_pages_v_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations__pages_v_blocks_services = relations(
  _pages_v_blocks_services,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_services._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_services",
    }),
  }),
);
export const relations__pages_v_blocks_faq = relations(
  _pages_v_blocks_faq,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_faq._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [_pages_v_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations__pages_v_blocks_contact = relations(
  _pages_v_blocks_contact,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_contact._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_contact",
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_contact.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__pages_v_blocks_about_benefits = relations(
  _pages_v_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_about, {
      fields: [_pages_v_blocks_about_benefits._parentID],
      references: [_pages_v_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations__pages_v_blocks_about = relations(
  _pages_v_blocks_about,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_about._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_about",
    }),
    benefits: many(_pages_v_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations__pages_v_blocks_testimonials = relations(
  _pages_v_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_testimonials._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [_pages_v_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations__pages_v_blocks_gallery = relations(
  _pages_v_blocks_gallery,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_gallery._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [_pages_v_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations__pages_v_blocks_service_area_locations = relations(
  _pages_v_blocks_service_area_locations,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_service_area, {
      fields: [_pages_v_blocks_service_area_locations._parentID],
      references: [_pages_v_blocks_service_area.id],
      relationName: "locations",
    }),
  }),
);
export const relations__pages_v_blocks_service_area = relations(
  _pages_v_blocks_service_area,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_service_area._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_serviceArea",
    }),
    locations: many(_pages_v_blocks_service_area_locations, {
      relationName: "locations",
    }),
  }),
);
export const relations__pages_v_blocks_project_highlights = relations(
  _pages_v_blocks_project_highlights,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_project_highlights._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_projectHighlights",
    }),
  }),
);
export const relations__pages_v_blocks_machinery = relations(
  _pages_v_blocks_machinery,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_machinery._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_machinery",
    }),
    cta: one(ctas, {
      fields: [_pages_v_blocks_machinery.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_formBlock",
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__pages_v_blocks_howto_steps = relations(
  _pages_v_blocks_howto_steps,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_howto, {
      fields: [_pages_v_blocks_howto_steps._parentID],
      references: [_pages_v_blocks_howto.id],
      relationName: "steps",
    }),
  }),
);
export const relations__pages_v_blocks_howto = relations(
  _pages_v_blocks_howto,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_howto._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_howto",
    }),
    steps: many(_pages_v_blocks_howto_steps, {
      relationName: "steps",
    }),
  }),
);
export const relations__pages_v_blocks_cta_block = relations(
  _pages_v_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_cta_block._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [_pages_v_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations__pages_v_blocks_featured_products = relations(
  _pages_v_blocks_featured_products,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_featured_products._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_featured_products",
    }),
  }),
);
export const relations__pages_v_blocks_text = relations(
  _pages_v_blocks_text,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_text._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_text",
    }),
  }),
);
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: "_rels",
  }),
  ctasID: one(ctas, {
    fields: [_pages_v_rels.ctasID],
    references: [ctas.id],
    relationName: "ctas",
  }),
  highQualityMediaID: one(high_quality_media, {
    fields: [_pages_v_rels.highQualityMediaID],
    references: [high_quality_media.id],
    relationName: "highQualityMedia",
  }),
  testimonialsID: one(testimonials, {
    fields: [_pages_v_rels.testimonialsID],
    references: [testimonials.id],
    relationName: "testimonials",
  }),
  servicesID: one(services, {
    fields: [_pages_v_rels.servicesID],
    references: [services.id],
    relationName: "services",
  }),
  "faq-itemsID": one(faq_items, {
    fields: [_pages_v_rels["faq-itemsID"]],
    references: [faq_items.id],
    relationName: "faq-items",
  }),
  "opening-hoursID": one(opening_hours, {
    fields: [_pages_v_rels["opening-hoursID"]],
    references: [opening_hours.id],
    relationName: "opening-hours",
  }),
  mediaID: one(media, {
    fields: [_pages_v_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  projectsID: one(projects, {
    fields: [_pages_v_rels.projectsID],
    references: [projects.id],
    relationName: "projects",
  }),
  machineryID: one(machinery, {
    fields: [_pages_v_rels.machineryID],
    references: [machinery.id],
    relationName: "machinery",
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: "parent",
  }),
  version_tenant: one(tenants, {
    fields: [_pages_v.version_tenant],
    references: [tenants.id],
    relationName: "version_tenant",
  }),
  _blocks_hero: many(_pages_v_blocks_hero, {
    relationName: "_blocks_hero",
  }),
  _blocks_services: many(_pages_v_blocks_services, {
    relationName: "_blocks_services",
  }),
  _blocks_faq: many(_pages_v_blocks_faq, {
    relationName: "_blocks_faq",
  }),
  _blocks_contact: many(_pages_v_blocks_contact, {
    relationName: "_blocks_contact",
  }),
  _blocks_about: many(_pages_v_blocks_about, {
    relationName: "_blocks_about",
  }),
  _blocks_testimonials: many(_pages_v_blocks_testimonials, {
    relationName: "_blocks_testimonials",
  }),
  _blocks_gallery: many(_pages_v_blocks_gallery, {
    relationName: "_blocks_gallery",
  }),
  _blocks_serviceArea: many(_pages_v_blocks_service_area, {
    relationName: "_blocks_serviceArea",
  }),
  _blocks_projectHighlights: many(_pages_v_blocks_project_highlights, {
    relationName: "_blocks_projectHighlights",
  }),
  _blocks_machinery: many(_pages_v_blocks_machinery, {
    relationName: "_blocks_machinery",
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: "_blocks_formBlock",
  }),
  _blocks_howto: many(_pages_v_blocks_howto, {
    relationName: "_blocks_howto",
  }),
  _blocks_cta_block: many(_pages_v_blocks_cta_block, {
    relationName: "_blocks_cta_block",
  }),
  _blocks_featured_products: many(_pages_v_blocks_featured_products, {
    relationName: "_blocks_featured_products",
  }),
  _blocks_text: many(_pages_v_blocks_text, {
    relationName: "_blocks_text",
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: "version_meta_image",
  }),
  _rels: many(_pages_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_service_pages_blocks_hero_features = relations(
  service_pages_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(service_pages_blocks_hero, {
      fields: [service_pages_blocks_hero_features._parentID],
      references: [service_pages_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations_service_pages_blocks_hero = relations(
  service_pages_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_hero._parentID],
      references: [service_pages.id],
      relationName: "_blocks_hero",
    }),
    features: many(service_pages_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations_service_pages_blocks_services = relations(
  service_pages_blocks_services,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_services._parentID],
      references: [service_pages.id],
      relationName: "_blocks_services",
    }),
  }),
);
export const relations_service_pages_blocks_faq = relations(
  service_pages_blocks_faq,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_faq._parentID],
      references: [service_pages.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [service_pages_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations_service_pages_blocks_contact = relations(
  service_pages_blocks_contact,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_contact._parentID],
      references: [service_pages.id],
      relationName: "_blocks_contact",
    }),
    form: one(forms, {
      fields: [service_pages_blocks_contact.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations_service_pages_blocks_about_benefits = relations(
  service_pages_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(service_pages_blocks_about, {
      fields: [service_pages_blocks_about_benefits._parentID],
      references: [service_pages_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations_service_pages_blocks_about = relations(
  service_pages_blocks_about,
  ({ one, many }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_about._parentID],
      references: [service_pages.id],
      relationName: "_blocks_about",
    }),
    benefits: many(service_pages_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations_service_pages_blocks_testimonials = relations(
  service_pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_testimonials._parentID],
      references: [service_pages.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [service_pages_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations_service_pages_blocks_gallery = relations(
  service_pages_blocks_gallery,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_gallery._parentID],
      references: [service_pages.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [service_pages_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations_service_pages_blocks_service_area_locations = relations(
  service_pages_blocks_service_area_locations,
  ({ one }) => ({
    _parentID: one(service_pages_blocks_service_area, {
      fields: [service_pages_blocks_service_area_locations._parentID],
      references: [service_pages_blocks_service_area.id],
      relationName: "locations",
    }),
  }),
);
export const relations_service_pages_blocks_service_area = relations(
  service_pages_blocks_service_area,
  ({ one, many }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_service_area._parentID],
      references: [service_pages.id],
      relationName: "_blocks_serviceArea",
    }),
    locations: many(service_pages_blocks_service_area_locations, {
      relationName: "locations",
    }),
  }),
);
export const relations_service_pages_blocks_project_highlights = relations(
  service_pages_blocks_project_highlights,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_project_highlights._parentID],
      references: [service_pages.id],
      relationName: "_blocks_projectHighlights",
    }),
  }),
);
export const relations_service_pages_blocks_machinery = relations(
  service_pages_blocks_machinery,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_machinery._parentID],
      references: [service_pages.id],
      relationName: "_blocks_machinery",
    }),
    cta: one(ctas, {
      fields: [service_pages_blocks_machinery.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations_service_pages_blocks_form_block = relations(
  service_pages_blocks_form_block,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_form_block._parentID],
      references: [service_pages.id],
      relationName: "_blocks_formBlock",
    }),
    form: one(forms, {
      fields: [service_pages_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations_service_pages_blocks_sub_services = relations(
  service_pages_blocks_sub_services,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_sub_services._parentID],
      references: [service_pages.id],
      relationName: "_blocks_sub-services",
    }),
  }),
);
export const relations_service_pages_blocks_cta_block = relations(
  service_pages_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(service_pages, {
      fields: [service_pages_blocks_cta_block._parentID],
      references: [service_pages.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [service_pages_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations_service_pages_rels = relations(
  service_pages_rels,
  ({ one }) => ({
    parent: one(service_pages, {
      fields: [service_pages_rels.parent],
      references: [service_pages.id],
      relationName: "_rels",
    }),
    ctasID: one(ctas, {
      fields: [service_pages_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [service_pages_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    testimonialsID: one(testimonials, {
      fields: [service_pages_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    servicesID: one(services, {
      fields: [service_pages_rels.servicesID],
      references: [services.id],
      relationName: "services",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [service_pages_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    "opening-hoursID": one(opening_hours, {
      fields: [service_pages_rels["opening-hoursID"]],
      references: [opening_hours.id],
      relationName: "opening-hours",
    }),
    mediaID: one(media, {
      fields: [service_pages_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    projectsID: one(projects, {
      fields: [service_pages_rels.projectsID],
      references: [projects.id],
      relationName: "projects",
    }),
    machineryID: one(machinery, {
      fields: [service_pages_rels.machineryID],
      references: [machinery.id],
      relationName: "machinery",
    }),
    sub_servicesID: one(sub_services, {
      fields: [service_pages_rels.sub_servicesID],
      references: [sub_services.id],
      relationName: "sub_services",
    }),
  }),
);
export const relations_service_pages = relations(
  service_pages,
  ({ one, many }) => ({
    tenant: one(tenants, {
      fields: [service_pages.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    _blocks_hero: many(service_pages_blocks_hero, {
      relationName: "_blocks_hero",
    }),
    _blocks_services: many(service_pages_blocks_services, {
      relationName: "_blocks_services",
    }),
    _blocks_faq: many(service_pages_blocks_faq, {
      relationName: "_blocks_faq",
    }),
    _blocks_contact: many(service_pages_blocks_contact, {
      relationName: "_blocks_contact",
    }),
    _blocks_about: many(service_pages_blocks_about, {
      relationName: "_blocks_about",
    }),
    _blocks_testimonials: many(service_pages_blocks_testimonials, {
      relationName: "_blocks_testimonials",
    }),
    _blocks_gallery: many(service_pages_blocks_gallery, {
      relationName: "_blocks_gallery",
    }),
    _blocks_serviceArea: many(service_pages_blocks_service_area, {
      relationName: "_blocks_serviceArea",
    }),
    _blocks_projectHighlights: many(service_pages_blocks_project_highlights, {
      relationName: "_blocks_projectHighlights",
    }),
    _blocks_machinery: many(service_pages_blocks_machinery, {
      relationName: "_blocks_machinery",
    }),
    _blocks_formBlock: many(service_pages_blocks_form_block, {
      relationName: "_blocks_formBlock",
    }),
    "_blocks_sub-services": many(service_pages_blocks_sub_services, {
      relationName: "_blocks_sub-services",
    }),
    _blocks_cta_block: many(service_pages_blocks_cta_block, {
      relationName: "_blocks_cta_block",
    }),
    services: one(services, {
      fields: [service_pages.services],
      references: [services.id],
      relationName: "services",
    }),
    meta_image: one(media, {
      fields: [service_pages.meta_image],
      references: [media.id],
      relationName: "meta_image",
    }),
    _rels: many(service_pages_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations__service_pages_v_blocks_hero_features = relations(
  _service_pages_v_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(_service_pages_v_blocks_hero, {
      fields: [_service_pages_v_blocks_hero_features._parentID],
      references: [_service_pages_v_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations__service_pages_v_blocks_hero = relations(
  _service_pages_v_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_hero._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_hero",
    }),
    features: many(_service_pages_v_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations__service_pages_v_blocks_services = relations(
  _service_pages_v_blocks_services,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_services._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_services",
    }),
  }),
);
export const relations__service_pages_v_blocks_faq = relations(
  _service_pages_v_blocks_faq,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_faq._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [_service_pages_v_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations__service_pages_v_blocks_contact = relations(
  _service_pages_v_blocks_contact,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_contact._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_contact",
    }),
    form: one(forms, {
      fields: [_service_pages_v_blocks_contact.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__service_pages_v_blocks_about_benefits = relations(
  _service_pages_v_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(_service_pages_v_blocks_about, {
      fields: [_service_pages_v_blocks_about_benefits._parentID],
      references: [_service_pages_v_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations__service_pages_v_blocks_about = relations(
  _service_pages_v_blocks_about,
  ({ one, many }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_about._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_about",
    }),
    benefits: many(_service_pages_v_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations__service_pages_v_blocks_testimonials = relations(
  _service_pages_v_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_testimonials._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [_service_pages_v_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations__service_pages_v_blocks_gallery = relations(
  _service_pages_v_blocks_gallery,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_gallery._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [_service_pages_v_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations__service_pages_v_blocks_service_area_locations =
  relations(_service_pages_v_blocks_service_area_locations, ({ one }) => ({
    _parentID: one(_service_pages_v_blocks_service_area, {
      fields: [_service_pages_v_blocks_service_area_locations._parentID],
      references: [_service_pages_v_blocks_service_area.id],
      relationName: "locations",
    }),
  }));
export const relations__service_pages_v_blocks_service_area = relations(
  _service_pages_v_blocks_service_area,
  ({ one, many }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_service_area._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_serviceArea",
    }),
    locations: many(_service_pages_v_blocks_service_area_locations, {
      relationName: "locations",
    }),
  }),
);
export const relations__service_pages_v_blocks_project_highlights = relations(
  _service_pages_v_blocks_project_highlights,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_project_highlights._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_projectHighlights",
    }),
  }),
);
export const relations__service_pages_v_blocks_machinery = relations(
  _service_pages_v_blocks_machinery,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_machinery._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_machinery",
    }),
    cta: one(ctas, {
      fields: [_service_pages_v_blocks_machinery.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations__service_pages_v_blocks_form_block = relations(
  _service_pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_form_block._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_formBlock",
    }),
    form: one(forms, {
      fields: [_service_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__service_pages_v_blocks_sub_services = relations(
  _service_pages_v_blocks_sub_services,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_sub_services._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_sub-services",
    }),
  }),
);
export const relations__service_pages_v_blocks_cta_block = relations(
  _service_pages_v_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(_service_pages_v, {
      fields: [_service_pages_v_blocks_cta_block._parentID],
      references: [_service_pages_v.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [_service_pages_v_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations__service_pages_v_rels = relations(
  _service_pages_v_rels,
  ({ one }) => ({
    parent: one(_service_pages_v, {
      fields: [_service_pages_v_rels.parent],
      references: [_service_pages_v.id],
      relationName: "_rels",
    }),
    ctasID: one(ctas, {
      fields: [_service_pages_v_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [_service_pages_v_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    testimonialsID: one(testimonials, {
      fields: [_service_pages_v_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    servicesID: one(services, {
      fields: [_service_pages_v_rels.servicesID],
      references: [services.id],
      relationName: "services",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [_service_pages_v_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    "opening-hoursID": one(opening_hours, {
      fields: [_service_pages_v_rels["opening-hoursID"]],
      references: [opening_hours.id],
      relationName: "opening-hours",
    }),
    mediaID: one(media, {
      fields: [_service_pages_v_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    projectsID: one(projects, {
      fields: [_service_pages_v_rels.projectsID],
      references: [projects.id],
      relationName: "projects",
    }),
    machineryID: one(machinery, {
      fields: [_service_pages_v_rels.machineryID],
      references: [machinery.id],
      relationName: "machinery",
    }),
    sub_servicesID: one(sub_services, {
      fields: [_service_pages_v_rels.sub_servicesID],
      references: [sub_services.id],
      relationName: "sub_services",
    }),
  }),
);
export const relations__service_pages_v = relations(
  _service_pages_v,
  ({ one, many }) => ({
    parent: one(service_pages, {
      fields: [_service_pages_v.parent],
      references: [service_pages.id],
      relationName: "parent",
    }),
    version_tenant: one(tenants, {
      fields: [_service_pages_v.version_tenant],
      references: [tenants.id],
      relationName: "version_tenant",
    }),
    _blocks_hero: many(_service_pages_v_blocks_hero, {
      relationName: "_blocks_hero",
    }),
    _blocks_services: many(_service_pages_v_blocks_services, {
      relationName: "_blocks_services",
    }),
    _blocks_faq: many(_service_pages_v_blocks_faq, {
      relationName: "_blocks_faq",
    }),
    _blocks_contact: many(_service_pages_v_blocks_contact, {
      relationName: "_blocks_contact",
    }),
    _blocks_about: many(_service_pages_v_blocks_about, {
      relationName: "_blocks_about",
    }),
    _blocks_testimonials: many(_service_pages_v_blocks_testimonials, {
      relationName: "_blocks_testimonials",
    }),
    _blocks_gallery: many(_service_pages_v_blocks_gallery, {
      relationName: "_blocks_gallery",
    }),
    _blocks_serviceArea: many(_service_pages_v_blocks_service_area, {
      relationName: "_blocks_serviceArea",
    }),
    _blocks_projectHighlights: many(
      _service_pages_v_blocks_project_highlights,
      {
        relationName: "_blocks_projectHighlights",
      },
    ),
    _blocks_machinery: many(_service_pages_v_blocks_machinery, {
      relationName: "_blocks_machinery",
    }),
    _blocks_formBlock: many(_service_pages_v_blocks_form_block, {
      relationName: "_blocks_formBlock",
    }),
    "_blocks_sub-services": many(_service_pages_v_blocks_sub_services, {
      relationName: "_blocks_sub-services",
    }),
    _blocks_cta_block: many(_service_pages_v_blocks_cta_block, {
      relationName: "_blocks_cta_block",
    }),
    version_services: one(services, {
      fields: [_service_pages_v.version_services],
      references: [services.id],
      relationName: "version_services",
    }),
    version_meta_image: one(media, {
      fields: [_service_pages_v.version_meta_image],
      references: [media.id],
      relationName: "version_meta_image",
    }),
    _rels: many(_service_pages_v_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_project_pages_blocks_hero_features = relations(
  project_pages_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(project_pages_blocks_hero, {
      fields: [project_pages_blocks_hero_features._parentID],
      references: [project_pages_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations_project_pages_blocks_hero = relations(
  project_pages_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_hero._parentID],
      references: [project_pages.id],
      relationName: "_blocks_hero",
    }),
    features: many(project_pages_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations_project_pages_blocks_gallery = relations(
  project_pages_blocks_gallery,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_gallery._parentID],
      references: [project_pages.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [project_pages_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations_project_pages_blocks_faq = relations(
  project_pages_blocks_faq,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_faq._parentID],
      references: [project_pages.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [project_pages_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations_project_pages_blocks_contact = relations(
  project_pages_blocks_contact,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_contact._parentID],
      references: [project_pages.id],
      relationName: "_blocks_contact",
    }),
    form: one(forms, {
      fields: [project_pages_blocks_contact.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations_project_pages_blocks_about_benefits = relations(
  project_pages_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(project_pages_blocks_about, {
      fields: [project_pages_blocks_about_benefits._parentID],
      references: [project_pages_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations_project_pages_blocks_about = relations(
  project_pages_blocks_about,
  ({ one, many }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_about._parentID],
      references: [project_pages.id],
      relationName: "_blocks_about",
    }),
    benefits: many(project_pages_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations_project_pages_blocks_testimonials = relations(
  project_pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_testimonials._parentID],
      references: [project_pages.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [project_pages_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations_project_pages_blocks_about_project = relations(
  project_pages_blocks_about_project,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_about_project._parentID],
      references: [project_pages.id],
      relationName: "_blocks_aboutProject",
    }),
    project: one(projects, {
      fields: [project_pages_blocks_about_project.project],
      references: [projects.id],
      relationName: "project",
    }),
  }),
);
export const relations_project_pages_blocks_related_projects = relations(
  project_pages_blocks_related_projects,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_related_projects._parentID],
      references: [project_pages.id],
      relationName: "_blocks_relatedProjects",
    }),
  }),
);
export const relations_project_pages_blocks_cta_block = relations(
  project_pages_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(project_pages, {
      fields: [project_pages_blocks_cta_block._parentID],
      references: [project_pages.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [project_pages_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations_project_pages_rels = relations(
  project_pages_rels,
  ({ one }) => ({
    parent: one(project_pages, {
      fields: [project_pages_rels.parent],
      references: [project_pages.id],
      relationName: "_rels",
    }),
    ctasID: one(ctas, {
      fields: [project_pages_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [project_pages_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    testimonialsID: one(testimonials, {
      fields: [project_pages_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    mediaID: one(media, {
      fields: [project_pages_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [project_pages_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    "opening-hoursID": one(opening_hours, {
      fields: [project_pages_rels["opening-hoursID"]],
      references: [opening_hours.id],
      relationName: "opening-hours",
    }),
    projectsID: one(projects, {
      fields: [project_pages_rels.projectsID],
      references: [projects.id],
      relationName: "projects",
    }),
  }),
);
export const relations_project_pages = relations(
  project_pages,
  ({ one, many }) => ({
    relatedProject: one(projects, {
      fields: [project_pages.relatedProject],
      references: [projects.id],
      relationName: "relatedProject",
    }),
    _blocks_hero: many(project_pages_blocks_hero, {
      relationName: "_blocks_hero",
    }),
    _blocks_gallery: many(project_pages_blocks_gallery, {
      relationName: "_blocks_gallery",
    }),
    _blocks_faq: many(project_pages_blocks_faq, {
      relationName: "_blocks_faq",
    }),
    _blocks_contact: many(project_pages_blocks_contact, {
      relationName: "_blocks_contact",
    }),
    _blocks_about: many(project_pages_blocks_about, {
      relationName: "_blocks_about",
    }),
    _blocks_testimonials: many(project_pages_blocks_testimonials, {
      relationName: "_blocks_testimonials",
    }),
    _blocks_aboutProject: many(project_pages_blocks_about_project, {
      relationName: "_blocks_aboutProject",
    }),
    _blocks_relatedProjects: many(project_pages_blocks_related_projects, {
      relationName: "_blocks_relatedProjects",
    }),
    _blocks_cta_block: many(project_pages_blocks_cta_block, {
      relationName: "_blocks_cta_block",
    }),
    meta_image: one(media, {
      fields: [project_pages.meta_image],
      references: [media.id],
      relationName: "meta_image",
    }),
    _rels: many(project_pages_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations__project_pages_v_blocks_hero_features = relations(
  _project_pages_v_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(_project_pages_v_blocks_hero, {
      fields: [_project_pages_v_blocks_hero_features._parentID],
      references: [_project_pages_v_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations__project_pages_v_blocks_hero = relations(
  _project_pages_v_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_hero._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_hero",
    }),
    features: many(_project_pages_v_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations__project_pages_v_blocks_gallery = relations(
  _project_pages_v_blocks_gallery,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_gallery._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [_project_pages_v_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations__project_pages_v_blocks_faq = relations(
  _project_pages_v_blocks_faq,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_faq._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [_project_pages_v_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations__project_pages_v_blocks_contact = relations(
  _project_pages_v_blocks_contact,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_contact._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_contact",
    }),
    form: one(forms, {
      fields: [_project_pages_v_blocks_contact.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__project_pages_v_blocks_about_benefits = relations(
  _project_pages_v_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(_project_pages_v_blocks_about, {
      fields: [_project_pages_v_blocks_about_benefits._parentID],
      references: [_project_pages_v_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations__project_pages_v_blocks_about = relations(
  _project_pages_v_blocks_about,
  ({ one, many }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_about._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_about",
    }),
    benefits: many(_project_pages_v_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations__project_pages_v_blocks_testimonials = relations(
  _project_pages_v_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_testimonials._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [_project_pages_v_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations__project_pages_v_blocks_about_project = relations(
  _project_pages_v_blocks_about_project,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_about_project._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_aboutProject",
    }),
    project: one(projects, {
      fields: [_project_pages_v_blocks_about_project.project],
      references: [projects.id],
      relationName: "project",
    }),
  }),
);
export const relations__project_pages_v_blocks_related_projects = relations(
  _project_pages_v_blocks_related_projects,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_related_projects._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_relatedProjects",
    }),
  }),
);
export const relations__project_pages_v_blocks_cta_block = relations(
  _project_pages_v_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(_project_pages_v, {
      fields: [_project_pages_v_blocks_cta_block._parentID],
      references: [_project_pages_v.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [_project_pages_v_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations__project_pages_v_rels = relations(
  _project_pages_v_rels,
  ({ one }) => ({
    parent: one(_project_pages_v, {
      fields: [_project_pages_v_rels.parent],
      references: [_project_pages_v.id],
      relationName: "_rels",
    }),
    ctasID: one(ctas, {
      fields: [_project_pages_v_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [_project_pages_v_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    testimonialsID: one(testimonials, {
      fields: [_project_pages_v_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    mediaID: one(media, {
      fields: [_project_pages_v_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [_project_pages_v_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    "opening-hoursID": one(opening_hours, {
      fields: [_project_pages_v_rels["opening-hoursID"]],
      references: [opening_hours.id],
      relationName: "opening-hours",
    }),
    projectsID: one(projects, {
      fields: [_project_pages_v_rels.projectsID],
      references: [projects.id],
      relationName: "projects",
    }),
  }),
);
export const relations__project_pages_v = relations(
  _project_pages_v,
  ({ one, many }) => ({
    parent: one(project_pages, {
      fields: [_project_pages_v.parent],
      references: [project_pages.id],
      relationName: "parent",
    }),
    version_relatedProject: one(projects, {
      fields: [_project_pages_v.version_relatedProject],
      references: [projects.id],
      relationName: "version_relatedProject",
    }),
    _blocks_hero: many(_project_pages_v_blocks_hero, {
      relationName: "_blocks_hero",
    }),
    _blocks_gallery: many(_project_pages_v_blocks_gallery, {
      relationName: "_blocks_gallery",
    }),
    _blocks_faq: many(_project_pages_v_blocks_faq, {
      relationName: "_blocks_faq",
    }),
    _blocks_contact: many(_project_pages_v_blocks_contact, {
      relationName: "_blocks_contact",
    }),
    _blocks_about: many(_project_pages_v_blocks_about, {
      relationName: "_blocks_about",
    }),
    _blocks_testimonials: many(_project_pages_v_blocks_testimonials, {
      relationName: "_blocks_testimonials",
    }),
    _blocks_aboutProject: many(_project_pages_v_blocks_about_project, {
      relationName: "_blocks_aboutProject",
    }),
    _blocks_relatedProjects: many(_project_pages_v_blocks_related_projects, {
      relationName: "_blocks_relatedProjects",
    }),
    _blocks_cta_block: many(_project_pages_v_blocks_cta_block, {
      relationName: "_blocks_cta_block",
    }),
    version_meta_image: one(media, {
      fields: [_project_pages_v.version_meta_image],
      references: [media.id],
      relationName: "version_meta_image",
    }),
    _rels: many(_project_pages_v_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_product_pages_blocks_product_form = relations(
  product_pages_blocks_product_form,
  ({ one }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_product_form._parentID],
      references: [product_pages.id],
      relationName: "_blocks_product_form",
    }),
    product: one(products, {
      fields: [product_pages_blocks_product_form.product],
      references: [products.id],
      relationName: "product",
    }),
  }),
);
export const relations_product_pages_blocks_hero_features = relations(
  product_pages_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(product_pages_blocks_hero, {
      fields: [product_pages_blocks_hero_features._parentID],
      references: [product_pages_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations_product_pages_blocks_hero = relations(
  product_pages_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_hero._parentID],
      references: [product_pages.id],
      relationName: "_blocks_hero",
    }),
    features: many(product_pages_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations_product_pages_blocks_faq = relations(
  product_pages_blocks_faq,
  ({ one }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_faq._parentID],
      references: [product_pages.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [product_pages_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations_product_pages_blocks_about_benefits = relations(
  product_pages_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(product_pages_blocks_about, {
      fields: [product_pages_blocks_about_benefits._parentID],
      references: [product_pages_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations_product_pages_blocks_about = relations(
  product_pages_blocks_about,
  ({ one, many }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_about._parentID],
      references: [product_pages.id],
      relationName: "_blocks_about",
    }),
    benefits: many(product_pages_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations_product_pages_blocks_testimonials = relations(
  product_pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_testimonials._parentID],
      references: [product_pages.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [product_pages_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations_product_pages_blocks_gallery = relations(
  product_pages_blocks_gallery,
  ({ one }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_gallery._parentID],
      references: [product_pages.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [product_pages_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations_product_pages_blocks_cta_block = relations(
  product_pages_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(product_pages, {
      fields: [product_pages_blocks_cta_block._parentID],
      references: [product_pages.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [product_pages_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations_product_pages_rels = relations(
  product_pages_rels,
  ({ one }) => ({
    parent: one(product_pages, {
      fields: [product_pages_rels.parent],
      references: [product_pages.id],
      relationName: "_rels",
    }),
    ctasID: one(ctas, {
      fields: [product_pages_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [product_pages_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    testimonialsID: one(testimonials, {
      fields: [product_pages_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [product_pages_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    mediaID: one(media, {
      fields: [product_pages_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations_product_pages = relations(
  product_pages,
  ({ one, many }) => ({
    products: one(products, {
      fields: [product_pages.products],
      references: [products.id],
      relationName: "products",
    }),
    _blocks_product_form: many(product_pages_blocks_product_form, {
      relationName: "_blocks_product_form",
    }),
    _blocks_hero: many(product_pages_blocks_hero, {
      relationName: "_blocks_hero",
    }),
    _blocks_faq: many(product_pages_blocks_faq, {
      relationName: "_blocks_faq",
    }),
    _blocks_about: many(product_pages_blocks_about, {
      relationName: "_blocks_about",
    }),
    _blocks_testimonials: many(product_pages_blocks_testimonials, {
      relationName: "_blocks_testimonials",
    }),
    _blocks_gallery: many(product_pages_blocks_gallery, {
      relationName: "_blocks_gallery",
    }),
    _blocks_cta_block: many(product_pages_blocks_cta_block, {
      relationName: "_blocks_cta_block",
    }),
    meta_image: one(media, {
      fields: [product_pages.meta_image],
      references: [media.id],
      relationName: "meta_image",
    }),
    _rels: many(product_pages_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations__product_pages_v_blocks_product_form = relations(
  _product_pages_v_blocks_product_form,
  ({ one }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_product_form._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_product_form",
    }),
    product: one(products, {
      fields: [_product_pages_v_blocks_product_form.product],
      references: [products.id],
      relationName: "product",
    }),
  }),
);
export const relations__product_pages_v_blocks_hero_features = relations(
  _product_pages_v_blocks_hero_features,
  ({ one }) => ({
    _parentID: one(_product_pages_v_blocks_hero, {
      fields: [_product_pages_v_blocks_hero_features._parentID],
      references: [_product_pages_v_blocks_hero.id],
      relationName: "features",
    }),
  }),
);
export const relations__product_pages_v_blocks_hero = relations(
  _product_pages_v_blocks_hero,
  ({ one, many }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_hero._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_hero",
    }),
    features: many(_product_pages_v_blocks_hero_features, {
      relationName: "features",
    }),
  }),
);
export const relations__product_pages_v_blocks_faq = relations(
  _product_pages_v_blocks_faq,
  ({ one }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_faq._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_faq",
    }),
    faqCta: one(ctas, {
      fields: [_product_pages_v_blocks_faq.faqCta],
      references: [ctas.id],
      relationName: "faqCta",
    }),
  }),
);
export const relations__product_pages_v_blocks_about_benefits = relations(
  _product_pages_v_blocks_about_benefits,
  ({ one }) => ({
    _parentID: one(_product_pages_v_blocks_about, {
      fields: [_product_pages_v_blocks_about_benefits._parentID],
      references: [_product_pages_v_blocks_about.id],
      relationName: "benefits",
    }),
  }),
);
export const relations__product_pages_v_blocks_about = relations(
  _product_pages_v_blocks_about,
  ({ one, many }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_about._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_about",
    }),
    benefits: many(_product_pages_v_blocks_about_benefits, {
      relationName: "benefits",
    }),
  }),
);
export const relations__product_pages_v_blocks_testimonials = relations(
  _product_pages_v_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_testimonials._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_testimonials",
    }),
    googleReviewCta: one(ctas, {
      fields: [_product_pages_v_blocks_testimonials.googleReviewCta],
      references: [ctas.id],
      relationName: "googleReviewCta",
    }),
  }),
);
export const relations__product_pages_v_blocks_gallery = relations(
  _product_pages_v_blocks_gallery,
  ({ one }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_gallery._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_gallery",
    }),
    galleryCta: one(ctas, {
      fields: [_product_pages_v_blocks_gallery.galleryCta],
      references: [ctas.id],
      relationName: "galleryCta",
    }),
  }),
);
export const relations__product_pages_v_blocks_cta_block = relations(
  _product_pages_v_blocks_cta_block,
  ({ one }) => ({
    _parentID: one(_product_pages_v, {
      fields: [_product_pages_v_blocks_cta_block._parentID],
      references: [_product_pages_v.id],
      relationName: "_blocks_cta_block",
    }),
    cta: one(ctas, {
      fields: [_product_pages_v_blocks_cta_block.cta],
      references: [ctas.id],
      relationName: "cta",
    }),
  }),
);
export const relations__product_pages_v_rels = relations(
  _product_pages_v_rels,
  ({ one }) => ({
    parent: one(_product_pages_v, {
      fields: [_product_pages_v_rels.parent],
      references: [_product_pages_v.id],
      relationName: "_rels",
    }),
    ctasID: one(ctas, {
      fields: [_product_pages_v_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [_product_pages_v_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    testimonialsID: one(testimonials, {
      fields: [_product_pages_v_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [_product_pages_v_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    mediaID: one(media, {
      fields: [_product_pages_v_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations__product_pages_v = relations(
  _product_pages_v,
  ({ one, many }) => ({
    parent: one(product_pages, {
      fields: [_product_pages_v.parent],
      references: [product_pages.id],
      relationName: "parent",
    }),
    version_products: one(products, {
      fields: [_product_pages_v.version_products],
      references: [products.id],
      relationName: "version_products",
    }),
    _blocks_product_form: many(_product_pages_v_blocks_product_form, {
      relationName: "_blocks_product_form",
    }),
    _blocks_hero: many(_product_pages_v_blocks_hero, {
      relationName: "_blocks_hero",
    }),
    _blocks_faq: many(_product_pages_v_blocks_faq, {
      relationName: "_blocks_faq",
    }),
    _blocks_about: many(_product_pages_v_blocks_about, {
      relationName: "_blocks_about",
    }),
    _blocks_testimonials: many(_product_pages_v_blocks_testimonials, {
      relationName: "_blocks_testimonials",
    }),
    _blocks_gallery: many(_product_pages_v_blocks_gallery, {
      relationName: "_blocks_gallery",
    }),
    _blocks_cta_block: many(_product_pages_v_blocks_cta_block, {
      relationName: "_blocks_cta_block",
    }),
    version_meta_image: one(media, {
      fields: [_product_pages_v.version_meta_image],
      references: [media.id],
      relationName: "version_meta_image",
    }),
    _rels: many(_product_pages_v_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_redirects = relations(redirects, ({ one }) => ({
  tenant: one(tenants, {
    fields: [redirects.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
}));
export const relations_pricelists_rels = relations(
  pricelists_rels,
  ({ one }) => ({
    parent: one(pricelists, {
      fields: [pricelists_rels.parent],
      references: [pricelists.id],
      relationName: "_rels",
    }),
    "price-list-sectionsID": one(price_list_sections, {
      fields: [pricelists_rels["price-list-sectionsID"]],
      references: [price_list_sections.id],
      relationName: "price-list-sections",
    }),
  }),
);
export const relations_pricelists = relations(pricelists, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [pricelists.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  callToAction: one(ctas, {
    fields: [pricelists.callToAction],
    references: [ctas.id],
    relationName: "callToAction",
  }),
  _rels: many(pricelists_rels, {
    relationName: "_rels",
  }),
}));
export const relations_price_list_sections = relations(
  price_list_sections,
  ({ one }) => ({
    tenant: one(tenants, {
      fields: [price_list_sections.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
  }),
);
export const relations_price_list_items = relations(
  price_list_items,
  ({ one }) => ({
    tenant: one(tenants, {
      fields: [price_list_items.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    section: one(price_list_sections, {
      fields: [price_list_items.section],
      references: [price_list_sections.id],
      relationName: "section",
    }),
  }),
);
export const relations_banners = relations(banners, ({ one }) => ({
  tenant: one(tenants, {
    fields: [banners.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  cta: one(ctas, {
    fields: [banners.cta],
    references: [ctas.id],
    relationName: "cta",
  }),
}));
export const relations_menus_menu_items_children = relations(
  menus_menu_items_children,
  ({ one }) => ({
    _parentID: one(menus_menu_items, {
      fields: [menus_menu_items_children._parentID],
      references: [menus_menu_items.id],
      relationName: "children",
    }),
  }),
);
export const relations_menus_menu_items = relations(
  menus_menu_items,
  ({ one, many }) => ({
    _parentID: one(menus, {
      fields: [menus_menu_items._parentID],
      references: [menus.id],
      relationName: "menuItems",
    }),
    children: many(menus_menu_items_children, {
      relationName: "children",
    }),
  }),
);
export const relations_menus = relations(menus, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [menus.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  menuItems: many(menus_menu_items, {
    relationName: "menuItems",
  }),
}));
export const relations_products_variant_option_types = relations(
  products_variant_option_types,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_variant_option_types._parentID],
      references: [products.id],
      relationName: "variantOptionTypes",
    }),
  }),
);
export const relations_products_technical_specs = relations(
  products_technical_specs,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_technical_specs._parentID],
      references: [products.id],
      relationName: "technicalSpecs",
    }),
  }),
);
export const relations_products_highlights = relations(
  products_highlights,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_highlights._parentID],
      references: [products.id],
      relationName: "highlights",
    }),
  }),
);
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [products_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
}));
export const relations_products = relations(products, ({ one, many }) => ({
  collection: one(collections, {
    fields: [products.collection],
    references: [collections.id],
    relationName: "collection",
  }),
  variantOptionTypes: many(products_variant_option_types, {
    relationName: "variantOptionTypes",
  }),
  technicalSpecs: many(products_technical_specs, {
    relationName: "technicalSpecs",
  }),
  image: one(media, {
    fields: [products.image],
    references: [media.id],
    relationName: "image",
  }),
  highlights: many(products_highlights, {
    relationName: "highlights",
  }),
  _rels: many(products_rels, {
    relationName: "_rels",
  }),
}));
export const relations_product_variants_variant_options = relations(
  product_variants_variant_options,
  ({ one }) => ({
    _parentID: one(product_variants, {
      fields: [product_variants_variant_options._parentID],
      references: [product_variants.id],
      relationName: "variantOptions",
    }),
  }),
);
export const relations_product_variants = relations(
  product_variants,
  ({ one, many }) => ({
    product: one(products, {
      fields: [product_variants.product],
      references: [products.id],
      relationName: "product",
    }),
    variantOptions: many(product_variants_variant_options, {
      relationName: "variantOptions",
    }),
    image: one(media, {
      fields: [product_variants.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations_collections = relations(collections, ({ one }) => ({
  image: one(media, {
    fields: [collections.image],
    references: [media.id],
    relationName: "image",
  }),
}));
export const relations_posts_populated_authors = relations(
  posts_populated_authors,
  ({ one }) => ({
    _parentID: one(posts, {
      fields: [posts_populated_authors._parentID],
      references: [posts.id],
      relationName: "populatedAuthors",
    }),
  }),
);
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
}));
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: "heroImage",
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: "populatedAuthors",
  }),
  _rels: many(posts_rels, {
    relationName: "_rels",
  }),
}));
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: "version_populatedAuthors",
    }),
  }),
);
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: "_rels",
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: "posts",
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
}));
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: "parent",
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: "version_heroImage",
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: "version_meta_image",
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: "version_populatedAuthors",
  }),
  _rels: many(_posts_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_customers = relations(customers, () => ({}));
export const relations_orders = relations(orders, ({ one }) => ({
  customer: one(customers, {
    fields: [orders.customer],
    references: [customers.id],
    relationName: "customer",
  }),
  product: one(products, {
    fields: [orders.product],
    references: [products.id],
    relationName: "product",
  }),
}));
export const relations_business_info_platforms = relations(
  business_info_platforms,
  ({ one }) => ({
    _parentID: one(business_info, {
      fields: [business_info_platforms._parentID],
      references: [business_info.id],
      relationName: "platforms",
    }),
  }),
);
export const relations_business_info = relations(
  business_info,
  ({ one, many }) => ({
    tenant: one(tenants, {
      fields: [business_info.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    logo: one(media, {
      fields: [business_info.logo],
      references: [media.id],
      relationName: "logo",
    }),
    logoLight: one(media, {
      fields: [business_info.logoLight],
      references: [media.id],
      relationName: "logoLight",
    }),
    platforms: many(business_info_platforms, {
      relationName: "platforms",
    }),
  }),
);
export const relations_navbar = relations(navbar, ({ one }) => ({
  tenant: one(tenants, {
    fields: [navbar.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  mainMenu: one(menus, {
    fields: [navbar.mainMenu],
    references: [menus.id],
    relationName: "mainMenu",
  }),
  mainCta: one(ctas, {
    fields: [navbar.mainCta],
    references: [ctas.id],
    relationName: "mainCta",
  }),
}));
export const relations_footer_blocks_menu_section = relations(
  footer_blocks_menu_section,
  ({ one }) => ({
    _parentID: one(footer, {
      fields: [footer_blocks_menu_section._parentID],
      references: [footer.id],
      relationName: "_blocks_menuSection",
    }),
    menu: one(menus, {
      fields: [footer_blocks_menu_section.menu],
      references: [menus.id],
      relationName: "menu",
    }),
  }),
);
export const relations_footer = relations(footer, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [footer.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  _blocks_menuSection: many(footer_blocks_menu_section, {
    relationName: "_blocks_menuSection",
  }),
  socialMenu: one(menus, {
    fields: [footer.socialMenu],
    references: [menus.id],
    relationName: "socialMenu",
  }),
}));
export const relations_tenants_typography_heading_font_weights = relations(
  tenants_typography_heading_font_weights,
  ({ one }) => ({
    _parentID: one(tenants, {
      fields: [tenants_typography_heading_font_weights._parentID],
      references: [tenants.id],
      relationName: "typography_headingFont_weights",
    }),
  }),
);
export const relations_tenants_typography_heading_font_subsets = relations(
  tenants_typography_heading_font_subsets,
  ({ one }) => ({
    _parentID: one(tenants, {
      fields: [tenants_typography_heading_font_subsets._parentID],
      references: [tenants.id],
      relationName: "typography_headingFont_subsets",
    }),
  }),
);
export const relations_tenants_typography_body_font_weights = relations(
  tenants_typography_body_font_weights,
  ({ one }) => ({
    _parentID: one(tenants, {
      fields: [tenants_typography_body_font_weights._parentID],
      references: [tenants.id],
      relationName: "typography_bodyFont_weights",
    }),
  }),
);
export const relations_tenants_typography_body_font_subsets = relations(
  tenants_typography_body_font_subsets,
  ({ one }) => ({
    _parentID: one(tenants, {
      fields: [tenants_typography_body_font_subsets._parentID],
      references: [tenants.id],
      relationName: "typography_bodyFont_subsets",
    }),
  }),
);
export const relations_tenants = relations(tenants, ({ many }) => ({
  typography_headingFont_weights: many(
    tenants_typography_heading_font_weights,
    {
      relationName: "typography_headingFont_weights",
    },
  ),
  typography_headingFont_subsets: many(
    tenants_typography_heading_font_subsets,
    {
      relationName: "typography_headingFont_subsets",
    },
  ),
  typography_bodyFont_weights: many(tenants_typography_body_font_weights, {
    relationName: "typography_bodyFont_weights",
  }),
  typography_bodyFont_subsets: many(tenants_typography_body_font_subsets, {
    relationName: "typography_bodyFont_subsets",
  }),
}));
export const relations_forms_blocks_checkbox = relations(
  forms_blocks_checkbox,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_checkbox._parentID],
      references: [forms.id],
      relationName: "_blocks_checkbox",
    }),
  }),
);
export const relations_forms_blocks_country = relations(
  forms_blocks_country,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_country._parentID],
      references: [forms.id],
      relationName: "_blocks_country",
    }),
  }),
);
export const relations_forms_blocks_email = relations(
  forms_blocks_email,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_email._parentID],
      references: [forms.id],
      relationName: "_blocks_email",
    }),
  }),
);
export const relations_forms_blocks_message = relations(
  forms_blocks_message,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_message._parentID],
      references: [forms.id],
      relationName: "_blocks_message",
    }),
  }),
);
export const relations_forms_blocks_number = relations(
  forms_blocks_number,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_number._parentID],
      references: [forms.id],
      relationName: "_blocks_number",
    }),
  }),
);
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: "options",
    }),
  }),
);
export const relations_forms_blocks_select = relations(
  forms_blocks_select,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_select._parentID],
      references: [forms.id],
      relationName: "_blocks_select",
    }),
    options: many(forms_blocks_select_options, {
      relationName: "options",
    }),
  }),
);
export const relations_forms_blocks_state = relations(
  forms_blocks_state,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_state._parentID],
      references: [forms.id],
      relationName: "_blocks_state",
    }),
  }),
);
export const relations_forms_blocks_text = relations(
  forms_blocks_text,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_text._parentID],
      references: [forms.id],
      relationName: "_blocks_text",
    }),
  }),
);
export const relations_forms_blocks_textarea = relations(
  forms_blocks_textarea,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_textarea._parentID],
      references: [forms.id],
      relationName: "_blocks_textarea",
    }),
  }),
);
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: "emails",
  }),
}));
export const relations_forms_rels = relations(forms_rels, ({ one }) => ({
  parent: one(forms, {
    fields: [forms_rels.parent],
    references: [forms.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [forms_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  "service-pagesID": one(service_pages, {
    fields: [forms_rels["service-pagesID"]],
    references: [service_pages.id],
    relationName: "service-pages",
  }),
}));
export const relations_forms = relations(forms, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [forms.tenant],
    references: [tenants.id],
    relationName: "tenant",
  }),
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: "_blocks_checkbox",
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: "_blocks_country",
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: "_blocks_email",
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: "_blocks_message",
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: "_blocks_number",
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: "_blocks_select",
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: "_blocks_state",
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: "_blocks_text",
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: "_blocks_textarea",
  }),
  emails: many(forms_emails, {
    relationName: "emails",
  }),
  _rels: many(forms_rels, {
    relationName: "_rels",
  }),
}));
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: "submissionData",
    }),
  }),
);
export const relations_form_submissions = relations(
  form_submissions,
  ({ one, many }) => ({
    tenant: one(tenants, {
      fields: [form_submissions.tenant],
      references: [tenants.id],
      relationName: "tenant",
    }),
    form: one(forms, {
      fields: [form_submissions.form],
      references: [forms.id],
      relationName: "form",
    }),
    submissionData: many(form_submissions_submission_data, {
      relationName: "submissionData",
    }),
  }),
);
export const relations_payload_jobs_log = relations(
  payload_jobs_log,
  ({ one }) => ({
    _parentID: one(payload_jobs, {
      fields: [payload_jobs_log._parentID],
      references: [payload_jobs.id],
      relationName: "log",
    }),
  }),
);
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: "log",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    highQualityMediaID: one(high_quality_media, {
      fields: [payload_locked_documents_rels.highQualityMediaID],
      references: [high_quality_media.id],
      relationName: "highQualityMedia",
    }),
    machineryID: one(machinery, {
      fields: [payload_locked_documents_rels.machineryID],
      references: [machinery.id],
      relationName: "machinery",
    }),
    servicesID: one(services, {
      fields: [payload_locked_documents_rels.servicesID],
      references: [services.id],
      relationName: "services",
    }),
    testimonialsID: one(testimonials, {
      fields: [payload_locked_documents_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    "faq-itemsID": one(faq_items, {
      fields: [payload_locked_documents_rels["faq-itemsID"]],
      references: [faq_items.id],
      relationName: "faq-items",
    }),
    ctasID: one(ctas, {
      fields: [payload_locked_documents_rels.ctasID],
      references: [ctas.id],
      relationName: "ctas",
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: "projects",
    }),
    "opening-hoursID": one(opening_hours, {
      fields: [payload_locked_documents_rels["opening-hoursID"]],
      references: [opening_hours.id],
      relationName: "opening-hours",
    }),
    sub_servicesID: one(sub_services, {
      fields: [payload_locked_documents_rels.sub_servicesID],
      references: [sub_services.id],
      relationName: "sub_services",
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    "service-pagesID": one(service_pages, {
      fields: [payload_locked_documents_rels["service-pagesID"]],
      references: [service_pages.id],
      relationName: "service-pages",
    }),
    "project-pagesID": one(project_pages, {
      fields: [payload_locked_documents_rels["project-pagesID"]],
      references: [project_pages.id],
      relationName: "project-pages",
    }),
    "product-pagesID": one(product_pages, {
      fields: [payload_locked_documents_rels["product-pagesID"]],
      references: [product_pages.id],
      relationName: "product-pages",
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: "redirects",
    }),
    pricelistsID: one(pricelists, {
      fields: [payload_locked_documents_rels.pricelistsID],
      references: [pricelists.id],
      relationName: "pricelists",
    }),
    "price-list-sectionsID": one(price_list_sections, {
      fields: [payload_locked_documents_rels["price-list-sectionsID"]],
      references: [price_list_sections.id],
      relationName: "price-list-sections",
    }),
    "price-list-itemsID": one(price_list_items, {
      fields: [payload_locked_documents_rels["price-list-itemsID"]],
      references: [price_list_items.id],
      relationName: "price-list-items",
    }),
    bannersID: one(banners, {
      fields: [payload_locked_documents_rels.bannersID],
      references: [banners.id],
      relationName: "banners",
    }),
    menusID: one(menus, {
      fields: [payload_locked_documents_rels.menusID],
      references: [menus.id],
      relationName: "menus",
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: "products",
    }),
    "product-variantsID": one(product_variants, {
      fields: [payload_locked_documents_rels["product-variantsID"]],
      references: [product_variants.id],
      relationName: "product-variants",
    }),
    collectionsID: one(collections, {
      fields: [payload_locked_documents_rels.collectionsID],
      references: [collections.id],
      relationName: "collections",
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: "posts",
    }),
    customersID: one(customers, {
      fields: [payload_locked_documents_rels.customersID],
      references: [customers.id],
      relationName: "customers",
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: "orders",
    }),
    "business-infoID": one(business_info, {
      fields: [payload_locked_documents_rels["business-infoID"]],
      references: [business_info.id],
      relationName: "business-info",
    }),
    navbarID: one(navbar, {
      fields: [payload_locked_documents_rels.navbarID],
      references: [navbar.id],
      relationName: "navbar",
    }),
    footerID: one(footer, {
      fields: [payload_locked_documents_rels.footerID],
      references: [footer.id],
      relationName: "footer",
    }),
    tenantsID: one(tenants, {
      fields: [payload_locked_documents_rels.tenantsID],
      references: [tenants.id],
      relationName: "tenants",
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: "forms",
    }),
    "form-submissionsID": one(form_submissions, {
      fields: [payload_locked_documents_rels["form-submissionsID"]],
      references: [form_submissions.id],
      relationName: "form-submissions",
    }),
    "payload-jobsID": one(payload_jobs, {
      fields: [payload_locked_documents_rels["payload-jobsID"]],
      references: [payload_jobs.id],
      relationName: "payload-jobs",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_users_roles: typeof enum_users_roles;
  enum_users_tenants_roles: typeof enum_users_tenants_roles;
  enum_media_source: typeof enum_media_source;
  enum_services_icon: typeof enum_services_icon;
  enum_testimonials_source: typeof enum_testimonials_source;
  enum_faq_items_category: typeof enum_faq_items_category;
  enum_ctas_tc: typeof enum_ctas_tc;
  enum_ctas_sc: typeof enum_ctas_sc;
  enum_ctas_dc: typeof enum_ctas_dc;
  enum_ctas_bgc: typeof enum_ctas_bgc;
  enum_ctas_icon: typeof enum_ctas_icon;
  enum_ctas_bv: typeof enum_ctas_bv;
  enum_projects_project_status: typeof enum_projects_project_status;
  enum_projects_source: typeof enum_projects_source;
  enum_opening_hours_daily_hours_days: typeof enum_opening_hours_daily_hours_days;
  enum_sub_services_icon: typeof enum_sub_services_icon;
  enum_sub_services_status: typeof enum_sub_services_status;
  enum__sub_services_v_version_icon: typeof enum__sub_services_v_version_icon;
  enum__sub_services_v_version_status: typeof enum__sub_services_v_version_status;
  enum_pages_blocks_hero_template: typeof enum_pages_blocks_hero_template;
  enum_pages_blocks_hero_bgc: typeof enum_pages_blocks_hero_bgc;
  enum_pages_blocks_hero_tc: typeof enum_pages_blocks_hero_tc;
  enum_pages_blocks_hero_sc: typeof enum_pages_blocks_hero_sc;
  enum_pages_blocks_hero_dc: typeof enum_pages_blocks_hero_dc;
  enum_pages_blocks_services_template: typeof enum_pages_blocks_services_template;
  enum_pages_blocks_services_bgc: typeof enum_pages_blocks_services_bgc;
  enum_pages_blocks_services_tc: typeof enum_pages_blocks_services_tc;
  enum_pages_blocks_services_sc: typeof enum_pages_blocks_services_sc;
  enum_pages_blocks_services_dc: typeof enum_pages_blocks_services_dc;
  enum_pages_blocks_faq_template: typeof enum_pages_blocks_faq_template;
  enum_pages_blocks_faq_bgc: typeof enum_pages_blocks_faq_bgc;
  enum_pages_blocks_faq_tc: typeof enum_pages_blocks_faq_tc;
  enum_pages_blocks_faq_sc: typeof enum_pages_blocks_faq_sc;
  enum_pages_blocks_faq_dc: typeof enum_pages_blocks_faq_dc;
  enum_pages_blocks_contact_template: typeof enum_pages_blocks_contact_template;
  enum_pages_blocks_contact_bgc: typeof enum_pages_blocks_contact_bgc;
  enum_pages_blocks_contact_tc: typeof enum_pages_blocks_contact_tc;
  enum_pages_blocks_contact_sc: typeof enum_pages_blocks_contact_sc;
  enum_pages_blocks_contact_dc: typeof enum_pages_blocks_contact_dc;
  enum_pages_blocks_about_benefits_icon: typeof enum_pages_blocks_about_benefits_icon;
  enum_pages_blocks_about_template: typeof enum_pages_blocks_about_template;
  enum_pages_blocks_about_tc: typeof enum_pages_blocks_about_tc;
  enum_pages_blocks_about_sc: typeof enum_pages_blocks_about_sc;
  enum_pages_blocks_about_dc: typeof enum_pages_blocks_about_dc;
  enum_pages_blocks_about_bgc: typeof enum_pages_blocks_about_bgc;
  enum_pages_blocks_testimonials_template: typeof enum_pages_blocks_testimonials_template;
  enum_pages_blocks_testimonials_bgc: typeof enum_pages_blocks_testimonials_bgc;
  enum_pages_blocks_testimonials_tc: typeof enum_pages_blocks_testimonials_tc;
  enum_pages_blocks_testimonials_sc: typeof enum_pages_blocks_testimonials_sc;
  enum_pages_blocks_testimonials_dc: typeof enum_pages_blocks_testimonials_dc;
  enum_pages_blocks_gallery_template: typeof enum_pages_blocks_gallery_template;
  enum_pages_blocks_gallery_bgc: typeof enum_pages_blocks_gallery_bgc;
  enum_pages_blocks_gallery_tc: typeof enum_pages_blocks_gallery_tc;
  enum_pages_blocks_gallery_sc: typeof enum_pages_blocks_gallery_sc;
  enum_pages_blocks_gallery_dc: typeof enum_pages_blocks_gallery_dc;
  enum_pages_blocks_service_area_template: typeof enum_pages_blocks_service_area_template;
  enum_pages_blocks_service_area_bgc: typeof enum_pages_blocks_service_area_bgc;
  enum_pages_blocks_service_area_tc: typeof enum_pages_blocks_service_area_tc;
  enum_pages_blocks_service_area_sc: typeof enum_pages_blocks_service_area_sc;
  enum_pages_blocks_service_area_dc: typeof enum_pages_blocks_service_area_dc;
  enum_pages_blocks_project_highlights_template: typeof enum_pages_blocks_project_highlights_template;
  enum_pages_blocks_project_highlights_bgc: typeof enum_pages_blocks_project_highlights_bgc;
  enum_pages_blocks_project_highlights_tc: typeof enum_pages_blocks_project_highlights_tc;
  enum_pages_blocks_project_highlights_sc: typeof enum_pages_blocks_project_highlights_sc;
  enum_pages_blocks_project_highlights_dc: typeof enum_pages_blocks_project_highlights_dc;
  enum_pages_blocks_machinery_template: typeof enum_pages_blocks_machinery_template;
  enum_pages_blocks_machinery_bgc: typeof enum_pages_blocks_machinery_bgc;
  enum_pages_blocks_machinery_tc: typeof enum_pages_blocks_machinery_tc;
  enum_pages_blocks_machinery_sc: typeof enum_pages_blocks_machinery_sc;
  enum_pages_blocks_machinery_dc: typeof enum_pages_blocks_machinery_dc;
  enum_pages_blocks_form_block_bgc: typeof enum_pages_blocks_form_block_bgc;
  enum_pages_blocks_form_block_tc: typeof enum_pages_blocks_form_block_tc;
  enum_pages_blocks_form_block_sc: typeof enum_pages_blocks_form_block_sc;
  enum_pages_blocks_form_block_dc: typeof enum_pages_blocks_form_block_dc;
  enum_pages_blocks_howto_bgc: typeof enum_pages_blocks_howto_bgc;
  enum_pages_blocks_howto_tc: typeof enum_pages_blocks_howto_tc;
  enum_pages_blocks_howto_sc: typeof enum_pages_blocks_howto_sc;
  enum_pages_blocks_howto_dc: typeof enum_pages_blocks_howto_dc;
  enum_pages_blocks_howto_template: typeof enum_pages_blocks_howto_template;
  enum_pages_blocks_cta_block_template: typeof enum_pages_blocks_cta_block_template;
  enum_pages_blocks_cta_block_bgc: typeof enum_pages_blocks_cta_block_bgc;
  enum_pages_blocks_cta_block_tc: typeof enum_pages_blocks_cta_block_tc;
  enum_pages_blocks_cta_block_sc: typeof enum_pages_blocks_cta_block_sc;
  enum_pages_blocks_cta_block_dc: typeof enum_pages_blocks_cta_block_dc;
  enum_pages_blocks_featured_products_template: typeof enum_pages_blocks_featured_products_template;
  enum_pages_blocks_featured_products_bgc: typeof enum_pages_blocks_featured_products_bgc;
  enum_pages_blocks_featured_products_tc: typeof enum_pages_blocks_featured_products_tc;
  enum_pages_blocks_featured_products_sc: typeof enum_pages_blocks_featured_products_sc;
  enum_pages_blocks_featured_products_dc: typeof enum_pages_blocks_featured_products_dc;
  enum_pages_blocks_text_template: typeof enum_pages_blocks_text_template;
  enum_pages_blocks_text_bgc: typeof enum_pages_blocks_text_bgc;
  enum_pages_page_type: typeof enum_pages_page_type;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_blocks_hero_template: typeof enum__pages_v_blocks_hero_template;
  enum__pages_v_blocks_hero_bgc: typeof enum__pages_v_blocks_hero_bgc;
  enum__pages_v_blocks_hero_tc: typeof enum__pages_v_blocks_hero_tc;
  enum__pages_v_blocks_hero_sc: typeof enum__pages_v_blocks_hero_sc;
  enum__pages_v_blocks_hero_dc: typeof enum__pages_v_blocks_hero_dc;
  enum__pages_v_blocks_services_template: typeof enum__pages_v_blocks_services_template;
  enum__pages_v_blocks_services_bgc: typeof enum__pages_v_blocks_services_bgc;
  enum__pages_v_blocks_services_tc: typeof enum__pages_v_blocks_services_tc;
  enum__pages_v_blocks_services_sc: typeof enum__pages_v_blocks_services_sc;
  enum__pages_v_blocks_services_dc: typeof enum__pages_v_blocks_services_dc;
  enum__pages_v_blocks_faq_template: typeof enum__pages_v_blocks_faq_template;
  enum__pages_v_blocks_faq_bgc: typeof enum__pages_v_blocks_faq_bgc;
  enum__pages_v_blocks_faq_tc: typeof enum__pages_v_blocks_faq_tc;
  enum__pages_v_blocks_faq_sc: typeof enum__pages_v_blocks_faq_sc;
  enum__pages_v_blocks_faq_dc: typeof enum__pages_v_blocks_faq_dc;
  enum__pages_v_blocks_contact_template: typeof enum__pages_v_blocks_contact_template;
  enum__pages_v_blocks_contact_bgc: typeof enum__pages_v_blocks_contact_bgc;
  enum__pages_v_blocks_contact_tc: typeof enum__pages_v_blocks_contact_tc;
  enum__pages_v_blocks_contact_sc: typeof enum__pages_v_blocks_contact_sc;
  enum__pages_v_blocks_contact_dc: typeof enum__pages_v_blocks_contact_dc;
  enum__pages_v_blocks_about_benefits_icon: typeof enum__pages_v_blocks_about_benefits_icon;
  enum__pages_v_blocks_about_template: typeof enum__pages_v_blocks_about_template;
  enum__pages_v_blocks_about_tc: typeof enum__pages_v_blocks_about_tc;
  enum__pages_v_blocks_about_sc: typeof enum__pages_v_blocks_about_sc;
  enum__pages_v_blocks_about_dc: typeof enum__pages_v_blocks_about_dc;
  enum__pages_v_blocks_about_bgc: typeof enum__pages_v_blocks_about_bgc;
  enum__pages_v_blocks_testimonials_template: typeof enum__pages_v_blocks_testimonials_template;
  enum__pages_v_blocks_testimonials_bgc: typeof enum__pages_v_blocks_testimonials_bgc;
  enum__pages_v_blocks_testimonials_tc: typeof enum__pages_v_blocks_testimonials_tc;
  enum__pages_v_blocks_testimonials_sc: typeof enum__pages_v_blocks_testimonials_sc;
  enum__pages_v_blocks_testimonials_dc: typeof enum__pages_v_blocks_testimonials_dc;
  enum__pages_v_blocks_gallery_template: typeof enum__pages_v_blocks_gallery_template;
  enum__pages_v_blocks_gallery_bgc: typeof enum__pages_v_blocks_gallery_bgc;
  enum__pages_v_blocks_gallery_tc: typeof enum__pages_v_blocks_gallery_tc;
  enum__pages_v_blocks_gallery_sc: typeof enum__pages_v_blocks_gallery_sc;
  enum__pages_v_blocks_gallery_dc: typeof enum__pages_v_blocks_gallery_dc;
  enum__pages_v_blocks_service_area_template: typeof enum__pages_v_blocks_service_area_template;
  enum__pages_v_blocks_service_area_bgc: typeof enum__pages_v_blocks_service_area_bgc;
  enum__pages_v_blocks_service_area_tc: typeof enum__pages_v_blocks_service_area_tc;
  enum__pages_v_blocks_service_area_sc: typeof enum__pages_v_blocks_service_area_sc;
  enum__pages_v_blocks_service_area_dc: typeof enum__pages_v_blocks_service_area_dc;
  enum__pages_v_blocks_project_highlights_template: typeof enum__pages_v_blocks_project_highlights_template;
  enum__pages_v_blocks_project_highlights_bgc: typeof enum__pages_v_blocks_project_highlights_bgc;
  enum__pages_v_blocks_project_highlights_tc: typeof enum__pages_v_blocks_project_highlights_tc;
  enum__pages_v_blocks_project_highlights_sc: typeof enum__pages_v_blocks_project_highlights_sc;
  enum__pages_v_blocks_project_highlights_dc: typeof enum__pages_v_blocks_project_highlights_dc;
  enum__pages_v_blocks_machinery_template: typeof enum__pages_v_blocks_machinery_template;
  enum__pages_v_blocks_machinery_bgc: typeof enum__pages_v_blocks_machinery_bgc;
  enum__pages_v_blocks_machinery_tc: typeof enum__pages_v_blocks_machinery_tc;
  enum__pages_v_blocks_machinery_sc: typeof enum__pages_v_blocks_machinery_sc;
  enum__pages_v_blocks_machinery_dc: typeof enum__pages_v_blocks_machinery_dc;
  enum__pages_v_blocks_form_block_bgc: typeof enum__pages_v_blocks_form_block_bgc;
  enum__pages_v_blocks_form_block_tc: typeof enum__pages_v_blocks_form_block_tc;
  enum__pages_v_blocks_form_block_sc: typeof enum__pages_v_blocks_form_block_sc;
  enum__pages_v_blocks_form_block_dc: typeof enum__pages_v_blocks_form_block_dc;
  enum__pages_v_blocks_howto_bgc: typeof enum__pages_v_blocks_howto_bgc;
  enum__pages_v_blocks_howto_tc: typeof enum__pages_v_blocks_howto_tc;
  enum__pages_v_blocks_howto_sc: typeof enum__pages_v_blocks_howto_sc;
  enum__pages_v_blocks_howto_dc: typeof enum__pages_v_blocks_howto_dc;
  enum__pages_v_blocks_howto_template: typeof enum__pages_v_blocks_howto_template;
  enum__pages_v_blocks_cta_block_template: typeof enum__pages_v_blocks_cta_block_template;
  enum__pages_v_blocks_cta_block_bgc: typeof enum__pages_v_blocks_cta_block_bgc;
  enum__pages_v_blocks_cta_block_tc: typeof enum__pages_v_blocks_cta_block_tc;
  enum__pages_v_blocks_cta_block_sc: typeof enum__pages_v_blocks_cta_block_sc;
  enum__pages_v_blocks_cta_block_dc: typeof enum__pages_v_blocks_cta_block_dc;
  enum__pages_v_blocks_featured_products_template: typeof enum__pages_v_blocks_featured_products_template;
  enum__pages_v_blocks_featured_products_bgc: typeof enum__pages_v_blocks_featured_products_bgc;
  enum__pages_v_blocks_featured_products_tc: typeof enum__pages_v_blocks_featured_products_tc;
  enum__pages_v_blocks_featured_products_sc: typeof enum__pages_v_blocks_featured_products_sc;
  enum__pages_v_blocks_featured_products_dc: typeof enum__pages_v_blocks_featured_products_dc;
  enum__pages_v_blocks_text_template: typeof enum__pages_v_blocks_text_template;
  enum__pages_v_blocks_text_bgc: typeof enum__pages_v_blocks_text_bgc;
  enum__pages_v_version_page_type: typeof enum__pages_v_version_page_type;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_service_pages_blocks_hero_template: typeof enum_service_pages_blocks_hero_template;
  enum_service_pages_blocks_hero_bgc: typeof enum_service_pages_blocks_hero_bgc;
  enum_service_pages_blocks_hero_tc: typeof enum_service_pages_blocks_hero_tc;
  enum_service_pages_blocks_hero_sc: typeof enum_service_pages_blocks_hero_sc;
  enum_service_pages_blocks_hero_dc: typeof enum_service_pages_blocks_hero_dc;
  enum_service_pages_blocks_services_template: typeof enum_service_pages_blocks_services_template;
  enum_service_pages_blocks_services_bgc: typeof enum_service_pages_blocks_services_bgc;
  enum_service_pages_blocks_services_tc: typeof enum_service_pages_blocks_services_tc;
  enum_service_pages_blocks_services_sc: typeof enum_service_pages_blocks_services_sc;
  enum_service_pages_blocks_services_dc: typeof enum_service_pages_blocks_services_dc;
  enum_service_pages_blocks_faq_template: typeof enum_service_pages_blocks_faq_template;
  enum_service_pages_blocks_faq_bgc: typeof enum_service_pages_blocks_faq_bgc;
  enum_service_pages_blocks_faq_tc: typeof enum_service_pages_blocks_faq_tc;
  enum_service_pages_blocks_faq_sc: typeof enum_service_pages_blocks_faq_sc;
  enum_service_pages_blocks_faq_dc: typeof enum_service_pages_blocks_faq_dc;
  enum_service_pages_blocks_contact_template: typeof enum_service_pages_blocks_contact_template;
  enum_service_pages_blocks_contact_bgc: typeof enum_service_pages_blocks_contact_bgc;
  enum_service_pages_blocks_contact_tc: typeof enum_service_pages_blocks_contact_tc;
  enum_service_pages_blocks_contact_sc: typeof enum_service_pages_blocks_contact_sc;
  enum_service_pages_blocks_contact_dc: typeof enum_service_pages_blocks_contact_dc;
  enum_service_pages_blocks_about_benefits_icon: typeof enum_service_pages_blocks_about_benefits_icon;
  enum_service_pages_blocks_about_template: typeof enum_service_pages_blocks_about_template;
  enum_service_pages_blocks_about_tc: typeof enum_service_pages_blocks_about_tc;
  enum_service_pages_blocks_about_sc: typeof enum_service_pages_blocks_about_sc;
  enum_service_pages_blocks_about_dc: typeof enum_service_pages_blocks_about_dc;
  enum_service_pages_blocks_about_bgc: typeof enum_service_pages_blocks_about_bgc;
  enum_service_pages_blocks_testimonials_template: typeof enum_service_pages_blocks_testimonials_template;
  enum_service_pages_blocks_testimonials_bgc: typeof enum_service_pages_blocks_testimonials_bgc;
  enum_service_pages_blocks_testimonials_tc: typeof enum_service_pages_blocks_testimonials_tc;
  enum_service_pages_blocks_testimonials_sc: typeof enum_service_pages_blocks_testimonials_sc;
  enum_service_pages_blocks_testimonials_dc: typeof enum_service_pages_blocks_testimonials_dc;
  enum_service_pages_blocks_gallery_template: typeof enum_service_pages_blocks_gallery_template;
  enum_service_pages_blocks_gallery_bgc: typeof enum_service_pages_blocks_gallery_bgc;
  enum_service_pages_blocks_gallery_tc: typeof enum_service_pages_blocks_gallery_tc;
  enum_service_pages_blocks_gallery_sc: typeof enum_service_pages_blocks_gallery_sc;
  enum_service_pages_blocks_gallery_dc: typeof enum_service_pages_blocks_gallery_dc;
  enum_service_pages_blocks_service_area_template: typeof enum_service_pages_blocks_service_area_template;
  enum_service_pages_blocks_service_area_bgc: typeof enum_service_pages_blocks_service_area_bgc;
  enum_service_pages_blocks_service_area_tc: typeof enum_service_pages_blocks_service_area_tc;
  enum_service_pages_blocks_service_area_sc: typeof enum_service_pages_blocks_service_area_sc;
  enum_service_pages_blocks_service_area_dc: typeof enum_service_pages_blocks_service_area_dc;
  enum_service_pages_blocks_project_highlights_template: typeof enum_service_pages_blocks_project_highlights_template;
  enum_service_pages_blocks_project_highlights_bgc: typeof enum_service_pages_blocks_project_highlights_bgc;
  enum_service_pages_blocks_project_highlights_tc: typeof enum_service_pages_blocks_project_highlights_tc;
  enum_service_pages_blocks_project_highlights_sc: typeof enum_service_pages_blocks_project_highlights_sc;
  enum_service_pages_blocks_project_highlights_dc: typeof enum_service_pages_blocks_project_highlights_dc;
  enum_service_pages_blocks_machinery_template: typeof enum_service_pages_blocks_machinery_template;
  enum_service_pages_blocks_machinery_bgc: typeof enum_service_pages_blocks_machinery_bgc;
  enum_service_pages_blocks_machinery_tc: typeof enum_service_pages_blocks_machinery_tc;
  enum_service_pages_blocks_machinery_sc: typeof enum_service_pages_blocks_machinery_sc;
  enum_service_pages_blocks_machinery_dc: typeof enum_service_pages_blocks_machinery_dc;
  enum_service_pages_blocks_form_block_bgc: typeof enum_service_pages_blocks_form_block_bgc;
  enum_service_pages_blocks_form_block_tc: typeof enum_service_pages_blocks_form_block_tc;
  enum_service_pages_blocks_form_block_sc: typeof enum_service_pages_blocks_form_block_sc;
  enum_service_pages_blocks_form_block_dc: typeof enum_service_pages_blocks_form_block_dc;
  enum_service_pages_blocks_sub_services_template: typeof enum_service_pages_blocks_sub_services_template;
  enum_service_pages_blocks_sub_services_bgc: typeof enum_service_pages_blocks_sub_services_bgc;
  enum_service_pages_blocks_sub_services_tc: typeof enum_service_pages_blocks_sub_services_tc;
  enum_service_pages_blocks_sub_services_sc: typeof enum_service_pages_blocks_sub_services_sc;
  enum_service_pages_blocks_sub_services_dc: typeof enum_service_pages_blocks_sub_services_dc;
  enum_service_pages_blocks_cta_block_template: typeof enum_service_pages_blocks_cta_block_template;
  enum_service_pages_blocks_cta_block_bgc: typeof enum_service_pages_blocks_cta_block_bgc;
  enum_service_pages_blocks_cta_block_tc: typeof enum_service_pages_blocks_cta_block_tc;
  enum_service_pages_blocks_cta_block_sc: typeof enum_service_pages_blocks_cta_block_sc;
  enum_service_pages_blocks_cta_block_dc: typeof enum_service_pages_blocks_cta_block_dc;
  enum_service_pages_status: typeof enum_service_pages_status;
  enum__service_pages_v_blocks_hero_template: typeof enum__service_pages_v_blocks_hero_template;
  enum__service_pages_v_blocks_hero_bgc: typeof enum__service_pages_v_blocks_hero_bgc;
  enum__service_pages_v_blocks_hero_tc: typeof enum__service_pages_v_blocks_hero_tc;
  enum__service_pages_v_blocks_hero_sc: typeof enum__service_pages_v_blocks_hero_sc;
  enum__service_pages_v_blocks_hero_dc: typeof enum__service_pages_v_blocks_hero_dc;
  enum__service_pages_v_blocks_services_template: typeof enum__service_pages_v_blocks_services_template;
  enum__service_pages_v_blocks_services_bgc: typeof enum__service_pages_v_blocks_services_bgc;
  enum__service_pages_v_blocks_services_tc: typeof enum__service_pages_v_blocks_services_tc;
  enum__service_pages_v_blocks_services_sc: typeof enum__service_pages_v_blocks_services_sc;
  enum__service_pages_v_blocks_services_dc: typeof enum__service_pages_v_blocks_services_dc;
  enum__service_pages_v_blocks_faq_template: typeof enum__service_pages_v_blocks_faq_template;
  enum__service_pages_v_blocks_faq_bgc: typeof enum__service_pages_v_blocks_faq_bgc;
  enum__service_pages_v_blocks_faq_tc: typeof enum__service_pages_v_blocks_faq_tc;
  enum__service_pages_v_blocks_faq_sc: typeof enum__service_pages_v_blocks_faq_sc;
  enum__service_pages_v_blocks_faq_dc: typeof enum__service_pages_v_blocks_faq_dc;
  enum__service_pages_v_blocks_contact_template: typeof enum__service_pages_v_blocks_contact_template;
  enum__service_pages_v_blocks_contact_bgc: typeof enum__service_pages_v_blocks_contact_bgc;
  enum__service_pages_v_blocks_contact_tc: typeof enum__service_pages_v_blocks_contact_tc;
  enum__service_pages_v_blocks_contact_sc: typeof enum__service_pages_v_blocks_contact_sc;
  enum__service_pages_v_blocks_contact_dc: typeof enum__service_pages_v_blocks_contact_dc;
  enum__service_pages_v_blocks_about_benefits_icon: typeof enum__service_pages_v_blocks_about_benefits_icon;
  enum__service_pages_v_blocks_about_template: typeof enum__service_pages_v_blocks_about_template;
  enum__service_pages_v_blocks_about_tc: typeof enum__service_pages_v_blocks_about_tc;
  enum__service_pages_v_blocks_about_sc: typeof enum__service_pages_v_blocks_about_sc;
  enum__service_pages_v_blocks_about_dc: typeof enum__service_pages_v_blocks_about_dc;
  enum__service_pages_v_blocks_about_bgc: typeof enum__service_pages_v_blocks_about_bgc;
  enum__service_pages_v_blocks_testimonials_template: typeof enum__service_pages_v_blocks_testimonials_template;
  enum__service_pages_v_blocks_testimonials_bgc: typeof enum__service_pages_v_blocks_testimonials_bgc;
  enum__service_pages_v_blocks_testimonials_tc: typeof enum__service_pages_v_blocks_testimonials_tc;
  enum__service_pages_v_blocks_testimonials_sc: typeof enum__service_pages_v_blocks_testimonials_sc;
  enum__service_pages_v_blocks_testimonials_dc: typeof enum__service_pages_v_blocks_testimonials_dc;
  enum__service_pages_v_blocks_gallery_template: typeof enum__service_pages_v_blocks_gallery_template;
  enum__service_pages_v_blocks_gallery_bgc: typeof enum__service_pages_v_blocks_gallery_bgc;
  enum__service_pages_v_blocks_gallery_tc: typeof enum__service_pages_v_blocks_gallery_tc;
  enum__service_pages_v_blocks_gallery_sc: typeof enum__service_pages_v_blocks_gallery_sc;
  enum__service_pages_v_blocks_gallery_dc: typeof enum__service_pages_v_blocks_gallery_dc;
  enum__service_pages_v_blocks_service_area_template: typeof enum__service_pages_v_blocks_service_area_template;
  enum__service_pages_v_blocks_service_area_bgc: typeof enum__service_pages_v_blocks_service_area_bgc;
  enum__service_pages_v_blocks_service_area_tc: typeof enum__service_pages_v_blocks_service_area_tc;
  enum__service_pages_v_blocks_service_area_sc: typeof enum__service_pages_v_blocks_service_area_sc;
  enum__service_pages_v_blocks_service_area_dc: typeof enum__service_pages_v_blocks_service_area_dc;
  enum__service_pages_v_blocks_project_highlights_template: typeof enum__service_pages_v_blocks_project_highlights_template;
  enum__service_pages_v_blocks_project_highlights_bgc: typeof enum__service_pages_v_blocks_project_highlights_bgc;
  enum__service_pages_v_blocks_project_highlights_tc: typeof enum__service_pages_v_blocks_project_highlights_tc;
  enum__service_pages_v_blocks_project_highlights_sc: typeof enum__service_pages_v_blocks_project_highlights_sc;
  enum__service_pages_v_blocks_project_highlights_dc: typeof enum__service_pages_v_blocks_project_highlights_dc;
  enum__service_pages_v_blocks_machinery_template: typeof enum__service_pages_v_blocks_machinery_template;
  enum__service_pages_v_blocks_machinery_bgc: typeof enum__service_pages_v_blocks_machinery_bgc;
  enum__service_pages_v_blocks_machinery_tc: typeof enum__service_pages_v_blocks_machinery_tc;
  enum__service_pages_v_blocks_machinery_sc: typeof enum__service_pages_v_blocks_machinery_sc;
  enum__service_pages_v_blocks_machinery_dc: typeof enum__service_pages_v_blocks_machinery_dc;
  enum__service_pages_v_blocks_form_block_bgc: typeof enum__service_pages_v_blocks_form_block_bgc;
  enum__service_pages_v_blocks_form_block_tc: typeof enum__service_pages_v_blocks_form_block_tc;
  enum__service_pages_v_blocks_form_block_sc: typeof enum__service_pages_v_blocks_form_block_sc;
  enum__service_pages_v_blocks_form_block_dc: typeof enum__service_pages_v_blocks_form_block_dc;
  enum__service_pages_v_blocks_sub_services_template: typeof enum__service_pages_v_blocks_sub_services_template;
  enum__service_pages_v_blocks_sub_services_bgc: typeof enum__service_pages_v_blocks_sub_services_bgc;
  enum__service_pages_v_blocks_sub_services_tc: typeof enum__service_pages_v_blocks_sub_services_tc;
  enum__service_pages_v_blocks_sub_services_sc: typeof enum__service_pages_v_blocks_sub_services_sc;
  enum__service_pages_v_blocks_sub_services_dc: typeof enum__service_pages_v_blocks_sub_services_dc;
  enum__service_pages_v_blocks_cta_block_template: typeof enum__service_pages_v_blocks_cta_block_template;
  enum__service_pages_v_blocks_cta_block_bgc: typeof enum__service_pages_v_blocks_cta_block_bgc;
  enum__service_pages_v_blocks_cta_block_tc: typeof enum__service_pages_v_blocks_cta_block_tc;
  enum__service_pages_v_blocks_cta_block_sc: typeof enum__service_pages_v_blocks_cta_block_sc;
  enum__service_pages_v_blocks_cta_block_dc: typeof enum__service_pages_v_blocks_cta_block_dc;
  enum__service_pages_v_version_status: typeof enum__service_pages_v_version_status;
  enum_project_pages_blocks_hero_template: typeof enum_project_pages_blocks_hero_template;
  enum_project_pages_blocks_hero_bgc: typeof enum_project_pages_blocks_hero_bgc;
  enum_project_pages_blocks_hero_tc: typeof enum_project_pages_blocks_hero_tc;
  enum_project_pages_blocks_hero_sc: typeof enum_project_pages_blocks_hero_sc;
  enum_project_pages_blocks_hero_dc: typeof enum_project_pages_blocks_hero_dc;
  enum_project_pages_blocks_gallery_template: typeof enum_project_pages_blocks_gallery_template;
  enum_project_pages_blocks_gallery_bgc: typeof enum_project_pages_blocks_gallery_bgc;
  enum_project_pages_blocks_gallery_tc: typeof enum_project_pages_blocks_gallery_tc;
  enum_project_pages_blocks_gallery_sc: typeof enum_project_pages_blocks_gallery_sc;
  enum_project_pages_blocks_gallery_dc: typeof enum_project_pages_blocks_gallery_dc;
  enum_project_pages_blocks_faq_template: typeof enum_project_pages_blocks_faq_template;
  enum_project_pages_blocks_faq_bgc: typeof enum_project_pages_blocks_faq_bgc;
  enum_project_pages_blocks_faq_tc: typeof enum_project_pages_blocks_faq_tc;
  enum_project_pages_blocks_faq_sc: typeof enum_project_pages_blocks_faq_sc;
  enum_project_pages_blocks_faq_dc: typeof enum_project_pages_blocks_faq_dc;
  enum_project_pages_blocks_contact_template: typeof enum_project_pages_blocks_contact_template;
  enum_project_pages_blocks_contact_bgc: typeof enum_project_pages_blocks_contact_bgc;
  enum_project_pages_blocks_contact_tc: typeof enum_project_pages_blocks_contact_tc;
  enum_project_pages_blocks_contact_sc: typeof enum_project_pages_blocks_contact_sc;
  enum_project_pages_blocks_contact_dc: typeof enum_project_pages_blocks_contact_dc;
  enum_project_pages_blocks_about_benefits_icon: typeof enum_project_pages_blocks_about_benefits_icon;
  enum_project_pages_blocks_about_template: typeof enum_project_pages_blocks_about_template;
  enum_project_pages_blocks_about_tc: typeof enum_project_pages_blocks_about_tc;
  enum_project_pages_blocks_about_sc: typeof enum_project_pages_blocks_about_sc;
  enum_project_pages_blocks_about_dc: typeof enum_project_pages_blocks_about_dc;
  enum_project_pages_blocks_about_bgc: typeof enum_project_pages_blocks_about_bgc;
  enum_project_pages_blocks_testimonials_template: typeof enum_project_pages_blocks_testimonials_template;
  enum_project_pages_blocks_testimonials_bgc: typeof enum_project_pages_blocks_testimonials_bgc;
  enum_project_pages_blocks_testimonials_tc: typeof enum_project_pages_blocks_testimonials_tc;
  enum_project_pages_blocks_testimonials_sc: typeof enum_project_pages_blocks_testimonials_sc;
  enum_project_pages_blocks_testimonials_dc: typeof enum_project_pages_blocks_testimonials_dc;
  enum_project_pages_blocks_about_project_template: typeof enum_project_pages_blocks_about_project_template;
  enum_project_pages_blocks_about_project_bgc: typeof enum_project_pages_blocks_about_project_bgc;
  enum_project_pages_blocks_about_project_tc: typeof enum_project_pages_blocks_about_project_tc;
  enum_project_pages_blocks_about_project_sc: typeof enum_project_pages_blocks_about_project_sc;
  enum_project_pages_blocks_about_project_dc: typeof enum_project_pages_blocks_about_project_dc;
  enum_project_pages_blocks_related_projects_template: typeof enum_project_pages_blocks_related_projects_template;
  enum_project_pages_blocks_related_projects_bgc: typeof enum_project_pages_blocks_related_projects_bgc;
  enum_project_pages_blocks_related_projects_tc: typeof enum_project_pages_blocks_related_projects_tc;
  enum_project_pages_blocks_related_projects_sc: typeof enum_project_pages_blocks_related_projects_sc;
  enum_project_pages_blocks_related_projects_dc: typeof enum_project_pages_blocks_related_projects_dc;
  enum_project_pages_blocks_cta_block_template: typeof enum_project_pages_blocks_cta_block_template;
  enum_project_pages_blocks_cta_block_bgc: typeof enum_project_pages_blocks_cta_block_bgc;
  enum_project_pages_blocks_cta_block_tc: typeof enum_project_pages_blocks_cta_block_tc;
  enum_project_pages_blocks_cta_block_sc: typeof enum_project_pages_blocks_cta_block_sc;
  enum_project_pages_blocks_cta_block_dc: typeof enum_project_pages_blocks_cta_block_dc;
  enum_project_pages_status: typeof enum_project_pages_status;
  enum__project_pages_v_blocks_hero_template: typeof enum__project_pages_v_blocks_hero_template;
  enum__project_pages_v_blocks_hero_bgc: typeof enum__project_pages_v_blocks_hero_bgc;
  enum__project_pages_v_blocks_hero_tc: typeof enum__project_pages_v_blocks_hero_tc;
  enum__project_pages_v_blocks_hero_sc: typeof enum__project_pages_v_blocks_hero_sc;
  enum__project_pages_v_blocks_hero_dc: typeof enum__project_pages_v_blocks_hero_dc;
  enum__project_pages_v_blocks_gallery_template: typeof enum__project_pages_v_blocks_gallery_template;
  enum__project_pages_v_blocks_gallery_bgc: typeof enum__project_pages_v_blocks_gallery_bgc;
  enum__project_pages_v_blocks_gallery_tc: typeof enum__project_pages_v_blocks_gallery_tc;
  enum__project_pages_v_blocks_gallery_sc: typeof enum__project_pages_v_blocks_gallery_sc;
  enum__project_pages_v_blocks_gallery_dc: typeof enum__project_pages_v_blocks_gallery_dc;
  enum__project_pages_v_blocks_faq_template: typeof enum__project_pages_v_blocks_faq_template;
  enum__project_pages_v_blocks_faq_bgc: typeof enum__project_pages_v_blocks_faq_bgc;
  enum__project_pages_v_blocks_faq_tc: typeof enum__project_pages_v_blocks_faq_tc;
  enum__project_pages_v_blocks_faq_sc: typeof enum__project_pages_v_blocks_faq_sc;
  enum__project_pages_v_blocks_faq_dc: typeof enum__project_pages_v_blocks_faq_dc;
  enum__project_pages_v_blocks_contact_template: typeof enum__project_pages_v_blocks_contact_template;
  enum__project_pages_v_blocks_contact_bgc: typeof enum__project_pages_v_blocks_contact_bgc;
  enum__project_pages_v_blocks_contact_tc: typeof enum__project_pages_v_blocks_contact_tc;
  enum__project_pages_v_blocks_contact_sc: typeof enum__project_pages_v_blocks_contact_sc;
  enum__project_pages_v_blocks_contact_dc: typeof enum__project_pages_v_blocks_contact_dc;
  enum__project_pages_v_blocks_about_benefits_icon: typeof enum__project_pages_v_blocks_about_benefits_icon;
  enum__project_pages_v_blocks_about_template: typeof enum__project_pages_v_blocks_about_template;
  enum__project_pages_v_blocks_about_tc: typeof enum__project_pages_v_blocks_about_tc;
  enum__project_pages_v_blocks_about_sc: typeof enum__project_pages_v_blocks_about_sc;
  enum__project_pages_v_blocks_about_dc: typeof enum__project_pages_v_blocks_about_dc;
  enum__project_pages_v_blocks_about_bgc: typeof enum__project_pages_v_blocks_about_bgc;
  enum__project_pages_v_blocks_testimonials_template: typeof enum__project_pages_v_blocks_testimonials_template;
  enum__project_pages_v_blocks_testimonials_bgc: typeof enum__project_pages_v_blocks_testimonials_bgc;
  enum__project_pages_v_blocks_testimonials_tc: typeof enum__project_pages_v_blocks_testimonials_tc;
  enum__project_pages_v_blocks_testimonials_sc: typeof enum__project_pages_v_blocks_testimonials_sc;
  enum__project_pages_v_blocks_testimonials_dc: typeof enum__project_pages_v_blocks_testimonials_dc;
  enum__project_pages_v_blocks_about_project_template: typeof enum__project_pages_v_blocks_about_project_template;
  enum__project_pages_v_blocks_about_project_bgc: typeof enum__project_pages_v_blocks_about_project_bgc;
  enum__project_pages_v_blocks_about_project_tc: typeof enum__project_pages_v_blocks_about_project_tc;
  enum__project_pages_v_blocks_about_project_sc: typeof enum__project_pages_v_blocks_about_project_sc;
  enum__project_pages_v_blocks_about_project_dc: typeof enum__project_pages_v_blocks_about_project_dc;
  enum__project_pages_v_blocks_related_projects_template: typeof enum__project_pages_v_blocks_related_projects_template;
  enum__project_pages_v_blocks_related_projects_bgc: typeof enum__project_pages_v_blocks_related_projects_bgc;
  enum__project_pages_v_blocks_related_projects_tc: typeof enum__project_pages_v_blocks_related_projects_tc;
  enum__project_pages_v_blocks_related_projects_sc: typeof enum__project_pages_v_blocks_related_projects_sc;
  enum__project_pages_v_blocks_related_projects_dc: typeof enum__project_pages_v_blocks_related_projects_dc;
  enum__project_pages_v_blocks_cta_block_template: typeof enum__project_pages_v_blocks_cta_block_template;
  enum__project_pages_v_blocks_cta_block_bgc: typeof enum__project_pages_v_blocks_cta_block_bgc;
  enum__project_pages_v_blocks_cta_block_tc: typeof enum__project_pages_v_blocks_cta_block_tc;
  enum__project_pages_v_blocks_cta_block_sc: typeof enum__project_pages_v_blocks_cta_block_sc;
  enum__project_pages_v_blocks_cta_block_dc: typeof enum__project_pages_v_blocks_cta_block_dc;
  enum__project_pages_v_version_status: typeof enum__project_pages_v_version_status;
  enum_product_pages_blocks_product_form_template: typeof enum_product_pages_blocks_product_form_template;
  enum_product_pages_blocks_product_form_tc: typeof enum_product_pages_blocks_product_form_tc;
  enum_product_pages_blocks_product_form_sc: typeof enum_product_pages_blocks_product_form_sc;
  enum_product_pages_blocks_product_form_dc: typeof enum_product_pages_blocks_product_form_dc;
  enum_product_pages_blocks_product_form_bgc: typeof enum_product_pages_blocks_product_form_bgc;
  enum_product_pages_blocks_hero_template: typeof enum_product_pages_blocks_hero_template;
  enum_product_pages_blocks_hero_bgc: typeof enum_product_pages_blocks_hero_bgc;
  enum_product_pages_blocks_hero_tc: typeof enum_product_pages_blocks_hero_tc;
  enum_product_pages_blocks_hero_sc: typeof enum_product_pages_blocks_hero_sc;
  enum_product_pages_blocks_hero_dc: typeof enum_product_pages_blocks_hero_dc;
  enum_product_pages_blocks_faq_template: typeof enum_product_pages_blocks_faq_template;
  enum_product_pages_blocks_faq_bgc: typeof enum_product_pages_blocks_faq_bgc;
  enum_product_pages_blocks_faq_tc: typeof enum_product_pages_blocks_faq_tc;
  enum_product_pages_blocks_faq_sc: typeof enum_product_pages_blocks_faq_sc;
  enum_product_pages_blocks_faq_dc: typeof enum_product_pages_blocks_faq_dc;
  enum_product_pages_blocks_about_benefits_icon: typeof enum_product_pages_blocks_about_benefits_icon;
  enum_product_pages_blocks_about_template: typeof enum_product_pages_blocks_about_template;
  enum_product_pages_blocks_about_tc: typeof enum_product_pages_blocks_about_tc;
  enum_product_pages_blocks_about_sc: typeof enum_product_pages_blocks_about_sc;
  enum_product_pages_blocks_about_dc: typeof enum_product_pages_blocks_about_dc;
  enum_product_pages_blocks_about_bgc: typeof enum_product_pages_blocks_about_bgc;
  enum_product_pages_blocks_testimonials_template: typeof enum_product_pages_blocks_testimonials_template;
  enum_product_pages_blocks_testimonials_bgc: typeof enum_product_pages_blocks_testimonials_bgc;
  enum_product_pages_blocks_testimonials_tc: typeof enum_product_pages_blocks_testimonials_tc;
  enum_product_pages_blocks_testimonials_sc: typeof enum_product_pages_blocks_testimonials_sc;
  enum_product_pages_blocks_testimonials_dc: typeof enum_product_pages_blocks_testimonials_dc;
  enum_product_pages_blocks_gallery_template: typeof enum_product_pages_blocks_gallery_template;
  enum_product_pages_blocks_gallery_bgc: typeof enum_product_pages_blocks_gallery_bgc;
  enum_product_pages_blocks_gallery_tc: typeof enum_product_pages_blocks_gallery_tc;
  enum_product_pages_blocks_gallery_sc: typeof enum_product_pages_blocks_gallery_sc;
  enum_product_pages_blocks_gallery_dc: typeof enum_product_pages_blocks_gallery_dc;
  enum_product_pages_blocks_cta_block_template: typeof enum_product_pages_blocks_cta_block_template;
  enum_product_pages_blocks_cta_block_bgc: typeof enum_product_pages_blocks_cta_block_bgc;
  enum_product_pages_blocks_cta_block_tc: typeof enum_product_pages_blocks_cta_block_tc;
  enum_product_pages_blocks_cta_block_sc: typeof enum_product_pages_blocks_cta_block_sc;
  enum_product_pages_blocks_cta_block_dc: typeof enum_product_pages_blocks_cta_block_dc;
  enum_product_pages_status: typeof enum_product_pages_status;
  enum__product_pages_v_blocks_product_form_template: typeof enum__product_pages_v_blocks_product_form_template;
  enum__product_pages_v_blocks_product_form_tc: typeof enum__product_pages_v_blocks_product_form_tc;
  enum__product_pages_v_blocks_product_form_sc: typeof enum__product_pages_v_blocks_product_form_sc;
  enum__product_pages_v_blocks_product_form_dc: typeof enum__product_pages_v_blocks_product_form_dc;
  enum__product_pages_v_blocks_product_form_bgc: typeof enum__product_pages_v_blocks_product_form_bgc;
  enum__product_pages_v_blocks_hero_template: typeof enum__product_pages_v_blocks_hero_template;
  enum__product_pages_v_blocks_hero_bgc: typeof enum__product_pages_v_blocks_hero_bgc;
  enum__product_pages_v_blocks_hero_tc: typeof enum__product_pages_v_blocks_hero_tc;
  enum__product_pages_v_blocks_hero_sc: typeof enum__product_pages_v_blocks_hero_sc;
  enum__product_pages_v_blocks_hero_dc: typeof enum__product_pages_v_blocks_hero_dc;
  enum__product_pages_v_blocks_faq_template: typeof enum__product_pages_v_blocks_faq_template;
  enum__product_pages_v_blocks_faq_bgc: typeof enum__product_pages_v_blocks_faq_bgc;
  enum__product_pages_v_blocks_faq_tc: typeof enum__product_pages_v_blocks_faq_tc;
  enum__product_pages_v_blocks_faq_sc: typeof enum__product_pages_v_blocks_faq_sc;
  enum__product_pages_v_blocks_faq_dc: typeof enum__product_pages_v_blocks_faq_dc;
  enum__product_pages_v_blocks_about_benefits_icon: typeof enum__product_pages_v_blocks_about_benefits_icon;
  enum__product_pages_v_blocks_about_template: typeof enum__product_pages_v_blocks_about_template;
  enum__product_pages_v_blocks_about_tc: typeof enum__product_pages_v_blocks_about_tc;
  enum__product_pages_v_blocks_about_sc: typeof enum__product_pages_v_blocks_about_sc;
  enum__product_pages_v_blocks_about_dc: typeof enum__product_pages_v_blocks_about_dc;
  enum__product_pages_v_blocks_about_bgc: typeof enum__product_pages_v_blocks_about_bgc;
  enum__product_pages_v_blocks_testimonials_template: typeof enum__product_pages_v_blocks_testimonials_template;
  enum__product_pages_v_blocks_testimonials_bgc: typeof enum__product_pages_v_blocks_testimonials_bgc;
  enum__product_pages_v_blocks_testimonials_tc: typeof enum__product_pages_v_blocks_testimonials_tc;
  enum__product_pages_v_blocks_testimonials_sc: typeof enum__product_pages_v_blocks_testimonials_sc;
  enum__product_pages_v_blocks_testimonials_dc: typeof enum__product_pages_v_blocks_testimonials_dc;
  enum__product_pages_v_blocks_gallery_template: typeof enum__product_pages_v_blocks_gallery_template;
  enum__product_pages_v_blocks_gallery_bgc: typeof enum__product_pages_v_blocks_gallery_bgc;
  enum__product_pages_v_blocks_gallery_tc: typeof enum__product_pages_v_blocks_gallery_tc;
  enum__product_pages_v_blocks_gallery_sc: typeof enum__product_pages_v_blocks_gallery_sc;
  enum__product_pages_v_blocks_gallery_dc: typeof enum__product_pages_v_blocks_gallery_dc;
  enum__product_pages_v_blocks_cta_block_template: typeof enum__product_pages_v_blocks_cta_block_template;
  enum__product_pages_v_blocks_cta_block_bgc: typeof enum__product_pages_v_blocks_cta_block_bgc;
  enum__product_pages_v_blocks_cta_block_tc: typeof enum__product_pages_v_blocks_cta_block_tc;
  enum__product_pages_v_blocks_cta_block_sc: typeof enum__product_pages_v_blocks_cta_block_sc;
  enum__product_pages_v_blocks_cta_block_dc: typeof enum__product_pages_v_blocks_cta_block_dc;
  enum__product_pages_v_version_status: typeof enum__product_pages_v_version_status;
  enum_pricelists_price_list_type: typeof enum_pricelists_price_list_type;
  enum_menus_menu_items_children_icon: typeof enum_menus_menu_items_children_icon;
  enum_products_type: typeof enum_products_type;
  enum_posts_status: typeof enum_posts_status;
  enum__posts_v_version_status: typeof enum__posts_v_version_status;
  enum_customers_customer_type: typeof enum_customers_customer_type;
  enum_orders_status: typeof enum_orders_status;
  enum_orders_source: typeof enum_orders_source;
  enum_business_info_platforms_platform: typeof enum_business_info_platforms_platform;
  enum_tenants_typography_heading_font_name: typeof enum_tenants_typography_heading_font_name;
  enum_tenants_typography_body_font_name: typeof enum_tenants_typography_body_font_name;
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type;
  enum_forms_redirect_type: typeof enum_forms_redirect_type;
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug;
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state;
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug;
  users_roles: typeof users_roles;
  users_tenants_roles: typeof users_tenants_roles;
  users_tenants: typeof users_tenants;
  users_sessions: typeof users_sessions;
  users: typeof users;
  media: typeof media;
  high_quality_media: typeof high_quality_media;
  machinery_specifications_spec_details: typeof machinery_specifications_spec_details;
  machinery_specifications: typeof machinery_specifications;
  machinery: typeof machinery;
  services_features: typeof services_features;
  services: typeof services;
  services_rels: typeof services_rels;
  testimonials: typeof testimonials;
  testimonials_rels: typeof testimonials_rels;
  faq_items: typeof faq_items;
  ctas: typeof ctas;
  projects_project_images: typeof projects_project_images;
  projects: typeof projects;
  projects_texts: typeof projects_texts;
  projects_rels: typeof projects_rels;
  opening_hours_daily_hours_days: typeof opening_hours_daily_hours_days;
  opening_hours_daily_hours_time_slots: typeof opening_hours_daily_hours_time_slots;
  opening_hours_daily_hours: typeof opening_hours_daily_hours;
  opening_hours: typeof opening_hours;
  sub_services: typeof sub_services;
  sub_services_rels: typeof sub_services_rels;
  _sub_services_v: typeof _sub_services_v;
  _sub_services_v_rels: typeof _sub_services_v_rels;
  pages_blocks_hero_features: typeof pages_blocks_hero_features;
  pages_blocks_hero: typeof pages_blocks_hero;
  pages_blocks_services: typeof pages_blocks_services;
  pages_blocks_faq: typeof pages_blocks_faq;
  pages_blocks_contact: typeof pages_blocks_contact;
  pages_blocks_about_benefits: typeof pages_blocks_about_benefits;
  pages_blocks_about: typeof pages_blocks_about;
  pages_blocks_testimonials: typeof pages_blocks_testimonials;
  pages_blocks_gallery: typeof pages_blocks_gallery;
  pages_blocks_service_area_locations: typeof pages_blocks_service_area_locations;
  pages_blocks_service_area: typeof pages_blocks_service_area;
  pages_blocks_project_highlights: typeof pages_blocks_project_highlights;
  pages_blocks_machinery: typeof pages_blocks_machinery;
  pages_blocks_form_block: typeof pages_blocks_form_block;
  pages_blocks_howto_steps: typeof pages_blocks_howto_steps;
  pages_blocks_howto: typeof pages_blocks_howto;
  pages_blocks_cta_block: typeof pages_blocks_cta_block;
  pages_blocks_featured_products: typeof pages_blocks_featured_products;
  pages_blocks_text: typeof pages_blocks_text;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_blocks_hero_features: typeof _pages_v_blocks_hero_features;
  _pages_v_blocks_hero: typeof _pages_v_blocks_hero;
  _pages_v_blocks_services: typeof _pages_v_blocks_services;
  _pages_v_blocks_faq: typeof _pages_v_blocks_faq;
  _pages_v_blocks_contact: typeof _pages_v_blocks_contact;
  _pages_v_blocks_about_benefits: typeof _pages_v_blocks_about_benefits;
  _pages_v_blocks_about: typeof _pages_v_blocks_about;
  _pages_v_blocks_testimonials: typeof _pages_v_blocks_testimonials;
  _pages_v_blocks_gallery: typeof _pages_v_blocks_gallery;
  _pages_v_blocks_service_area_locations: typeof _pages_v_blocks_service_area_locations;
  _pages_v_blocks_service_area: typeof _pages_v_blocks_service_area;
  _pages_v_blocks_project_highlights: typeof _pages_v_blocks_project_highlights;
  _pages_v_blocks_machinery: typeof _pages_v_blocks_machinery;
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block;
  _pages_v_blocks_howto_steps: typeof _pages_v_blocks_howto_steps;
  _pages_v_blocks_howto: typeof _pages_v_blocks_howto;
  _pages_v_blocks_cta_block: typeof _pages_v_blocks_cta_block;
  _pages_v_blocks_featured_products: typeof _pages_v_blocks_featured_products;
  _pages_v_blocks_text: typeof _pages_v_blocks_text;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  service_pages_blocks_hero_features: typeof service_pages_blocks_hero_features;
  service_pages_blocks_hero: typeof service_pages_blocks_hero;
  service_pages_blocks_services: typeof service_pages_blocks_services;
  service_pages_blocks_faq: typeof service_pages_blocks_faq;
  service_pages_blocks_contact: typeof service_pages_blocks_contact;
  service_pages_blocks_about_benefits: typeof service_pages_blocks_about_benefits;
  service_pages_blocks_about: typeof service_pages_blocks_about;
  service_pages_blocks_testimonials: typeof service_pages_blocks_testimonials;
  service_pages_blocks_gallery: typeof service_pages_blocks_gallery;
  service_pages_blocks_service_area_locations: typeof service_pages_blocks_service_area_locations;
  service_pages_blocks_service_area: typeof service_pages_blocks_service_area;
  service_pages_blocks_project_highlights: typeof service_pages_blocks_project_highlights;
  service_pages_blocks_machinery: typeof service_pages_blocks_machinery;
  service_pages_blocks_form_block: typeof service_pages_blocks_form_block;
  service_pages_blocks_sub_services: typeof service_pages_blocks_sub_services;
  service_pages_blocks_cta_block: typeof service_pages_blocks_cta_block;
  service_pages: typeof service_pages;
  service_pages_rels: typeof service_pages_rels;
  _service_pages_v_blocks_hero_features: typeof _service_pages_v_blocks_hero_features;
  _service_pages_v_blocks_hero: typeof _service_pages_v_blocks_hero;
  _service_pages_v_blocks_services: typeof _service_pages_v_blocks_services;
  _service_pages_v_blocks_faq: typeof _service_pages_v_blocks_faq;
  _service_pages_v_blocks_contact: typeof _service_pages_v_blocks_contact;
  _service_pages_v_blocks_about_benefits: typeof _service_pages_v_blocks_about_benefits;
  _service_pages_v_blocks_about: typeof _service_pages_v_blocks_about;
  _service_pages_v_blocks_testimonials: typeof _service_pages_v_blocks_testimonials;
  _service_pages_v_blocks_gallery: typeof _service_pages_v_blocks_gallery;
  _service_pages_v_blocks_service_area_locations: typeof _service_pages_v_blocks_service_area_locations;
  _service_pages_v_blocks_service_area: typeof _service_pages_v_blocks_service_area;
  _service_pages_v_blocks_project_highlights: typeof _service_pages_v_blocks_project_highlights;
  _service_pages_v_blocks_machinery: typeof _service_pages_v_blocks_machinery;
  _service_pages_v_blocks_form_block: typeof _service_pages_v_blocks_form_block;
  _service_pages_v_blocks_sub_services: typeof _service_pages_v_blocks_sub_services;
  _service_pages_v_blocks_cta_block: typeof _service_pages_v_blocks_cta_block;
  _service_pages_v: typeof _service_pages_v;
  _service_pages_v_rels: typeof _service_pages_v_rels;
  project_pages_blocks_hero_features: typeof project_pages_blocks_hero_features;
  project_pages_blocks_hero: typeof project_pages_blocks_hero;
  project_pages_blocks_gallery: typeof project_pages_blocks_gallery;
  project_pages_blocks_faq: typeof project_pages_blocks_faq;
  project_pages_blocks_contact: typeof project_pages_blocks_contact;
  project_pages_blocks_about_benefits: typeof project_pages_blocks_about_benefits;
  project_pages_blocks_about: typeof project_pages_blocks_about;
  project_pages_blocks_testimonials: typeof project_pages_blocks_testimonials;
  project_pages_blocks_about_project: typeof project_pages_blocks_about_project;
  project_pages_blocks_related_projects: typeof project_pages_blocks_related_projects;
  project_pages_blocks_cta_block: typeof project_pages_blocks_cta_block;
  project_pages: typeof project_pages;
  project_pages_rels: typeof project_pages_rels;
  _project_pages_v_blocks_hero_features: typeof _project_pages_v_blocks_hero_features;
  _project_pages_v_blocks_hero: typeof _project_pages_v_blocks_hero;
  _project_pages_v_blocks_gallery: typeof _project_pages_v_blocks_gallery;
  _project_pages_v_blocks_faq: typeof _project_pages_v_blocks_faq;
  _project_pages_v_blocks_contact: typeof _project_pages_v_blocks_contact;
  _project_pages_v_blocks_about_benefits: typeof _project_pages_v_blocks_about_benefits;
  _project_pages_v_blocks_about: typeof _project_pages_v_blocks_about;
  _project_pages_v_blocks_testimonials: typeof _project_pages_v_blocks_testimonials;
  _project_pages_v_blocks_about_project: typeof _project_pages_v_blocks_about_project;
  _project_pages_v_blocks_related_projects: typeof _project_pages_v_blocks_related_projects;
  _project_pages_v_blocks_cta_block: typeof _project_pages_v_blocks_cta_block;
  _project_pages_v: typeof _project_pages_v;
  _project_pages_v_rels: typeof _project_pages_v_rels;
  product_pages_blocks_product_form: typeof product_pages_blocks_product_form;
  product_pages_blocks_hero_features: typeof product_pages_blocks_hero_features;
  product_pages_blocks_hero: typeof product_pages_blocks_hero;
  product_pages_blocks_faq: typeof product_pages_blocks_faq;
  product_pages_blocks_about_benefits: typeof product_pages_blocks_about_benefits;
  product_pages_blocks_about: typeof product_pages_blocks_about;
  product_pages_blocks_testimonials: typeof product_pages_blocks_testimonials;
  product_pages_blocks_gallery: typeof product_pages_blocks_gallery;
  product_pages_blocks_cta_block: typeof product_pages_blocks_cta_block;
  product_pages: typeof product_pages;
  product_pages_rels: typeof product_pages_rels;
  _product_pages_v_blocks_product_form: typeof _product_pages_v_blocks_product_form;
  _product_pages_v_blocks_hero_features: typeof _product_pages_v_blocks_hero_features;
  _product_pages_v_blocks_hero: typeof _product_pages_v_blocks_hero;
  _product_pages_v_blocks_faq: typeof _product_pages_v_blocks_faq;
  _product_pages_v_blocks_about_benefits: typeof _product_pages_v_blocks_about_benefits;
  _product_pages_v_blocks_about: typeof _product_pages_v_blocks_about;
  _product_pages_v_blocks_testimonials: typeof _product_pages_v_blocks_testimonials;
  _product_pages_v_blocks_gallery: typeof _product_pages_v_blocks_gallery;
  _product_pages_v_blocks_cta_block: typeof _product_pages_v_blocks_cta_block;
  _product_pages_v: typeof _product_pages_v;
  _product_pages_v_rels: typeof _product_pages_v_rels;
  redirects: typeof redirects;
  pricelists: typeof pricelists;
  pricelists_rels: typeof pricelists_rels;
  price_list_sections: typeof price_list_sections;
  price_list_items: typeof price_list_items;
  banners: typeof banners;
  menus_menu_items_children: typeof menus_menu_items_children;
  menus_menu_items: typeof menus_menu_items;
  menus: typeof menus;
  products_variant_option_types: typeof products_variant_option_types;
  products_technical_specs: typeof products_technical_specs;
  products_highlights: typeof products_highlights;
  products: typeof products;
  products_rels: typeof products_rels;
  product_variants_variant_options: typeof product_variants_variant_options;
  product_variants: typeof product_variants;
  collections: typeof collections;
  posts_populated_authors: typeof posts_populated_authors;
  posts: typeof posts;
  posts_rels: typeof posts_rels;
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors;
  _posts_v: typeof _posts_v;
  _posts_v_rels: typeof _posts_v_rels;
  customers: typeof customers;
  orders: typeof orders;
  business_info_platforms: typeof business_info_platforms;
  business_info: typeof business_info;
  navbar: typeof navbar;
  footer_blocks_menu_section: typeof footer_blocks_menu_section;
  footer: typeof footer;
  tenants_typography_heading_font_weights: typeof tenants_typography_heading_font_weights;
  tenants_typography_heading_font_subsets: typeof tenants_typography_heading_font_subsets;
  tenants_typography_body_font_weights: typeof tenants_typography_body_font_weights;
  tenants_typography_body_font_subsets: typeof tenants_typography_body_font_subsets;
  tenants: typeof tenants;
  forms_blocks_checkbox: typeof forms_blocks_checkbox;
  forms_blocks_country: typeof forms_blocks_country;
  forms_blocks_email: typeof forms_blocks_email;
  forms_blocks_message: typeof forms_blocks_message;
  forms_blocks_number: typeof forms_blocks_number;
  forms_blocks_select_options: typeof forms_blocks_select_options;
  forms_blocks_select: typeof forms_blocks_select;
  forms_blocks_state: typeof forms_blocks_state;
  forms_blocks_text: typeof forms_blocks_text;
  forms_blocks_textarea: typeof forms_blocks_textarea;
  forms_emails: typeof forms_emails;
  forms: typeof forms;
  forms_rels: typeof forms_rels;
  form_submissions_submission_data: typeof form_submissions_submission_data;
  form_submissions: typeof form_submissions;
  payload_jobs_log: typeof payload_jobs_log;
  payload_jobs: typeof payload_jobs;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_roles: typeof relations_users_roles;
  relations_users_tenants_roles: typeof relations_users_tenants_roles;
  relations_users_tenants: typeof relations_users_tenants;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_high_quality_media: typeof relations_high_quality_media;
  relations_machinery_specifications_spec_details: typeof relations_machinery_specifications_spec_details;
  relations_machinery_specifications: typeof relations_machinery_specifications;
  relations_machinery: typeof relations_machinery;
  relations_services_features: typeof relations_services_features;
  relations_services_rels: typeof relations_services_rels;
  relations_services: typeof relations_services;
  relations_testimonials_rels: typeof relations_testimonials_rels;
  relations_testimonials: typeof relations_testimonials;
  relations_faq_items: typeof relations_faq_items;
  relations_ctas: typeof relations_ctas;
  relations_projects_project_images: typeof relations_projects_project_images;
  relations_projects_texts: typeof relations_projects_texts;
  relations_projects_rels: typeof relations_projects_rels;
  relations_projects: typeof relations_projects;
  relations_opening_hours_daily_hours_days: typeof relations_opening_hours_daily_hours_days;
  relations_opening_hours_daily_hours_time_slots: typeof relations_opening_hours_daily_hours_time_slots;
  relations_opening_hours_daily_hours: typeof relations_opening_hours_daily_hours;
  relations_opening_hours: typeof relations_opening_hours;
  relations_sub_services_rels: typeof relations_sub_services_rels;
  relations_sub_services: typeof relations_sub_services;
  relations__sub_services_v_rels: typeof relations__sub_services_v_rels;
  relations__sub_services_v: typeof relations__sub_services_v;
  relations_pages_blocks_hero_features: typeof relations_pages_blocks_hero_features;
  relations_pages_blocks_hero: typeof relations_pages_blocks_hero;
  relations_pages_blocks_services: typeof relations_pages_blocks_services;
  relations_pages_blocks_faq: typeof relations_pages_blocks_faq;
  relations_pages_blocks_contact: typeof relations_pages_blocks_contact;
  relations_pages_blocks_about_benefits: typeof relations_pages_blocks_about_benefits;
  relations_pages_blocks_about: typeof relations_pages_blocks_about;
  relations_pages_blocks_testimonials: typeof relations_pages_blocks_testimonials;
  relations_pages_blocks_gallery: typeof relations_pages_blocks_gallery;
  relations_pages_blocks_service_area_locations: typeof relations_pages_blocks_service_area_locations;
  relations_pages_blocks_service_area: typeof relations_pages_blocks_service_area;
  relations_pages_blocks_project_highlights: typeof relations_pages_blocks_project_highlights;
  relations_pages_blocks_machinery: typeof relations_pages_blocks_machinery;
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block;
  relations_pages_blocks_howto_steps: typeof relations_pages_blocks_howto_steps;
  relations_pages_blocks_howto: typeof relations_pages_blocks_howto;
  relations_pages_blocks_cta_block: typeof relations_pages_blocks_cta_block;
  relations_pages_blocks_featured_products: typeof relations_pages_blocks_featured_products;
  relations_pages_blocks_text: typeof relations_pages_blocks_text;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_blocks_hero_features: typeof relations__pages_v_blocks_hero_features;
  relations__pages_v_blocks_hero: typeof relations__pages_v_blocks_hero;
  relations__pages_v_blocks_services: typeof relations__pages_v_blocks_services;
  relations__pages_v_blocks_faq: typeof relations__pages_v_blocks_faq;
  relations__pages_v_blocks_contact: typeof relations__pages_v_blocks_contact;
  relations__pages_v_blocks_about_benefits: typeof relations__pages_v_blocks_about_benefits;
  relations__pages_v_blocks_about: typeof relations__pages_v_blocks_about;
  relations__pages_v_blocks_testimonials: typeof relations__pages_v_blocks_testimonials;
  relations__pages_v_blocks_gallery: typeof relations__pages_v_blocks_gallery;
  relations__pages_v_blocks_service_area_locations: typeof relations__pages_v_blocks_service_area_locations;
  relations__pages_v_blocks_service_area: typeof relations__pages_v_blocks_service_area;
  relations__pages_v_blocks_project_highlights: typeof relations__pages_v_blocks_project_highlights;
  relations__pages_v_blocks_machinery: typeof relations__pages_v_blocks_machinery;
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block;
  relations__pages_v_blocks_howto_steps: typeof relations__pages_v_blocks_howto_steps;
  relations__pages_v_blocks_howto: typeof relations__pages_v_blocks_howto;
  relations__pages_v_blocks_cta_block: typeof relations__pages_v_blocks_cta_block;
  relations__pages_v_blocks_featured_products: typeof relations__pages_v_blocks_featured_products;
  relations__pages_v_blocks_text: typeof relations__pages_v_blocks_text;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_service_pages_blocks_hero_features: typeof relations_service_pages_blocks_hero_features;
  relations_service_pages_blocks_hero: typeof relations_service_pages_blocks_hero;
  relations_service_pages_blocks_services: typeof relations_service_pages_blocks_services;
  relations_service_pages_blocks_faq: typeof relations_service_pages_blocks_faq;
  relations_service_pages_blocks_contact: typeof relations_service_pages_blocks_contact;
  relations_service_pages_blocks_about_benefits: typeof relations_service_pages_blocks_about_benefits;
  relations_service_pages_blocks_about: typeof relations_service_pages_blocks_about;
  relations_service_pages_blocks_testimonials: typeof relations_service_pages_blocks_testimonials;
  relations_service_pages_blocks_gallery: typeof relations_service_pages_blocks_gallery;
  relations_service_pages_blocks_service_area_locations: typeof relations_service_pages_blocks_service_area_locations;
  relations_service_pages_blocks_service_area: typeof relations_service_pages_blocks_service_area;
  relations_service_pages_blocks_project_highlights: typeof relations_service_pages_blocks_project_highlights;
  relations_service_pages_blocks_machinery: typeof relations_service_pages_blocks_machinery;
  relations_service_pages_blocks_form_block: typeof relations_service_pages_blocks_form_block;
  relations_service_pages_blocks_sub_services: typeof relations_service_pages_blocks_sub_services;
  relations_service_pages_blocks_cta_block: typeof relations_service_pages_blocks_cta_block;
  relations_service_pages_rels: typeof relations_service_pages_rels;
  relations_service_pages: typeof relations_service_pages;
  relations__service_pages_v_blocks_hero_features: typeof relations__service_pages_v_blocks_hero_features;
  relations__service_pages_v_blocks_hero: typeof relations__service_pages_v_blocks_hero;
  relations__service_pages_v_blocks_services: typeof relations__service_pages_v_blocks_services;
  relations__service_pages_v_blocks_faq: typeof relations__service_pages_v_blocks_faq;
  relations__service_pages_v_blocks_contact: typeof relations__service_pages_v_blocks_contact;
  relations__service_pages_v_blocks_about_benefits: typeof relations__service_pages_v_blocks_about_benefits;
  relations__service_pages_v_blocks_about: typeof relations__service_pages_v_blocks_about;
  relations__service_pages_v_blocks_testimonials: typeof relations__service_pages_v_blocks_testimonials;
  relations__service_pages_v_blocks_gallery: typeof relations__service_pages_v_blocks_gallery;
  relations__service_pages_v_blocks_service_area_locations: typeof relations__service_pages_v_blocks_service_area_locations;
  relations__service_pages_v_blocks_service_area: typeof relations__service_pages_v_blocks_service_area;
  relations__service_pages_v_blocks_project_highlights: typeof relations__service_pages_v_blocks_project_highlights;
  relations__service_pages_v_blocks_machinery: typeof relations__service_pages_v_blocks_machinery;
  relations__service_pages_v_blocks_form_block: typeof relations__service_pages_v_blocks_form_block;
  relations__service_pages_v_blocks_sub_services: typeof relations__service_pages_v_blocks_sub_services;
  relations__service_pages_v_blocks_cta_block: typeof relations__service_pages_v_blocks_cta_block;
  relations__service_pages_v_rels: typeof relations__service_pages_v_rels;
  relations__service_pages_v: typeof relations__service_pages_v;
  relations_project_pages_blocks_hero_features: typeof relations_project_pages_blocks_hero_features;
  relations_project_pages_blocks_hero: typeof relations_project_pages_blocks_hero;
  relations_project_pages_blocks_gallery: typeof relations_project_pages_blocks_gallery;
  relations_project_pages_blocks_faq: typeof relations_project_pages_blocks_faq;
  relations_project_pages_blocks_contact: typeof relations_project_pages_blocks_contact;
  relations_project_pages_blocks_about_benefits: typeof relations_project_pages_blocks_about_benefits;
  relations_project_pages_blocks_about: typeof relations_project_pages_blocks_about;
  relations_project_pages_blocks_testimonials: typeof relations_project_pages_blocks_testimonials;
  relations_project_pages_blocks_about_project: typeof relations_project_pages_blocks_about_project;
  relations_project_pages_blocks_related_projects: typeof relations_project_pages_blocks_related_projects;
  relations_project_pages_blocks_cta_block: typeof relations_project_pages_blocks_cta_block;
  relations_project_pages_rels: typeof relations_project_pages_rels;
  relations_project_pages: typeof relations_project_pages;
  relations__project_pages_v_blocks_hero_features: typeof relations__project_pages_v_blocks_hero_features;
  relations__project_pages_v_blocks_hero: typeof relations__project_pages_v_blocks_hero;
  relations__project_pages_v_blocks_gallery: typeof relations__project_pages_v_blocks_gallery;
  relations__project_pages_v_blocks_faq: typeof relations__project_pages_v_blocks_faq;
  relations__project_pages_v_blocks_contact: typeof relations__project_pages_v_blocks_contact;
  relations__project_pages_v_blocks_about_benefits: typeof relations__project_pages_v_blocks_about_benefits;
  relations__project_pages_v_blocks_about: typeof relations__project_pages_v_blocks_about;
  relations__project_pages_v_blocks_testimonials: typeof relations__project_pages_v_blocks_testimonials;
  relations__project_pages_v_blocks_about_project: typeof relations__project_pages_v_blocks_about_project;
  relations__project_pages_v_blocks_related_projects: typeof relations__project_pages_v_blocks_related_projects;
  relations__project_pages_v_blocks_cta_block: typeof relations__project_pages_v_blocks_cta_block;
  relations__project_pages_v_rels: typeof relations__project_pages_v_rels;
  relations__project_pages_v: typeof relations__project_pages_v;
  relations_product_pages_blocks_product_form: typeof relations_product_pages_blocks_product_form;
  relations_product_pages_blocks_hero_features: typeof relations_product_pages_blocks_hero_features;
  relations_product_pages_blocks_hero: typeof relations_product_pages_blocks_hero;
  relations_product_pages_blocks_faq: typeof relations_product_pages_blocks_faq;
  relations_product_pages_blocks_about_benefits: typeof relations_product_pages_blocks_about_benefits;
  relations_product_pages_blocks_about: typeof relations_product_pages_blocks_about;
  relations_product_pages_blocks_testimonials: typeof relations_product_pages_blocks_testimonials;
  relations_product_pages_blocks_gallery: typeof relations_product_pages_blocks_gallery;
  relations_product_pages_blocks_cta_block: typeof relations_product_pages_blocks_cta_block;
  relations_product_pages_rels: typeof relations_product_pages_rels;
  relations_product_pages: typeof relations_product_pages;
  relations__product_pages_v_blocks_product_form: typeof relations__product_pages_v_blocks_product_form;
  relations__product_pages_v_blocks_hero_features: typeof relations__product_pages_v_blocks_hero_features;
  relations__product_pages_v_blocks_hero: typeof relations__product_pages_v_blocks_hero;
  relations__product_pages_v_blocks_faq: typeof relations__product_pages_v_blocks_faq;
  relations__product_pages_v_blocks_about_benefits: typeof relations__product_pages_v_blocks_about_benefits;
  relations__product_pages_v_blocks_about: typeof relations__product_pages_v_blocks_about;
  relations__product_pages_v_blocks_testimonials: typeof relations__product_pages_v_blocks_testimonials;
  relations__product_pages_v_blocks_gallery: typeof relations__product_pages_v_blocks_gallery;
  relations__product_pages_v_blocks_cta_block: typeof relations__product_pages_v_blocks_cta_block;
  relations__product_pages_v_rels: typeof relations__product_pages_v_rels;
  relations__product_pages_v: typeof relations__product_pages_v;
  relations_redirects: typeof relations_redirects;
  relations_pricelists_rels: typeof relations_pricelists_rels;
  relations_pricelists: typeof relations_pricelists;
  relations_price_list_sections: typeof relations_price_list_sections;
  relations_price_list_items: typeof relations_price_list_items;
  relations_banners: typeof relations_banners;
  relations_menus_menu_items_children: typeof relations_menus_menu_items_children;
  relations_menus_menu_items: typeof relations_menus_menu_items;
  relations_menus: typeof relations_menus;
  relations_products_variant_option_types: typeof relations_products_variant_option_types;
  relations_products_technical_specs: typeof relations_products_technical_specs;
  relations_products_highlights: typeof relations_products_highlights;
  relations_products_rels: typeof relations_products_rels;
  relations_products: typeof relations_products;
  relations_product_variants_variant_options: typeof relations_product_variants_variant_options;
  relations_product_variants: typeof relations_product_variants;
  relations_collections: typeof relations_collections;
  relations_posts_populated_authors: typeof relations_posts_populated_authors;
  relations_posts_rels: typeof relations_posts_rels;
  relations_posts: typeof relations_posts;
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors;
  relations__posts_v_rels: typeof relations__posts_v_rels;
  relations__posts_v: typeof relations__posts_v;
  relations_customers: typeof relations_customers;
  relations_orders: typeof relations_orders;
  relations_business_info_platforms: typeof relations_business_info_platforms;
  relations_business_info: typeof relations_business_info;
  relations_navbar: typeof relations_navbar;
  relations_footer_blocks_menu_section: typeof relations_footer_blocks_menu_section;
  relations_footer: typeof relations_footer;
  relations_tenants_typography_heading_font_weights: typeof relations_tenants_typography_heading_font_weights;
  relations_tenants_typography_heading_font_subsets: typeof relations_tenants_typography_heading_font_subsets;
  relations_tenants_typography_body_font_weights: typeof relations_tenants_typography_body_font_weights;
  relations_tenants_typography_body_font_subsets: typeof relations_tenants_typography_body_font_subsets;
  relations_tenants: typeof relations_tenants;
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox;
  relations_forms_blocks_country: typeof relations_forms_blocks_country;
  relations_forms_blocks_email: typeof relations_forms_blocks_email;
  relations_forms_blocks_message: typeof relations_forms_blocks_message;
  relations_forms_blocks_number: typeof relations_forms_blocks_number;
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options;
  relations_forms_blocks_select: typeof relations_forms_blocks_select;
  relations_forms_blocks_state: typeof relations_forms_blocks_state;
  relations_forms_blocks_text: typeof relations_forms_blocks_text;
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea;
  relations_forms_emails: typeof relations_forms_emails;
  relations_forms_rels: typeof relations_forms_rels;
  relations_forms: typeof relations_forms;
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data;
  relations_form_submissions: typeof relations_form_submissions;
  relations_payload_jobs_log: typeof relations_payload_jobs_log;
  relations_payload_jobs: typeof relations_payload_jobs;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
